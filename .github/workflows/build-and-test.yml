name: Build and Test

on: push

jobs:
  build-cse:
    name: Build CSE executable
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Get branch name
        uses: tj-actions/branch-names@v5
        id: branch-name

      - name: Save branch name
        run: |
          echo "CI_GIT_BRANCH=${{steps.branch-name.outputs.current_branch}}" >> $GITHUB_ENV
      - name: Setup python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Add Poetry to path
        shell: pwsh
        run: echo "$env:USERPROFILE\.poetry\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Load cached toolkit-205 venv if cache exists
        id: cached-toolkit-205-dependencies
        uses: actions/cache@v2
        with:
          path: vendor/toolkit-205/.venv
          key: poetry-tk205-cache-v2-${{ hashFiles('**/poetry.lock') }}
      - name: Install toolkit-205 dependencies if cache does not exist
        run: cd vendor/toolkit-205 && poetry install
        if: steps.cached-toolkit-205-dependencies.outputs.cache-hit != 'true'
      - name: Load cached schema205 venv if cache exists
        id: cached-schema205-dependencies
        uses: actions/cache@v2
        with:
          path: vendor/toolkit-205/schema-205/.venv
          key: poetry-schema205-cache-v2-${{ hashFiles('**/poetry.lock') }}
      - name: Install schema205 dependencies if cache does not exist
        run: cd vendor/toolkit-205/schema-205 && poetry install
        if: steps.cached-schema205-dependencies.outputs.cache-hit != 'true'
      - name: Build
        run: cmake -P cmake/configure.cmake && cmake -P cmake/build.cmake
      - name: Upload executable artifiact
        uses: actions/upload-artifact@v2
        with:
          name: CSE.exe
          path: msvc/CSE.exe
  test-cse:
    name: Test CSE
    needs: build-cse
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Configure CMake
        run: cmake -P cmake/configure.cmake
      - name: Build wcmp
        run: cmake --build . --config Release --target wcmp
        working-directory: msvc/build
      - name: Download executable artifact
        uses: actions/download-artifact@v2
        with:
          name: CSE.exe
          path: msvc
      - name: Test
        run: ctest -C Release --output-on-failure -E shadetest  # CI can't do GPU calcs at this time
        working-directory: msvc/build
  build-doc:
    name: Build CSE documentation
    needs: build-cse
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Configure CMake
        run: cmake -P cmake/configure.cmake
      - name: Download executable artifact
        uses: actions/download-artifact@v2
        with:
          name: CSE.exe
          path: msvc
      - name: Install pandoc
        run: 'cinst -y pandoc --version=1.17.2 --ia=ALLUSERS=1'
      - name: Add pandoc to path
        run: echo "C:\Program Files (x86)\Pandoc" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Add MSVC developer commands to PATH
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build docs
        run: rake
        working-directory: doc
      - name: Upload documentation
        uses: actions/upload-artifact@v2
        with:
          name: Documentation
          path: doc/output