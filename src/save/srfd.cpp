// srfd.cpp

/* This is a Record and Field Descriptor Tables source file generated generated by rcdef.exe.
   This file is compiled and linked into an application, such as CN. */

/* DO NOT EDIT: This file is overwritten when rcdef is run.
   To change, change rcdef.exe input as desired and re-run rcdef.exe via the appropropriate batch file. */


#include "cnglob.h"	// includes <dtypes.h> for DTxxxx symbols
#include "srd.h"	// defines structures and declares variables.  Plus comments.  Manually generated file.
#include <ancrec.h>	// defines base class for record classes in rc____.h files.  Manually generated file.
// also <rc___.h> file(s) are included below.

#undef o		// in case an .h file defines o


/*========= small FIELD TYPES table */

struct SFDTAB sFdtab[] =	// indexed by SFIR.fdTy's below
{ /*
           data type      limits          units 
             dtypes.h    dtypes.h       dtypes.h       <-- symbol defined in file
             Dttab[]          --        Untab[]       <-- is index into
             dttab.cpp        --        untab.cpp     <-- which is in source file */
    {              0,     LMNONE,        UNNONE },	//  0  NONE
    {          DTINT,     LMNONE,        UNNONE },	//  1  INT
    {         DTINTP,     LMNONE,        UNNONE },	//  2  INTP
    {           DTSI,     LMNONE,        UNNONE },	//  3  SI
    {           DTSI,      LMGEZ,        UNNONE },	//  4  SI_GEZ
    {           DTSI,       LMGZ,        UNNONE },	//  5  SI_GZ
    {          DTBOO,     LMNONE,        UNNONE },	//  6  BOO
    {          DTDOY,      LMDOY,        UNNONE },	//  7  DOY
    {         DTSHOY,     LMNONE,        UNNONE },	//  8  SHOY
    {          DTUSI,     LMNONE,        UNNONE },	//  9  USI
    {           DTLI,     LMNONE,        UNNONE },	// 10  LI
    {          DTCHP,     LMNONE,        UNNONE },	// 11  CHP
    {        DTFLOAT,     LMNONE,        UNNONE },	// 12  FLOAT
    {        DTFLOAT,      LMGEZ,        UNNONE },	// 13  FLOAT_GEZ
    {        DTFLOAT,       LMGZ,        UNNONE },	// 14  FLOAT_GZ
    {        DTFLOAT,      LMGE1,        UNNONE },	// 15  FLOAT_GE1
    {        DTFLOAT,       LMLZ,        UNNONE },	// 16  FLOAT_LZ
    {        DTFLOAT,       LMFR,        UNNONE },	// 17  FRAC
    {        DTFLOAT,      LMFGZ,        UNNONE },	// 18  FRAC_GZ
    {          DTDBL,     LMNONE,        UNNONE },	// 19  DBL
    {       DTFLOATP,     LMNONE,        UNNONE },	// 20  FLOATP
    {         DTDBLP,     LMNONE,        UNNONE },	// 21  DBLP
    {        DTIDATE,     LMNONE,        UNNONE },	// 22  IDATE
    {        DTANAME,     LMNONE,        UNNONE },	// 23  ANAME
    {           DTTI,      LMGEZ,        UNNONE },	// 24  TI
    {        DTFLOAT,      LMGEZ,      UNLENGTH },	// 25  LEN
    {        DTFLOAT,       LMGZ,      UNLENGTH },	// 26  LEN_GZ
    {        DTFLOAT,      LMGEZ,        UNAREA },	// 27  AREA
    {        DTFLOAT,       LMGZ,        UNAREA },	// 28  AREA_GZ
    {        DTFLOAT,      LMGEZ,        UNAREA },	// 29  AREA_GEZ
    {        DTFLOAT,      LMGEZ,       UNAREA2 },	// 30  AREA2
    {        DTFLOAT,       LMGZ,      UNVOLUME },	// 31  VOL_GZ
    {        DTFLOAT,     LMNONE,     UNAIRFLOW },	// 32  AFLOW
    {        DTFLOAT,       LMGZ,     UNAIRFLOW },	// 33  AFLOW_GZ
    {        DTFLOAT,      LMGEZ,     UNAIRFLOW },	// 34  AFLOW_GEZ
    {        DTFLOAT,     LMNONE,          UNUA },	// 35  CFLOW
    {        DTFLOAT,     LMNONE,       UNMFLOW },	// 36  MFLOW
    {        DTFLOAT,      LMGEZ,     UNPRESAIR },	// 37  PRESAIR_GEZ
    {        DTFLOAT,      LMGEZ,     UNPRESH2O },	// 38  PRESH2O_GEZ
    {        DTFLOAT,       LMGZ,     UNH2OFLOW },	// 39  H2OFLOW_GZ
    {        DTFLOAT,     LMNONE,       UNANGLE },	// 40  ANGLE
    {          DTDBL,     LMNONE,       UNANGLE },	// 41  ANGLE_DBL
    {        DTFLOAT,     LMNONE,        UNTEMP },	// 42  TEMP
    {        DTFLOAT,       LMGZ,        UNTEMP },	// 43  TEMP_GZ
    {        DTFLOAT,     LMNONE,       UNTDIFF },	// 44  TEMPDIFF
    {        DTFLOAT,       LMFR,        UNNONE },	// 45  HUMRAT
    {        DTFLOAT,      LMFGZ,        UNNONE },	// 46  HUMRAT_GZ
    {        DTFLOAT,     LMNONE,      UNENERGY },	// 47  ENERGY
    {        DTFLOAT,     LMNONE,       UNPOWER },	// 48  POWER
    {        DTFLOAT,       LMNZ,       UNPOWER },	// 49  POWER_NZ
    {        DTFLOAT,       LMGZ,       UNPOWER },	// 50  POWER_GZ
    {        DTFLOAT,      LMGEZ,       UNPOWER },	// 51  POWER_GEZ
    {        DTFLOAT,       LMGZ,      UNELPWR2 },	// 52  KW_GZ
    {        DTFLOAT,       LMGZ,         UNBHP },	// 53  BHP_GZ
    {        DTFLOAT,      LMGEZ,     UNDENSITY },	// 54  DENSITY
    {        DTFLOAT,       LMGZ,       UNCNDVY },	// 55  CNDVY_GZ
    {        DTFLOAT,      LMGEZ,        UNUVAL },	// 56  UH
    {        DTFLOAT,       LMGZ,        UNUVAL },	// 57  UH_GZ
    {        DTFLOAT,       LMGZ,          UNF2 },	// 58  F2_GZ
    {        DTFLOAT,      LMGEZ,          UNUA },	// 59  UA
    {        DTFLOAT,       LMGZ,       UNRESVY },	// 60  RESVY_GZ
    {        DTFLOAT,       LMGZ,        UNRVAL },	// 61  RES_GZ
    {        DTFLOAT,      LMGEZ,    UNSPECHEAT },	// 62  SPECHEAT
    {        DTFLOAT,       LMGZ,     UNHEATCAP },	// 63  HC_GZ
    {        DTFLOAT,      LMGEZ, UNHEATCAP_AREA },	// 64  HC_AREA
    {        DTFLOAT,       LMGZ, UNHEATCAP_VOL },	// 65  HC_VOL
    {        DTFLOAT,      LMGEZ,       UNHOURS },	// 66  HOURS
    {      DTSGTARGP,     LMNONE,        UNNONE },	// 67  SGTARGP
    {   DTMASSLAYERP,     LMNONE,        UNNONE },	// 68  MASSLAYERP
    {   DTMASSMODELP,     LMNONE,        UNNONE },	// 69  MASSMODELP
    {      DTIZXRATP,     LMNONE,        UNNONE },	// 70  IZXRATP
    {         DTTCCM,     LMNONE,        UNNONE },	// 71  TCCM
    {        DTZHXTY,     LMNONE,        UNNONE },	// 72  ZHXTY
    {        DTTCUSE,     LMNONE,        UNNONE },	// 73  TCUSE
    {       DTAHMODE,     LMNONE,        UNNONE },	// 74  AHMODE
    {  DTTOWLOADCASE,     LMNONE,        UNNONE },	// 75  TOWLOADCASE
    {     DTCOILUSED,     LMNONE,        UNNONE },	// 76  COILUSED
    {        DTWFLOC,     LMNONE,        UNNONE },	// 77  WFLOC
    {        DTWFLID,     LMNONE,        UNNONE },	// 78  WFLID
    {  DTWFILEFORMAT,     LMNONE,        UNNONE },	// 79  WFILEFORMAT
    {       DTWFLOC2,     LMNONE,        UNNONE },	// 80  WFLOC2
    {       DTYACAMP,     LMNONE,        UNNONE },	// 81  YACAMP
    {      DTWDYEARP,     LMNONE,        UNNONE },	// 82  WDYEARP
    {      DTRIGTARG,     LMNONE,        UNNONE },	// 83  RIGTARG
    {     DTRIGDISTP,     LMNONE,        UNNONE },	// 84  RIGDISTP
    {         DTZNRP,     LMNONE,        UNNONE },	// 85  ZNRP
    {       DTXSURFP,     LMNONE,        UNNONE },	// 86  XSURFP
    {     DTDUCTSEGP,     LMNONE,        UNNONE },	// 87  DUCTSEGP
    {     DTPIPESEGP,     LMNONE,        UNNONE },	// 88  PIPESEGP
    {      DTNOYESCH,     LMNONE,        UNNONE },	// 89  NOYESCH
    {        DTDOWCH,     LMNONE,        UNNONE },	// 90  DOWCH
    {         DTDGCH,     LMNONE,        UNNONE },	// 91  DGCH
    {         DTTSCH,     LMNONE,        UNNONE },	// 92  TSCH
    {     DTSKYMODCH,     LMNONE,        UNNONE },	// 93  SKYMODCH
    {   DTSKYMODLWCH,     LMNONE,        UNNONE },	// 94  SKYMODLWCH
    {  DTEXSHMODELCH,     LMNONE,        UNNONE },	// 95  EXSHMODELCH
    {DTSLRINTERPMETH,     LMNONE,        UNNONE },	// 96  SLRINTERPMETH
    {       DTOSTYCH,     LMNONE,        UNNONE },	// 97  OSTYCH
    {    DTZNMODELCH,     LMNONE,        UNNONE },	// 98  ZNMODELCH
    {     DTIZNVTYCH,     LMNONE,        UNNONE },	// 99  IZNVTYCH
    {      DTEXCNDCH,     LMNONE,        UNNONE },	//100  EXCNDCH
    {    DTSFMODELCH,     LMNONE,        UNNONE },	//101  SFMODELCH
    {DTGROUNDMODELCH,     LMNONE,        UNNONE },	//102  GROUNDMODELCH
    {     DTFBXREFCH,     LMNONE,        UNNONE },	//103  FBXREFCH
    {     DTFBZREFCH,     LMNONE,        UNNONE },	//104  FBZREFCH
    {  DTCONVMODELCH,     LMNONE,        UNNONE },	//105  CONVMODELCH
    {DTRSYSMODECTRLCH,     LMNONE,        UNNONE },	//106  RSYSMODECTRLCH
    {     DTRSYSTYCH,     LMNONE,        UNNONE },	//107  RSYSTYCH
    {  DTRSYSOAVTYCH,     LMNONE,        UNNONE },	//108  RSYSOAVTYCH
    {DTRSYSDEFROSTMODELCH,     LMNONE,        UNNONE },	//109  RSYSDEFROSTMODELCH
    {    DTAUXHEATTY,     LMNONE,        UNNONE },	//110  AUXHEATTY
    {  DTAUXHEATCTRL,     LMNONE,        UNNONE },	//111  AUXHEATCTRL
    {     DTWHTYPECH,     LMNONE,        UNNONE },	//112  WHTYPECH
    {  DTWHHEATSRCCH,     LMNONE,        UNNONE },	//113  WHHEATSRCCH
    { DTWSCALCMODECH,     LMNONE,        UNNONE },	//114  WSCALCMODECH
    {   DTWHASHPTYCH,     LMNONE,        UNNONE },	//115  WHASHPTYCH
    {    DTWHRESTYCH,     LMNONE,        UNNONE },	//116  WHRESTYCH
    {      DTDHWEUCH,     LMNONE,        UNNONE },	//117  DHWEUCH
    {     DTDHWEUXCH,     LMNONE,        UNNONE },	//118  DHWEUXCH
    {DTDHWBRANCHMODELCH,     LMNONE,        UNNONE },	//119  DHWBRANCHMODELCH
    {  DTDHWLSEGTYCH,     LMNONE,        UNNONE },	//120  DHWLSEGTYCH
    {     DTDWHRTYCH,     LMNONE,        UNNONE },	//121  DWHRTYCH
    {    DTDHWDRMETH,     LMNONE,        UNNONE },	//122  DHWDRMETH
    {      DTPVMODCH,     LMNONE,        UNNONE },	//123  PVMODCH
    {      DTPVARRCH,     LMNONE,        UNNONE },	//124  PVARRCH
    {      DTMOUNTCH,     LMNONE,        UNNONE },	//125  MOUNTCH
    {   DTFENMODELCH,     LMNONE,        UNNONE },	//126  FENMODELCH
    {      DTEXSHDCH,     LMNONE,        UNNONE },	//127  EXSHDCH
    {      DTINSHDCH,     LMNONE,        UNNONE },	//128  INSHDCH
    {       DTSIDECH,     LMNONE,        UNNONE },	//129  SIDECH
    {        DTIVLCH,     LMNONE,        UNNONE },	//130  IVLCH
    {   DTFILESTATCH,     LMNONE,        UNNONE },	//131  FILESTATCH
    {       DTRPTYCH,     LMNONE,        UNNONE },	//132  RPTYCH
    {      DTRPTHDCH,     LMNONE,        UNNONE },	//133  RPTHDCH
    {       DTJUSTCH,     LMNONE,        UNNONE },	//134  JUSTCH
    {       DTVALNDT,     LMNONE,        UNNONE },	//135  VALNDT
    {     DTENDUSECH,     LMNONE,        UNNONE },	//136  ENDUSECH
    {        DTAFCAT,     LMNONE,        UNNONE },	//137  AFCAT
    {        DTMONCH,     LMNONE,        UNNONE },	//138  MONCH
    {   DTHDAYCASECH,     LMNONE,        UNNONE },	//139  HDAYCASECH
    {      DTFANTYCH,     LMNONE,        UNNONE },	//140  FANTYCH
    {     DTFANAPPCH,     LMNONE,        UNNONE },	//141  FANAPPCH
    {      DTMOTTYCH,     LMNONE,        UNNONE },	//142  MOTTYCH
    {     DTMOTPOSCH,     LMNONE,        UNNONE },	//143  MOTPOSCH
    {      DTFANPLCH,     LMNONE,        UNNONE },	//144  FANPLCH
    {    DTCOILAPPCH,     LMNONE,        UNNONE },	//145  COILAPPCH
    {     DTCOILTYCH,     LMNONE,        UNNONE },	//146  COILTYCH
    {      DTECOTYCH,     LMNONE,        UNNONE },	//147  ECOTYCH
    {     DTDUCTTYCH,     LMNONE,        UNNONE },	//148  DUCTTYCH
    {       DTOAMNCH,     LMNONE,        UNNONE },	//149  OAMNCH
    {      DTHUMTHCH,     LMNONE,        UNNONE },	//150  HUMTHCH
    {      DTOFFONCH,     LMNONE,        UNNONE },	//151  OFFONCH
    {      DTTPSTGCH,     LMNONE,        UNNONE },	//152  TPSTGCH
    {       DTCTTYCH,     LMNONE,        UNNONE },	//153  CTTYCH
    {        DTCCHCM,     LMNONE,        UNNONE },	//154  CCHCM
    {   DTDIFFSAMECH,     LMNONE,        UNNONE },	//155  DIFFSAMECH
    {      DTAHSCHVC,     LMNONE,        UNNONE },	//156  AHSCHVC
    {   DTOFFAVAILVC,     LMNONE,        UNNONE },	//157  OFFAVAILVC
    {    DTTFANSCHVC,     LMNONE,        UNNONE },	//158  TFANSCHVC
    {      DTOFFONVC,     LMNONE,        UNNONE },	//159  OFFONVC
    {      DTNOYESVC,     LMNONE,        UNNONE },	//160  NOYESVC
    { DTOFFAVAILONVC,     LMNONE,        UNNONE },	//161  OFFAVAILONVC
    {  DTVENTAVAILVC,     LMNONE,        UNNONE },	//162  VENTAVAILVC
    { DTBATCTRLALGVC,     LMNONE,        UNNONE },	//163  BATCTRLALGVC
    {     DTDHWDRSIG,     LMNONE,        UNNONE },	//164  DHWDRSIG
    {       DTTSCMNC,     LMNONE,        UNTEMP },	//165  TEMP_TSCM
    {         DTRANC,     LMNONE,        UNTEMP },	//166  TEMP_RA
    {         DTRANC,     LMNONE,        UNENTH },	//167  ENTH_RA
    {              0,          0,             0 } 	// table terminator (needed?)
};		// sFdtab


/*========== small FIELDS-IN-RECORDS tables for each record type */

 /* COLUMNS ARE
     .fdTy   .evf   .ff               .off              .mName 
   (sFdtab (vari-  (fld 
    index) ation) flgs)    (member offset)       (member name)         field type name
   ------- ------ -----  -----------------  ------------------         --------------- */

/*lint -e619	suppress msg for putting "text" in pointer */


#include <rccn.h>	// defines classes and structures whose tables follow

struct SFIR sfirTOPRAT[] =	// fields info for RTTOPRAT
{
 #define o(m) offsetof(TOPRAT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    6,    1,     o(bAutoSizeCmd),     "bAutoSizeCmd" },	// BOO
    {   0,   89,   32,       o(chAutoSize),       "chAutoSize" },	// NOYESCH
    {   0,   89,    1,       o(chSimulate),       "chSimulate" },	// NOYESCH
    {   0,    7,    1,        o(tp_begDay),           "begDay" },	// DOY
    {   0,    7,    1,        o(tp_endDay),           "endDay" },	// DOY
    {   0,    3,   32,            o(nDays),            "nDays" },	// SI
    {   0,   90,    1,          o(jan1DoW),          "jan1DoW" },	// DOWCH
    {   0,    3,   32,             o(year),             "year" },	// SI
    {   0,    4,    1,           o(wuDays),           "wuDays" },	// SI_GEZ
    {   0,    5,    1,     o(tp_nSubSteps),        "nSubSteps" },	// SI_GZ
    {   0,   11,    2,        o(tp_wfName),           "wfName" },	// CHP
    {   0,   11,    2,      o(tp_TDVfName),         "TDVfName" },	// CHP
    {   0,   25,   32,        o(elevation),        "elevation" },	// LEN
    {   0,   42,    2,          o(refTemp),          "refTemp" },	// TEMP
    {   0,   18,    2,            o(refRH),            "refRH" },	// FRAC_GZ
    {   0,   17,  256,         o(grndRefl),         "grndRefl" },	// FRAC
    {   0,   17,    1,      o(tp_grndEmit),         "grndEmit" },	// FRAC
    {   0,   17,    1,        o(tp_grndRf),           "grndRf" },	// FRAC
    {   0,   14,    1,      o(tp_soilDiff),         "soilDiff" },	// FLOAT_GZ
    {   0,   14,    1,      o(tp_soilCond),         "soilCond" },	// FLOAT_GZ
    {   0,   14,    1,      o(tp_soilSpHt),         "soilSpHt" },	// FLOAT_GZ
    {   0,   14,    1,      o(tp_soilDens),         "soilDens" },	// FLOAT_GZ
    {   0,   14,    1, o(tp_farFieldWidth),    "farFieldWidth" },	// FLOAT_GZ
    {   0,   91,    1,   o(tp_deepGrndCnd),      "deepGrndCnd" },	// DGCH
    {   0,   14,    1, o(tp_deepGrndDepth),    "deepGrndDepth" },	// FLOAT_GZ
    {   0,   12,    1,     o(tp_deepGrndT),        "deepGrndT" },	// FLOAT
    {   0,   14,    1,           o(tp_tol),              "tol" },	// FLOAT_GZ
    {   0,   18,    1,          o(humTolF),          "humTolF" },	// FRAC_GZ
    {   0,   14,    1,         o(ebTolMon),         "ebTolMon" },	// FLOAT_GZ
    {   0,   14,    1,         o(ebTolDay),         "ebTolDay" },	// FLOAT_GZ
    {   0,   14,    1,        o(ebTolHour),        "ebTolHour" },	// FLOAT_GZ
    {   0,   14,    1,       o(ebTolSubhr),       "ebTolSubhr" },	// FLOAT_GZ
    {   1,    1,   32,    o(tp_ebErrCount),       "ebErrCount" },	// INT
    {   0,   14,    1,    o(tp_grndMinDim),       "grndMinDim" },	// FLOAT_GZ
    {   0,   14,    1,o(tp_grndMaxGrthCoeff), "grndMaxGrthCoeff" },	// FLOAT_GZ
    {   0,   92,    1,  o(tp_grndTimeStep),     "grndTimeStep" },	// TSCH
    {   0,   14,    1,       o(tp_AWTrigT),          "AWTrigT" },	// FLOAT_GZ
    {   0,   14,    1,     o(tp_AWTrigSlr),        "AWTrigSlr" },	// FLOAT_GZ
    {   0,   14,    1,       o(tp_AWTrigH),          "AWTrigH" },	// FLOAT_GZ
    {   0,   14,    1,      o(tp_ANTolAbs),         "ANTolAbs" },	// FLOAT_GZ
    {   0,   14,    1,      o(tp_ANTolRel),         "ANTolRel" },	// FLOAT_GZ
    {   0,   40,    1,       o(tp_bldgAzm),          "bldgAzm" },	// ANGLE
    {   0,   93,    1,         o(skyModel),         "skyModel" },	// SKYMODCH
    {   0,   94,    1,       o(skyModelLW),       "skyModelLW" },	// SKYMODLWCH
    {   0,   95,    1,  o(tp_exShadeModel),     "exShadeModel" },	// EXSHMODELCH
    {   0,   96,    1, o(tp_slrInterpMeth),    "slrInterpMeth" },	// SLRINTERPMETH
    {   0,  150,    1,          o(humMeth),          "humMeth" },	// HUMTHCH
    {   0,   57,    1,           o(dflExH),           "dflExH" },	// UH_GZ
    {   0,    9,    1,      o(workDayMask),      "workDayMask" },	// USI
    {   0,   89,    1,               o(DT),               "DT" },	// NOYESCH
    {   0,    7,   32,         o(DTBegDay),         "DTBegDay" },	// DOY
    {   0,    7,   32,         o(DTEndDay),         "DTEndDay" },	// DOY
    {   0,   13,    1,     o(windSpeedMin),     "windSpeedMin" },	// FLOAT_GEZ
    {   0,   13,    1,            o(windF),            "windF" },	// FLOAT_GEZ
    {   0,    3,    1,  o(tp_terrainClass),     "terrainClass" },	// SI
    {   0,   13,    1,         o(radBeamF),         "radBeamF" },	// FLOAT_GEZ
    {   0,   13,    1,         o(radDiffF),         "radDiffF" },	// FLOAT_GEZ
    {   0,  162,  512,     o(tp_ventAvail),        "ventAvail" },	// VENTAVAILVC
    {   0,   12, 1028,         o(tp_fVent),            "fVent" },	// FLOAT
    {   0,   89,   32,      o(tp_hConvMod),         "hConvMod" },	// NOYESCH
    {   0,    3,    2,          o(verbose),          "verbose" },	// SI
    {   0,   10,  512,  o(tp_dbgPrintMask),     "dbgPrintMask" },	// LI
    {   0,   10,    1, o(tp_dbgPrintMaskC),    "dbgPrintMaskC" },	// LI
    {   0,   18,    1,          o(auszTol),          "auszTol" },	// FRAC_GZ
    {   0,   42,  512,       o(heatDsTDbO),       "heatDsTDbO" },	// TEMP
    {   0,   42,  512,       o(heatDsTWbO),       "heatDsTWbO" },	// TEMP
    {   0,    3,    1,   o(tp_coolDsMo[0]),      "coolDsMo[0]" },	// SI
    {   0,    3,    1,   o(tp_coolDsMo[1]),      "coolDsMo[1]" },	// SI
    {   0,    3,    1,   o(tp_coolDsMo[2]),      "coolDsMo[2]" },	// SI
    {   0,    3,    1,   o(tp_coolDsMo[3]),      "coolDsMo[3]" },	// SI
    {   0,    3,    1,   o(tp_coolDsMo[4]),      "coolDsMo[4]" },	// SI
    {   0,    3,    1,   o(tp_coolDsMo[5]),      "coolDsMo[5]" },	// SI
    {   0,    3,    1,   o(tp_coolDsMo[6]),      "coolDsMo[6]" },	// SI
    {   0,    3,    1,   o(tp_coolDsMo[7]),      "coolDsMo[7]" },	// SI
    {   0,    3,    1,   o(tp_coolDsMo[8]),      "coolDsMo[8]" },	// SI
    {   0,    3,    1,   o(tp_coolDsMo[9]),      "coolDsMo[9]" },	// SI
    {   0,    3,    1,  o(tp_coolDsMo[10]),     "coolDsMo[10]" },	// SI
    {   0,    3,    1,  o(tp_coolDsMo[11]),     "coolDsMo[11]" },	// SI
    {   0,    3,    1,  o(tp_coolDsMo[12]),     "coolDsMo[12]" },	// SI
    {   0,    7,    1,  o(tp_coolDsDay[0]),     "coolDsDay[0]" },	// DOY
    {   0,    7,    1,  o(tp_coolDsDay[1]),     "coolDsDay[1]" },	// DOY
    {   0,    7,    1,  o(tp_coolDsDay[2]),     "coolDsDay[2]" },	// DOY
    {   0,    7,    1,  o(tp_coolDsDay[3]),     "coolDsDay[3]" },	// DOY
    {   0,    7,    1,  o(tp_coolDsDay[4]),     "coolDsDay[4]" },	// DOY
    {   0,    7,    1,  o(tp_coolDsDay[5]),     "coolDsDay[5]" },	// DOY
    {   0,    7,    1,  o(tp_coolDsDay[6]),     "coolDsDay[6]" },	// DOY
    {   0,    7,    1,  o(tp_coolDsDay[7]),     "coolDsDay[7]" },	// DOY
    {   0,    7,    1,  o(tp_coolDsDay[8]),     "coolDsDay[8]" },	// DOY
    {   0,    7,    1,  o(tp_coolDsDay[9]),     "coolDsDay[9]" },	// DOY
    {   0,    7,    1, o(tp_coolDsDay[10]),    "coolDsDay[10]" },	// DOY
    {   0,    7,    1, o(tp_coolDsDay[11]),    "coolDsDay[11]" },	// DOY
    {   0,    7,    1, o(tp_coolDsDay[12]),    "coolDsDay[12]" },	// DOY
    {   0,   24,    1, o(tp_coolDsCond[0]),    "coolDsCond[0]" },	// TI
    {   0,   24,    1, o(tp_coolDsCond[1]),    "coolDsCond[1]" },	// TI
    {   0,   24,    1, o(tp_coolDsCond[2]),    "coolDsCond[2]" },	// TI
    {   0,   24,    1, o(tp_coolDsCond[3]),    "coolDsCond[3]" },	// TI
    {   0,   24,    1, o(tp_coolDsCond[4]),    "coolDsCond[4]" },	// TI
    {   0,   24,    1, o(tp_coolDsCond[5]),    "coolDsCond[5]" },	// TI
    {   0,   24,    1, o(tp_coolDsCond[6]),    "coolDsCond[6]" },	// TI
    {   0,   24,    1, o(tp_coolDsCond[7]),    "coolDsCond[7]" },	// TI
    {   0,   24,    1, o(tp_coolDsCond[8]),    "coolDsCond[8]" },	// TI
    {   0,   24,    1, o(tp_coolDsCond[9]),    "coolDsCond[9]" },	// TI
    {   0,   24,    1,o(tp_coolDsCond[10]),   "coolDsCond[10]" },	// TI
    {   0,   24,    1,o(tp_coolDsCond[11]),   "coolDsCond[11]" },	// TI
    {   0,   24,    1,o(tp_coolDsCond[12]),   "coolDsCond[12]" },	// TI
    {   0,   11,   32,       o(tp_exePath),          "exePath" },	// CHP
    {   0,   11,   32,       o(tp_exeInfo),          "exeInfo" },	// CHP
    {   0,    1,   32,   o(tp_exeCodeSize),      "exeCodeSize" },	// INT
    {   0,   11,   32,   o(tp_progVersion),      "progVersion" },	// CHP
    {   0,   11,   32,   o(tp_HPWHVersion),      "HPWHVersion" },	// CHP
    {   0,   11,   32,   o(tp_cmdLineArgs),      "cmdLineArgs" },	// CHP
    {   0,    3,    1,        o(runSerial),        "runSerial" },	// SI
    {   0,   11,    1,         o(runTitle),         "runTitle" },	// CHP
    {   0,   11,   32,      o(runDateTime),      "runDateTime" },	// CHP
    {   0,   89,   32,           o(tp_brs),              "brs" },	// NOYESCH
    {   0,   89,   32,        o(tp_brHrly),           "brHrly" },	// NOYESCH
    {   0,   11,    1,    o(tp_brFileName),       "brFileName" },	// CHP
    {   0,    6,   32,         o(tp_brMem),            "brMem" },	// BOO
    {   0,    6,   32, o(tp_brDiscardable),    "brDiscardable" },	// BOO
    {   0,   11,    1,          o(repHdrL),          "repHdrL" },	// CHP
    {   0,   11,    1,          o(repHdrR),          "repHdrR" },	// CHP
    {   0,    3,    1,           o(repCpl),           "repCpl" },	// SI
    {   0,    3,    1,           o(repLpp),           "repLpp" },	// SI
    {   0,    3,    1,          o(repTopM),          "repTopM" },	// SI
    {   0,    3,    1,          o(repBotM),          "repBotM" },	// SI
    {   0,   11,    1,    o(tp_repTestPfx),       "repTestPfx" },	// CHP
    {   1,    6,   32,        o(tp_bAllCR),           "bAllCR" },	// BOO
    {   0,    1,   32,    o(tp_exshNShade),       "exshNShade" },	// INT
    {   0,    1,   32,      o(tp_exshNRec),         "exshNRec" },	// INT
    {   1,   12,   32,           o(relTol),           "relTol" },	// FLOAT
    {   1,   12,   32,          o(relTol1),          "relTol1" },	// FLOAT
    {   1,   12,   32,           o(absTol),           "absTol" },	// FLOAT
    {   1,   12,   32,        o(absHumTol),        "absHumTol" },	// FLOAT
    {   1,   12,   32,            o(hiTol),            "hiTol" },	// FLOAT
    {   1,   12,   32,            o(loTol),            "loTol" },	// FLOAT
    {   0,   12,   32,         o(latitude),         "latitude" },	// FLOAT
    {   0,   12,   32,        o(longitude),        "longitude" },	// FLOAT
    {   0,   12,   32,         o(timeZone),         "timeZone" },	// FLOAT
    {   0,   12,   32,       o(tp_presAtm),          "presAtm" },	// FLOAT
    {   0,   46,   32,          o(tp_refW),             "refW" },	// HUMRAT_GZ
    {   0,   19,   32,         o(tp_refWX),            "refWX" },	// DBL
    {   0,   62,   32,         o(tp_airSH),            "airSH" },	// SPECHEAT
    {   0,   12,   32,            o(airVK),            "airVK" },	// FLOAT
    {   0,   12,   32,          o(airRhoK),          "airRhoK" },	// FLOAT
    {   0,   12,   32,          o(airVshK),          "airVshK" },	// FLOAT
    {   0,   12,   32,            o(airXK),            "airXK" },	// FLOAT
    {   0,   12,   32,        o(tp_hConvF),           "hConvF" },	// FLOAT
    {   0,    1,   32,      o(tp_nDesDays),         "nDesDays" },	// INT
    {   0,   14,   32,        o(auszSmTol),        "auszSmTol" },	// FLOAT_GZ
    {   0,   14,   32,         o(auszTol2),         "auszTol2" },	// FLOAT_GZ
    {   0,   14,   32,       o(auszHiTol2),       "auszHiTol2" },	// FLOAT_GZ
    {   0,    1,   32,            o(vrSum),            "vrSum" },	// INT
    {   0,   24,  128,            o(dvriY),            "dvriY" },	// TI
    {   0,   24,  128,            o(dvriM),            "dvriM" },	// TI
    {   0,   24,  128,            o(dvriD),            "dvriD" },	// TI
    {   0,   24,  128,            o(dvriH),            "dvriH" },	// TI
    {   0,   24,  128,            o(dvriS),            "dvriS" },	// TI
    {   0,   24,  128,           o(dvriHS),           "dvriHS" },	// TI
    {   0,    3,  128,           o(hrxFlg),           "hrxFlg" },	// SI
    {   0,    3,  128,          o(shrxFlg),          "shrxFlg" },	// SI
    {   0,   19,  132,      o(tp_tmrInput),         "tmrInput" },	// DBL
    {   0,   19,  132,       o(tp_tmrAusz),          "tmrAusz" },	// DBL
    {   0,   19,  132,        o(tp_tmrRun),           "tmrRun" },	// DBL
    {   0,   19,  132,      o(tp_tmrTotal),         "tmrTotal" },	// DBL
    {   0,   19,  132,     o(tp_tmrAirNet),        "tmrAirNet" },	// DBL
    {   0,   19,  132,      o(tp_tmrAWTot),         "tmrAWTot" },	// DBL
    {   0,   19,  132,     o(tp_tmrAWCalc),        "tmrAWCalc" },	// DBL
    {   0,   19,  132,       o(tp_tmrCond),          "tmrCond" },	// DBL
    {   0,   19,  132,       o(tp_tmrKiva),          "tmrKiva" },	// DBL
    {   0,   19,  132,         o(tp_tmrBC),            "tmrBC" },	// DBL
    {   0,   19,  132,       o(tp_tmrZone),          "tmrZone" },	// DBL
    {   0,   12,   32,      o(tp_subhrDur),         "subhrDur" },	// FLOAT
    {   0,    5,   32,   o(tp_nSubhrTicks),      "nSubhrTicks" },	// SI_GZ
    {   0,   19,   32,    o(tp_tickDurMin),       "tickDurMin" },	// DBL
    {   0,   19,   32,     o(tp_tickDurHr),        "tickDurHr" },	// DBL
    {   0,   23,   64,           o(monStr),           "monStr" },	// ANAME
    {   0,   11,  128,          o(dateStr),          "dateStr" },	// CHP
    {   0,   22,  128,          o(tp_date),             "date" },	// IDATE
    {   0,    7,  128,             o(jDay),             "jDay" },	// DOY
    {   0,    7,  128,            o(xJDay),            "xJDay" },	// DOY
    {   0,    3,  512,              o(iHr),              "iHr" },	// SI
    {   0,    3, 1024,           o(iSubhr),           "iSubhr" },	// SI
    {   0,    8, 1024,             o(shoy),             "shoy" },	// SHOY
    {   0,    6,  512,             o(isDT),             "isDT" },	// BOO
    {   0,    3,  512,            o(iHrST),            "iHrST" },	// SI
    {   0,    7,  512,           o(jDayST),           "jDayST" },	// DOY
    {   0,    6,    2,    o(tp_autoSizing),       "autoSizing" },	// BOO
    {   0,    6,  128,         o(tp_pass1),            "pass1" },	// BOO
    {   0,    6,  128,        o(tp_pass1A),           "pass1A" },	// BOO
    {   0,    6,  128,        o(tp_pass1B),           "pass1B" },	// BOO
    {   0,    6,  128,         o(tp_pass2),            "pass2" },	// BOO
    {   0,    6,  128,        o(tp_sizing),           "sizing" },	// BOO
    {   0,    1,  128,        o(tp_dsDayI),           "dsDayI" },	// INT
    {   0,    3,  128,         o(tp_dsDay),            "dsDay" },	// SI
    {   0,    3,  128,          o(auszMon),          "auszMon" },	// SI
    {   0,  130, 1024,              o(ivl),              "ivl" },	// IVLCH
    {   0,  130, 1024,          o(isBegOf),          "isBegOf" },	// IVLCH
    {   0,  130, 1024,          o(isEndOf),          "isEndOf" },	// IVLCH
    {   0,    6, 1024,         o(isBegRun),         "isBegRun" },	// BOO
    {   0,    6, 1024,  o(tp_isBegMainSim),     "isBegMainSim" },	// BOO
    {   0,    6,   64,       o(isFirstMon),       "isFirstMon" },	// BOO
    {   0,    6,  128,        o(isLastDay),        "isLastDay" },	// BOO
    {   0,    6,  128,  o(isLastWarmupDay),  "isLastWarmupDay" },	// BOO
    {   0,    6, 1024,        o(isBegHour),        "isBegHour" },	// BOO
    {   0,    6, 1024,        o(isEndHour),        "isEndHour" },	// BOO
    {   0,    6,  512,         o(isBegDay),         "isBegDay" },	// BOO
    {   0,    6,  512,         o(isEndDay),         "isEndDay" },	// BOO
    {   0,    6,  128,       o(isBegMonth),       "isBegMonth" },	// BOO
    {   0,    6,  128,       o(isEndMonth),       "isEndMonth" },	// BOO
    {   0,    6,  128,   o(isSolarCalcDay),   "isSolarCalcDay" },	// BOO
    {   0,    6,  128,         o(isWarmup),         "isWarmup" },	// BOO
    {   0,    3,  128,             o(dowh),             "dowh" },	// SI
    {   0,    6,  128,        o(isHoliday),        "isHoliday" },	// BOO
    {   0,    6,  128,       o(isHoliTrue),       "isHoliTrue" },	// BOO
    {   0,    6,  128,          o(isWeHol),          "isWeHol" },	// BOO
    {   0,    6,  128,        o(isWeekend),        "isWeekend" },	// BOO
    {   0,    6,  128,        o(isBegWeek),        "isBegWeek" },	// BOO
    {   0,    6,  128,        o(isWeekday),        "isWeekday" },	// BOO
    {   0,    6,  128,        o(isWorkDay),        "isWorkDay" },	// BOO
    {   0,    6,  128,     o(isNonWorkDay),     "isNonWorkDay" },	// BOO
    {   0,    6,  128,    o(isBegWorkWeek),    "isBegWorkWeek" },	// BOO
    {   0,    6,  128,          o(notDone),          "notDone" },	// BOO
    {   0,    1,  128,         o(dsDayNIt),         "dsDayNIt" },	// INT
    {   0,   48,  512,      o(radBeamHrAv),      "radBeamHrAv" },	// POWER
    {   0,   48,  512,      o(radDiffHrAv),      "radDiffHrAv" },	// POWER
    {   0,   48, 1024,      o(radBeamShAv),      "radBeamShAv" },	// POWER
    {   0,   48, 1024,      o(radDiffShAv),      "radDiffShAv" },	// POWER
    {   0,   42,  512,           o(tDbOHr),           "tDbOHr" },	// TEMP
    {   0,   42,  512,         o(tDbOPvHr),         "tDbOPvHr" },	// TEMP
    {   0,   42,  512,         o(tDbOHrAv),         "tDbOHrAv" },	// TEMP
    {   0,   42, 1024,           o(tDbOSh),           "tDbOSh" },	// TEMP
    {   0,   42, 1024,         o(tDbOPvSh),         "tDbOPvSh" },	// TEMP
    {   0,   42, 1024,         o(tDbOShAv),         "tDbOShAv" },	// TEMP
    {   0,   42,  512,           o(tWbOHr),           "tWbOHr" },	// TEMP
    {   0,   42,  512,         o(tWbOPvHr),         "tWbOPvHr" },	// TEMP
    {   0,   42,  512,         o(tWbOHrAv),         "tWbOHrAv" },	// TEMP
    {   0,   42, 1024,           o(tWbOSh),           "tWbOSh" },	// TEMP
    {   0,   42,  512,           o(tDpOHr),           "tDpOHr" },	// TEMP
    {   0,   42,  512,         o(tDpOPvHr),         "tDpOPvHr" },	// TEMP
    {   0,   42,  512,         o(tDpOHrAv),         "tDpOHrAv" },	// TEMP
    {   0,   42, 1024,           o(tDpOSh),           "tDpOSh" },	// TEMP
    {   0,   42,  512,           o(tSkyHr),           "tSkyHr" },	// TEMP
    {   0,   42,  512,         o(tSkyPvHr),         "tSkyPvHr" },	// TEMP
    {   0,   42, 1024,           o(tSkySh),           "tSkySh" },	// TEMP
    {   0,   12,  512,      o(windSpeedHr),      "windSpeedHr" },	// FLOAT
    {   0,   12,  512,    o(windSpeedPvHr),    "windSpeedPvHr" },	// FLOAT
    {   0,   12,  512,    o(windSpeedHrAv),    "windSpeedHrAv" },	// FLOAT
    {   0,   12, 1024,      o(windSpeedSh),      "windSpeedSh" },	// FLOAT
    {   0,   12, 1024,o(windSpeedSquaredSh),"windSpeedSquaredSh" },	// FLOAT
    {   0,   12, 1024,  o(windSpeedSqrtSh),  "windSpeedSqrtSh" },	// FLOAT
    {   0,   12, 1024,   o(windSpeedPt8Sh),   "windSpeedPt8Sh" },	// FLOAT
    {   0,   12,  512,     o(windDirDegHr),     "windDirDegHr" },	// FLOAT
    {   0,   46,  512,             o(wOHr),             "wOHr" },	// HUMRAT_GZ
    {   0,   46,  512,           o(wOPvHr),           "wOPvHr" },	// HUMRAT_GZ
    {   0,   46,  512,           o(wOHrAv),           "wOHrAv" },	// HUMRAT_GZ
    {   0,   46, 1024,             o(wOSh),             "wOSh" },	// HUMRAT_GZ
    {   0,   12, 1024,             o(hOSh),             "hOSh" },	// FLOAT
    {   0,   12, 1024,       o(tp_airxOSh),          "airxOSh" },	// FLOAT
    {   0,   12, 1024,   o(tp_rhoMoistOSh),      "rhoMoistOSh" },	// FLOAT
    {   0,   12, 1024,     o(tp_rhoDryOSh),        "rhoDryOSh" },	// FLOAT
    {   1,    6, 1024,            o(ztuKf),            "ztuKf" },	// BOO
    {   1,    6, 1024,             o(ahKf),             "ahKf" },	// BOO
    {   1,    6, 1024,            o(ahKf2),            "ahKf2" },	// BOO
    {   1,    6, 1024,             o(hpKf),             "hpKf" },	// BOO
    {   1,    6, 1024,             o(cpKf),             "cpKf" },	// BOO
    {   1,    6, 1024,             o(tpKf),             "tpKf" },	// BOO
    {   0,    3, 1024,             o(iter),             "iter" },	// SI
    {   0,   12,  512,           o(qcPeak),           "qcPeak" },	// FLOAT
    {   0,    3,  512,          o(qcPeakH),          "qcPeakH" },	// SI
    {   0,    3,  512,          o(qcPeakD),          "qcPeakD" },	// SI
    {   0,    3,  512,          o(qcPeakM),          "qcPeakM" },	// SI
    {   0,   12,  512,           o(qhPeak),           "qhPeak" },	// FLOAT
    {   0,    3,  512,          o(qhPeakH),          "qhPeakH" },	// SI
    {   0,    3,  512,          o(qhPeakD),          "qhPeakD" },	// SI
    {   0,    3,  512,          o(qhPeakM),          "qhPeakM" },	// SI
    {   0,    3,   32,           o(ck5aa5),           "ck5aa5" },	// SI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirTOPRAT

struct SFIR sfirPYLINEAR[] =	// fields info for RTPYLINEAR
{
 #define o(m) offsetof(PYLINEAR,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,    2,             o(k[0]),             "k[0]" },	// FLOAT
    {   0,   12,    2,             o(k[1]),             "k[1]" },	// FLOAT
    {   0,   12,    2,             o(k[2]),             "k[2]" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPYLINEAR

struct SFIR sfirPYCUBIC[] =	// fields info for RTPYCUBIC
{
 #define o(m) offsetof(PYCUBIC,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,    2,             o(k[0]),             "k[0]" },	// FLOAT
    {   0,   12,    2,             o(k[1]),             "k[1]" },	// FLOAT
    {   0,   12,    2,             o(k[2]),             "k[2]" },	// FLOAT
    {   0,   12,    2,             o(k[3]),             "k[3]" },	// FLOAT
    {   0,   12,    2,             o(k[4]),             "k[4]" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPYCUBIC

struct SFIR sfirPYCUBIC2[] =	// fields info for RTPYCUBIC2
{
 #define o(m) offsetof(PYCUBIC2,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,    2,             o(k[0]),             "k[0]" },	// FLOAT
    {   0,   12,    2,             o(k[1]),             "k[1]" },	// FLOAT
    {   0,   12,    2,             o(k[2]),             "k[2]" },	// FLOAT
    {   0,   12,    2,             o(k[3]),             "k[3]" },	// FLOAT
    {   0,   12,    2,             o(k[4]),             "k[4]" },	// FLOAT
    {   0,   12,    2,             o(k[5]),             "k[5]" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPYCUBIC2

struct SFIR sfirPYBIQUAD[] =	// fields info for RTPYBIQUAD
{
 #define o(m) offsetof(PYBIQUAD,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,    2,             o(k[0]),             "k[0]" },	// FLOAT
    {   0,   12,    2,             o(k[1]),             "k[1]" },	// FLOAT
    {   0,   12,    2,             o(k[2]),             "k[2]" },	// FLOAT
    {   0,   12,    2,             o(k[3]),             "k[3]" },	// FLOAT
    {   0,   12,    2,             o(k[4]),             "k[4]" },	// FLOAT
    {   0,   12,    2,             o(k[5]),             "k[5]" },	// FLOAT
    {   0,   12,    2,             o(k[6]),             "k[6]" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPYBIQUAD

struct SFIR sfirPY4[] =	// fields info for RTPY4
{
 #define o(m) offsetof(PY4,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,    2,             o(k[0]),             "k[0]" },	// FLOAT
    {   0,   12,    2,             o(k[1]),             "k[1]" },	// FLOAT
    {   0,   12,    2,             o(k[2]),             "k[2]" },	// FLOAT
    {   0,   12,    2,             o(k[3]),             "k[3]" },	// FLOAT
    {   0,   12,    2,             o(k[4]),             "k[4]" },	// FLOAT
    {   0,   12,    2,             o(k[5]),             "k[5]" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPY4

struct SFIR sfirINVERSE[] =	// fields info for RTINVERSE
{
 #define o(m) offsetof(INVERSE,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  130,   32,          o(iv_freq),             "freq" },	// IVLCH
    {   0,   12,   32,            o(iv_X0),               "X0" },	// FLOAT
    {   0,   12,   32,            o(iv_Y0),               "Y0" },	// FLOAT
    {   0,   12,   32,         o(iv_YTarg),            "YTarg" },	// FLOAT
    {   0,   12, 1032,             o(iv_X),                "X" },	// FLOAT
    {   0,   12, 1032,             o(iv_Y),                "Y" },	// FLOAT
    {   0,   12,    1,          o(iv_XEst),             "XEst" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirINVERSE

struct SFIR sfirWFILE[] =	// fields info for RTWFILE
{
 #define o(m) offsetof(WFILE,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   79,   32,      o(wFileFormat),      "wFileFormat" },	// WFILEFORMAT
    {   0,   77,   32,              o(loc),              "loc" },	// WFLOC
    {   0,   78,   32,              o(lid),              "lid" },	// WFLID
    {   0,    3,   32,               o(yr),               "yr" },	// SI
    {   0,    3,   32,              o(jd1),              "jd1" },	// SI
    {   0,    3,   32,              o(jdl),              "jdl" },	// SI
    {   0,   12,   32,              o(lat),              "lat" },	// FLOAT
    {   0,   12,   32,              o(lon),              "lon" },	// FLOAT
    {   0,   12,   32,               o(tz),               "tz" },	// FLOAT
    {   0,   12,   32,             o(elev),             "elev" },	// FLOAT
    {   0,   12,   32,        o(taDbAvgYr),        "taDbAvgYr" },	// FLOAT
    {   0,   12,    2,      o(tMainsAvgYr),      "tMainsAvgYr" },	// FLOAT
    {   0,   12,    2,      o(tMainsMinYr),      "tMainsMinYr" },	// FLOAT
    {   0,    3,   32,        o(solartime),        "solartime" },	// SI
    {   0,   80,   32,             o(loc2),             "loc2" },	// WFLOC2
    {   0,    3,   32,           o(isLeap),           "isLeap" },	// SI
    {   0,    3,   32,         o(firstDdm),         "firstDdm" },	// SI
    {   0,    3,   32,          o(lastDdm),          "lastDdm" },	// SI
    {   0,    3,   32,           o(winMOE),           "winMOE" },	// SI
    {   0,    3,   32,         o(win99TDb),         "win99TDb" },	// SI
    {   0,    3,   32,         o(win97TDb),         "win97TDb" },	// SI
    {   0,    3,   32,          o(sum1TDb),          "sum1TDb" },	// SI
    {   0,    3,   32,          o(sum1TWb),          "sum1TWb" },	// SI
    {   0,    3,   32,          o(sum2TDb),          "sum2TDb" },	// SI
    {   0,    3,   32,          o(sum2TWb),          "sum2TWb" },	// SI
    {   0,    3,   32,          o(sum5TDb),          "sum5TDb" },	// SI
    {   0,    3,   32,          o(sum5TWb),          "sum5TWb" },	// SI
    {   0,    3,   32,            o(range),            "range" },	// SI
    {   0,    3,   32,         o(sumMonHi),         "sumMonHi" },	// SI
    {   0,   77,    2,o(wf_TDVFileTimeStamp), "TDVFileTimeStamp" },	// WFLOC
    {   0,   23,    2,  o(wf_TDVFileTitle),     "TDVFileTitle" },	// ANAME
    {   1,    3,   32,         o(hdrBytes),         "hdrBytes" },	// SI
    {   1,    3,   32,        o(hourBytes),        "hourBytes" },	// SI
    {   1,    1,   32,          o(csvCols),          "csvCols" },	// INT
    {   1,   81,   32,              o(yac),              "yac" },	// YACAMP
    {   1,   81,   32,           o(yacTDV),           "yacTDV" },	// YACAMP
    {   0,    1,   32,    o(wf_TDVFileJHr),       "TDVFileJHr" },	// INT
    {   1,   82,   32,          o(wf_pWDY),             "pWDY" },	// WDYEARP
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirWFILE

struct SFIR sfirWDHR[] =	// fields info for RTWDHR
{
 #define o(m) offsetof(WDHR,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,  512,        o(wd_sunupf),           "sunupf" },	// FLOAT
    {   0,   12,  512,         o(wd_slAzm),            "slAzm" },	// FLOAT
    {   0,   12,  512,         o(wd_slAlt),            "slAlt" },	// FLOAT
    {   0,   12,  512,            o(wd_db),               "db" },	// FLOAT
    {   0,   12,  512,            o(wd_wb),               "wb" },	// FLOAT
    {   0,   12,  512,           o(wd_DNI),              "DNI" },	// FLOAT
    {   0,   12,  512,           o(wd_DHI),              "DHI" },	// FLOAT
    {   0,   12,  512,         o(wd_bmrad),            "bmrad" },	// FLOAT
    {   0,   12,  512,         o(wd_dfrad),            "dfrad" },	// FLOAT
    {   0,   12,  512,        o(wd_wndDir),           "wndDir" },	// FLOAT
    {   0,   12,  512,        o(wd_wndSpd),           "wndSpd" },	// FLOAT
    {   0,   12,  512,         o(wd_glrad),            "glrad" },	// FLOAT
    {   0,   12,  512,        o(wd_cldCvr),           "cldCvr" },	// FLOAT
    {   0,   12,  512,          o(wd_tSky),             "tSky" },	// FLOAT
    {   0,   12,  512,         o(wd_tGrnd),            "tGrnd" },	// FLOAT
    {   0,   12,  512,          o(wd_taDp),             "taDp" },	// FLOAT
    {   0,   12,  512,        o(wd_tMains),           "tMains" },	// FLOAT
    {   0,   12,  512,       o(wd_tdvElec),          "tdvElec" },	// FLOAT
    {   0,   12,  512,       o(wd_tdvFuel),          "tdvFuel" },	// FLOAT
    {   0,   12,  512,        o(wd_taDbPk),           "taDbPk" },	// FLOAT
    {   0,   12,  512,       o(wd_taDbAvg),          "taDbAvg" },	// FLOAT
    {   0,   12,  512,      o(wd_taDbPvPk),         "taDbPvPk" },	// FLOAT
    {   0,   12,  512,     o(wd_taDbAvg01),        "taDbAvg01" },	// FLOAT
    {   0,   12,  512,     o(wd_taDbAvg07),        "taDbAvg07" },	// FLOAT
    {   0,   12,  512,     o(wd_taDbAvg14),        "taDbAvg14" },	// FLOAT
    {   0,   12,  512,     o(wd_taDbAvg31),        "taDbAvg31" },	// FLOAT
    {   0,   12,  512,     o(wd_tdvElecPk),        "tdvElecPk" },	// FLOAT
    {   0,    3,  512, o(wd_tdvElecPkRank),    "tdvElecPkRank" },	// SI
    {   0,   12,  512,    o(wd_tdvElecAvg),       "tdvElecAvg" },	// FLOAT
    {   0,   12,  512,   o(wd_tdvElecPvPk),      "tdvElecPvPk" },	// FLOAT
    {   0,   12,  512,  o(wd_tdvElecAvg01),     "tdvElecAvg01" },	// FLOAT
    {   0,    3,  512,o(wd_tdvElecHrRank[0]), "tdvElecHrRank[0]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[1]), "tdvElecHrRank[1]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[2]), "tdvElecHrRank[2]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[3]), "tdvElecHrRank[3]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[4]), "tdvElecHrRank[4]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[5]), "tdvElecHrRank[5]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[6]), "tdvElecHrRank[6]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[7]), "tdvElecHrRank[7]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[8]), "tdvElecHrRank[8]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[9]), "tdvElecHrRank[9]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[10]),"tdvElecHrRank[10]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[11]),"tdvElecHrRank[11]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[12]),"tdvElecHrRank[12]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[13]),"tdvElecHrRank[13]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[14]),"tdvElecHrRank[14]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[15]),"tdvElecHrRank[15]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[16]),"tdvElecHrRank[16]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[17]),"tdvElecHrRank[17]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[18]),"tdvElecHrRank[18]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[19]),"tdvElecHrRank[19]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[20]),"tdvElecHrRank[20]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[21]),"tdvElecHrRank[21]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[22]),"tdvElecHrRank[22]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[23]),"tdvElecHrRank[23]" },	// SI
    {   0,    3,  512,o(wd_tdvElecHrRank[24]),"tdvElecHrRank[24]" },	// SI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirWDHR

struct SFIR sfirWFDATA[] =	// fields info for RTWFDATA
{
 #define o(m) offsetof(WFDATA,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   12,  512,      o(d.wd_sunupf),           "sunupf" },	// FLOAT
    {   0,   12,  512,       o(d.wd_slAzm),            "slAzm" },	// FLOAT
    {   0,   12,  512,       o(d.wd_slAlt),            "slAlt" },	// FLOAT
    {   0,   12,  512,          o(d.wd_db),               "db" },	// FLOAT
    {   0,   12,  512,          o(d.wd_wb),               "wb" },	// FLOAT
    {   0,   12,  512,         o(d.wd_DNI),              "DNI" },	// FLOAT
    {   0,   12,  512,         o(d.wd_DHI),              "DHI" },	// FLOAT
    {   0,   12,  512,       o(d.wd_bmrad),            "bmrad" },	// FLOAT
    {   0,   12,  512,       o(d.wd_dfrad),            "dfrad" },	// FLOAT
    {   0,   12,  512,      o(d.wd_wndDir),           "wndDir" },	// FLOAT
    {   0,   12,  512,      o(d.wd_wndSpd),           "wndSpd" },	// FLOAT
    {   0,   12,  512,       o(d.wd_glrad),            "glrad" },	// FLOAT
    {   0,   12,  512,      o(d.wd_cldCvr),           "cldCvr" },	// FLOAT
    {   0,   12,  512,        o(d.wd_tSky),             "tSky" },	// FLOAT
    {   0,   12,  512,       o(d.wd_tGrnd),            "tGrnd" },	// FLOAT
    {   0,   12,  512,        o(d.wd_taDp),             "taDp" },	// FLOAT
    {   0,   12,  512,      o(d.wd_tMains),           "tMains" },	// FLOAT
    {   0,   12,  512,     o(d.wd_tdvElec),          "tdvElec" },	// FLOAT
    {   0,   12,  512,     o(d.wd_tdvFuel),          "tdvFuel" },	// FLOAT
    {   0,   12,  512,      o(d.wd_taDbPk),           "taDbPk" },	// FLOAT
    {   0,   12,  512,     o(d.wd_taDbAvg),          "taDbAvg" },	// FLOAT
    {   0,   12,  512,    o(d.wd_taDbPvPk),         "taDbPvPk" },	// FLOAT
    {   0,   12,  512,   o(d.wd_taDbAvg01),        "taDbAvg01" },	// FLOAT
    {   0,   12,  512,   o(d.wd_taDbAvg07),        "taDbAvg07" },	// FLOAT
    {   0,   12,  512,   o(d.wd_taDbAvg14),        "taDbAvg14" },	// FLOAT
    {   0,   12,  512,   o(d.wd_taDbAvg31),        "taDbAvg31" },	// FLOAT
    {   0,   12,  512,   o(d.wd_tdvElecPk),        "tdvElecPk" },	// FLOAT
    {   0,    3,  512,o(d.wd_tdvElecPkRank),    "tdvElecPkRank" },	// SI
    {   0,   12,  512,  o(d.wd_tdvElecAvg),       "tdvElecAvg" },	// FLOAT
    {   0,   12,  512, o(d.wd_tdvElecPvPk),      "tdvElecPvPk" },	// FLOAT
    {   0,   12,  512,o(d.wd_tdvElecAvg01),     "tdvElecAvg01" },	// FLOAT
    {   0,    3,  512,o(d.wd_tdvElecHrRank[0]), "tdvElecHrRank[0]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[1]), "tdvElecHrRank[1]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[2]), "tdvElecHrRank[2]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[3]), "tdvElecHrRank[3]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[4]), "tdvElecHrRank[4]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[5]), "tdvElecHrRank[5]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[6]), "tdvElecHrRank[6]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[7]), "tdvElecHrRank[7]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[8]), "tdvElecHrRank[8]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[9]), "tdvElecHrRank[9]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[10]),"tdvElecHrRank[10]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[11]),"tdvElecHrRank[11]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[12]),"tdvElecHrRank[12]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[13]),"tdvElecHrRank[13]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[14]),"tdvElecHrRank[14]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[15]),"tdvElecHrRank[15]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[16]),"tdvElecHrRank[16]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[17]),"tdvElecHrRank[17]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[18]),"tdvElecHrRank[18]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[19]),"tdvElecHrRank[19]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[20]),"tdvElecHrRank[20]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[21]),"tdvElecHrRank[21]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[22]),"tdvElecHrRank[22]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[23]),"tdvElecHrRank[23]" },	// SI
    {   0,    3,  512,o(d.wd_tdvElecHrRank[24]),"tdvElecHrRank[24]" },	// SI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirWFDATA

struct SFIR sfirDESCOND[] =	// fields info for RTDESCOND
{
 #define o(m) offsetof(DESCOND,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    7,    1,           o(dc_doy),              "doy" },	// DOY
    {   0,   12,    1,            o(dc_DB),               "DB" },	// FLOAT
    {   0,   12,    1,         o(dc_MCDBR),            "MCDBR" },	// FLOAT
    {   0,   12,    1,          o(dc_MCWB),             "MCWB" },	// FLOAT
    {   0,   12,    1,         o(dc_MCWBR),            "MCWBR" },	// FLOAT
    {   0,   13,    1,        o(dc_wndSpd),           "wndSpd" },	// FLOAT_GEZ
    {   0,   13,    1,          o(dc_tauB),             "tauB" },	// FLOAT_GEZ
    {   0,   13,    1,          o(dc_tauD),             "tauD" },	// FLOAT_GEZ
    {   0,   13,    1,    o(dc_ebnSlrNoon),       "ebnSlrNoon" },	// FLOAT_GEZ
    {   0,   13,    1,    o(dc_edhSlrNoon),       "edhSlrNoon" },	// FLOAT_GEZ
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDESCOND

struct SFIR sfirSURFGEOM[] =	// fields info for RTSURFGEOM
{
 #define o(m) offsetof(SURFGEOM,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,  125,    1,      o(gx_mounting),         "mounting" },	// MOUNTCH
    {   0,    1,    1,         o(gx_pnIdx),            "pnIdx" },	// INT
    {   0,   19,    1,          o(gx_area),             "area" },	// DBL
    {   0,   12,  516,         o(gx_fBeam),            "fBeam" },	// FLOAT
    {   0,    1,  516, o(gx_fBeamErrCount),    "fBeamErrCount" },	// INT
    {   0,   12,    1,     o(gx_vrtInp[0]),        "vrtInp[0]" },	// FLOAT
    {   0,   12,    1,     o(gx_vrtInp[1]),        "vrtInp[1]" },	// FLOAT
    {   0,   12,    1,     o(gx_vrtInp[2]),        "vrtInp[2]" },	// FLOAT
    {   0,   12,    1,     o(gx_vrtInp[3]),        "vrtInp[3]" },	// FLOAT
    {   0,   12,    1,     o(gx_vrtInp[4]),        "vrtInp[4]" },	// FLOAT
    {   0,   12,    1,     o(gx_vrtInp[5]),        "vrtInp[5]" },	// FLOAT
    {   0,   12,    1,     o(gx_vrtInp[6]),        "vrtInp[6]" },	// FLOAT
    {   0,   12,    1,     o(gx_vrtInp[7]),        "vrtInp[7]" },	// FLOAT
    {   0,   12,    1,     o(gx_vrtInp[8]),        "vrtInp[8]" },	// FLOAT
    {   0,   12,    1,     o(gx_vrtInp[9]),        "vrtInp[9]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[10]),       "vrtInp[10]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[11]),       "vrtInp[11]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[12]),       "vrtInp[12]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[13]),       "vrtInp[13]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[14]),       "vrtInp[14]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[15]),       "vrtInp[15]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[16]),       "vrtInp[16]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[17]),       "vrtInp[17]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[18]),       "vrtInp[18]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[19]),       "vrtInp[19]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[20]),       "vrtInp[20]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[21]),       "vrtInp[21]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[22]),       "vrtInp[22]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[23]),       "vrtInp[23]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[24]),       "vrtInp[24]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[25]),       "vrtInp[25]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[26]),       "vrtInp[26]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[27]),       "vrtInp[27]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[28]),       "vrtInp[28]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[29]),       "vrtInp[29]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[30]),       "vrtInp[30]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[31]),       "vrtInp[31]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[32]),       "vrtInp[32]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[33]),       "vrtInp[33]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[34]),       "vrtInp[34]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[35]),       "vrtInp[35]" },	// FLOAT
    {   0,   12,    1,    o(gx_vrtInp[36]),       "vrtInp[36]" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSURFGEOM

struct SFIR sfirSHADEX[] =	// fields info for RTSHADEX
{
 #define o(m) offsetof(SHADEX,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  125,    1, o(sx_g.gx_mounting),         "mounting" },	// MOUNTCH
    {   0,    1,    1,    o(sx_g.gx_pnIdx),            "pnIdx" },	// INT
    {   0,   19,    1,     o(sx_g.gx_area),             "area" },	// DBL
    {   0,   12,  517,    o(sx_g.gx_fBeam),            "fBeam" },	// FLOAT
    {   0,    1,  517,o(sx_g.gx_fBeamErrCount),    "fBeamErrCount" },	// INT
    {   0,   12,    1,o(sx_g.gx_vrtInp[0]),        "vrtInp[0]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[1]),        "vrtInp[1]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[2]),        "vrtInp[2]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[3]),        "vrtInp[3]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[4]),        "vrtInp[4]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[5]),        "vrtInp[5]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[6]),        "vrtInp[6]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[7]),        "vrtInp[7]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[8]),        "vrtInp[8]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[9]),        "vrtInp[9]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[10]),       "vrtInp[10]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[11]),       "vrtInp[11]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[12]),       "vrtInp[12]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[13]),       "vrtInp[13]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[14]),       "vrtInp[14]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[15]),       "vrtInp[15]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[16]),       "vrtInp[16]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[17]),       "vrtInp[17]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[18]),       "vrtInp[18]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[19]),       "vrtInp[19]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[20]),       "vrtInp[20]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[21]),       "vrtInp[21]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[22]),       "vrtInp[22]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[23]),       "vrtInp[23]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[24]),       "vrtInp[24]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[25]),       "vrtInp[25]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[26]),       "vrtInp[26]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[27]),       "vrtInp[27]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[28]),       "vrtInp[28]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[29]),       "vrtInp[29]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[30]),       "vrtInp[30]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[31]),       "vrtInp[31]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[32]),       "vrtInp[32]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[33]),       "vrtInp[33]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[34]),       "vrtInp[34]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[35]),       "vrtInp[35]" },	// FLOAT
    {   0,   12,    1,o(sx_g.gx_vrtInp[36]),       "vrtInp[36]" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSHADEX

struct SFIR sfirSGDIST[] =	// fields info for RTSGDIST
{
 #define o(m) offsetof(SGDIST,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    3,   32,        o(sd_targTy),           "targTy" },	// SI
    {   0,   24,    1,        o(sd_targTi),           "targTi" },	// TI
    {   0,   17,  256,           o(sd_FSO),              "FSO" },	// FRAC
    {   0,   17,  256,           o(sd_FSC),              "FSC" },	// FRAC
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSGDIST

struct SFIR sfirHCI[] =	// fields info for RTHCI
{
 #define o(m) offsetof(HCI,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,   32,    o(hc_history[0]),       "history[0]" },	// FLOAT
    {   0,   12,   32,    o(hc_history[1]),       "history[1]" },	// FLOAT
    {   0,   12,   32,    o(hc_history[2]),       "history[2]" },	// FLOAT
    {   0,   12,   32,    o(hc_history[3]),       "history[3]" },	// FLOAT
    {   0,    1,   32,        o(hc_iXHist),           "iXHist" },	// INT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirHCI

struct SFIR sfirSGTARG[] =	// fields info for RTSGTARG
{
 #define o(m) offsetof(SGTARG,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   19, 1028,            o(st_bm),               "bm" },	// DBL
    {   0,   19, 1028,            o(st_df),               "df" },	// DBL
    {   0,   19, 1028,           o(st_tot),              "tot" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSGTARG

struct SFIR sfirSBCBASE[] =	// fields info for RTSBCBASE
{
 #define o(m) offsetof(SBCBASE,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   17,  256,        o(sb_absSlr),           "absSlr" },	// FRAC
    {   0,   19,  256,      o(sb_awAbsSlr),         "awAbsSlr" },	// DBL
    {   0,   17,   32,         o(sb_epsLW),            "epsLW" },	// FRAC
    {   0,   24,   32,            o(sb_zi),               "zi" },	// TI
    {   0,   19,   32,             o(sb_F),                "F" },	// DBL
    {   0,   19,   32,            o(sb_Fp),               "Fp" },	// DBL
    {   0,   19,   32,         o(sb_frRad),            "frRad" },	// DBL
    {   0,   19,   32,          o(sb_fSky),             "fSky" },	// DBL
    {   0,   19,   32,          o(sb_fAir),             "fAir" },	// DBL
    {   0,   12, 1028,         o(sb_hcNat),            "hcNat" },	// FLOAT
    {   0,   12, 1028,         o(sb_hcFrc),            "hcFrc" },	// FLOAT
    {   0,   12, 1028,        o(sb_hcMult),           "hcMult" },	// FLOAT
    {   0,   12, 1028,           o(sb_hxa),              "hxa" },	// FLOAT
    {   0,   12, 1028,           o(sb_hxr),              "hxr" },	// FLOAT
    {   0,   12, 1028,         o(sb_hxtot),            "hxtot" },	// FLOAT
    {   0,   19, 1028,          o(sb_uRat),             "uRat" },	// DBL
    {   0,   19, 1028,          o(sb_fRat),             "fRat" },	// DBL
    {   0,   19, 1028,            o(sb_cx),               "cx" },	// DBL
    {   0,   19, 1028,  o(sb_sgTarg.st_bm),        "sgTarg.bm" },	// DBL
    {   0,   19, 1028,  o(sb_sgTarg.st_df),        "sgTarg.df" },	// DBL
    {   0,   19, 1028, o(sb_sgTarg.st_tot),       "sgTarg.tot" },	// DBL
    {   0,   19, 1028,            o(sb_sg),               "sg" },	// DBL
    {   0,   12, 1028,          o(sb_tSrf),             "tSrf" },	// FLOAT
    {   0,   12, 1024,        o(sb_tSrfls),           "tSrfls" },	// FLOAT
    {   0,   19, 1028,         o(sb_qrAbs),            "qrAbs" },	// DBL
    {   0,   12, 1028,           o(sb_txa),              "txa" },	// FLOAT
    {   0,   12, 1028,           o(sb_txr),              "txr" },	// FLOAT
    {   0,   12, 1028,           o(sb_txe),              "txe" },	// FLOAT
    {   0,   19, 1028,             o(sb_w),                "w" },	// DBL
    {   0,   19, 1028,          o(sb_qSrf),             "qSrf" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSBCBASE

struct SFIR sfirSBC[] =	// fields info for RTSBC
{
 #define o(m) offsetof(SBC,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,   17,  256,        o(sb_absSlr),           "absSlr" },	// FRAC
    {   2,   19,  256,      o(sb_awAbsSlr),         "awAbsSlr" },	// DBL
    {   2,   17,   32,         o(sb_epsLW),            "epsLW" },	// FRAC
    {   2,   24,   32,            o(sb_zi),               "zi" },	// TI
    {   2,   19,   32,             o(sb_F),                "F" },	// DBL
    {   2,   19,   32,            o(sb_Fp),               "Fp" },	// DBL
    {   2,   19,   32,         o(sb_frRad),            "frRad" },	// DBL
    {   2,   19,   32,          o(sb_fSky),             "fSky" },	// DBL
    {   2,   19,   32,          o(sb_fAir),             "fAir" },	// DBL
    {   2,   12, 1028,         o(sb_hcNat),            "hcNat" },	// FLOAT
    {   2,   12, 1028,         o(sb_hcFrc),            "hcFrc" },	// FLOAT
    {   2,   12, 1028,        o(sb_hcMult),           "hcMult" },	// FLOAT
    {   2,   12, 1028,           o(sb_hxa),              "hxa" },	// FLOAT
    {   2,   12, 1028,           o(sb_hxr),              "hxr" },	// FLOAT
    {   2,   12, 1028,         o(sb_hxtot),            "hxtot" },	// FLOAT
    {   2,   19, 1028,          o(sb_uRat),             "uRat" },	// DBL
    {   2,   19, 1028,          o(sb_fRat),             "fRat" },	// DBL
    {   2,   19, 1028,            o(sb_cx),               "cx" },	// DBL
    {   2,   19, 1028,  o(sb_sgTarg.st_bm),        "sgTarg.bm" },	// DBL
    {   2,   19, 1028,  o(sb_sgTarg.st_df),        "sgTarg.df" },	// DBL
    {   2,   19, 1028, o(sb_sgTarg.st_tot),       "sgTarg.tot" },	// DBL
    {   2,   19, 1028,            o(sb_sg),               "sg" },	// DBL
    {   2,   12, 1028,          o(sb_tSrf),             "tSrf" },	// FLOAT
    {   2,   12, 1024,        o(sb_tSrfls),           "tSrfls" },	// FLOAT
    {   2,   19, 1028,         o(sb_qrAbs),            "qrAbs" },	// DBL
    {   2,   12, 1028,           o(sb_txa),              "txa" },	// FLOAT
    {   2,   12, 1028,           o(sb_txr),              "txr" },	// FLOAT
    {   2,   12, 1028,           o(sb_txe),              "txe" },	// FLOAT
    {   2,   19, 1028,             o(sb_w),                "w" },	// DBL
    {   2,   19, 1028,          o(sb_qSrf),             "qSrf" },	// DBL
    {   0,   86,   32,           o(sb_pXS),              "pXS" },	// XSURFP
    {   0,    1,   32,            o(sb_si),               "si" },	// INT
    {   0,   19,   32,        o(sb_fcWind),           "fcWind" },	// DBL
    {   0,   19,   32,       o(sb_fcWind2),          "fcWind2" },	// DBL
    {   0,   19, 1028,           o(sb_eta),              "eta" },	// DBL
    {   0,   19,   32,        o(sb_widNom),           "widNom" },	// DBL
    {   0,   19,   32,        o(sb_lenNom),           "lenNom" },	// DBL
    {   0,   19,   32,    o(sb_lenCharNat),       "lenCharNat" },	// DBL
    {   0,   19,   32,    o(sb_lenEffWink),       "lenEffWink" },	// DBL
    {   0,   19,   32,       o(sb_cosTilt),          "cosTilt" },	// DBL
    {   0,   19,   32,        o(sb_atvDeg),           "atvDeg" },	// DBL
    {   0,   19,   32,        o(sb_cosAtv),           "cosAtv" },	// DBL
    {   0,  105,    1,       o(sb_hcModel),          "hcModel" },	// CONVMODELCH
    {   0,   12,   32,       o(sb_hcLChar),          "hcLChar" },	// FLOAT
    {   0,   19,   32,    o(sb_hcConst[0]),       "hcConst[0]" },	// DBL
    {   0,   19,   32,    o(sb_hcConst[1]),       "hcConst[1]" },	// DBL
    {   0,   19,   32,    o(sb_hcConst[2]),       "hcConst[2]" },	// DBL
    {   0,  102,    1,   o(sb_groundModel),      "groundModel" },	// GROUNDMODELCH
    {   0,   13,    1,    o(sb_cTaDbAvgYr),       "cTaDbAvgYr" },	// FLOAT_GEZ
    {   0,   13,    1,    o(sb_cTaDbAvg31),       "cTaDbAvg31" },	// FLOAT_GEZ
    {   0,   13,    1,    o(sb_cTaDbAvg14),       "cTaDbAvg14" },	// FLOAT_GEZ
    {   0,   13,    1,    o(sb_cTaDbAvg07),       "cTaDbAvg07" },	// FLOAT_GEZ
    {   0,   13,    1,        o(sb_cTGrnd),           "cTGrnd" },	// FLOAT_GEZ
    {   0,   13,   32,         o(sb_rGrnd),            "rGrnd" },	// FLOAT_GEZ
    {   0,   13,    1,      o(sb_rConGrnd),         "rConGrnd" },	// FLOAT_GEZ
    {   1,   12,   33,o(sb_hCX.hc_history[0]),       "history[0]" },	// FLOAT
    {   1,   12,   33,o(sb_hCX.hc_history[1]),       "history[1]" },	// FLOAT
    {   1,   12,   33,o(sb_hCX.hc_history[2]),       "history[2]" },	// FLOAT
    {   1,   12,   33,o(sb_hCX.hc_history[3]),       "history[3]" },	// FLOAT
    {   1,    1,   33, o(sb_hCX.hc_iXHist),           "iXHist" },	// INT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSBC

struct SFIR sfirXSURF[] =	// fields info for RTXSURF
{
 #define o(m) offsetof(XSURF,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    3,    0,            o(xs_ty),               "ty" },	// SI
    {   0,   28,   32,          o(xs_area),             "area" },	// AREA_GZ
    {   0,   40,   32,              o(azm),              "azm" },	// ANGLE
    {   0,   40,   32,             o(tilt),             "tilt" },	// ANGLE
    {   0,   12,   32,     o(xs_dircos[0]),        "dircos[0]" },	// FLOAT
    {   0,   12,   32,     o(xs_dircos[1]),        "dircos[1]" },	// FLOAT
    {   0,   12,   32,     o(xs_dircos[2]),        "dircos[2]" },	// FLOAT
    {   0,   13,   32,       o(xs_depthBG),          "depthBG" },	// FLOAT_GEZ
    {   0,   13,   32,        o(xs_height),           "height" },	// FLOAT_GEZ
    {   0,  101,    0,         o(xs_model),            "model" },	// SFMODELCH
    {   0,  101,   32,        o(xs_modelr),           "modelr" },	// SFMODELCH
    {   0,   12,   32,         o(xs_lThkF),            "lThkF" },	// FLOAT
    {   0,   24,   32,              o(gti),              "gti" },	// TI
    {   0,   17,  256,              o(sco),              "sco" },	// FRAC
    {   0,   17,  256,              o(scc),              "scc" },	// FRAC
    {   2,   17,  288,o(xs_sbcI.sb_absSlr),      "sbcI.absSlr" },	// FRAC
    {   2,   19,  288,o(xs_sbcI.sb_awAbsSlr),    "sbcI.awAbsSlr" },	// DBL
    {   2,   17,   32, o(xs_sbcI.sb_epsLW),       "sbcI.epsLW" },	// FRAC
    {   2,   24,   32,    o(xs_sbcI.sb_zi),          "sbcI.zi" },	// TI
    {   2,   19,   32,     o(xs_sbcI.sb_F),           "sbcI.F" },	// DBL
    {   2,   19,   32,    o(xs_sbcI.sb_Fp),          "sbcI.Fp" },	// DBL
    {   2,   19,   32, o(xs_sbcI.sb_frRad),       "sbcI.frRad" },	// DBL
    {   2,   19,   32,  o(xs_sbcI.sb_fSky),        "sbcI.fSky" },	// DBL
    {   2,   19,   32,  o(xs_sbcI.sb_fAir),        "sbcI.fAir" },	// DBL
    {   2,   12, 1060, o(xs_sbcI.sb_hcNat),       "sbcI.hcNat" },	// FLOAT
    {   2,   12, 1060, o(xs_sbcI.sb_hcFrc),       "sbcI.hcFrc" },	// FLOAT
    {   2,   12, 1060,o(xs_sbcI.sb_hcMult),      "sbcI.hcMult" },	// FLOAT
    {   2,   12, 1060,   o(xs_sbcI.sb_hxa),         "sbcI.hxa" },	// FLOAT
    {   2,   12, 1060,   o(xs_sbcI.sb_hxr),         "sbcI.hxr" },	// FLOAT
    {   2,   12, 1060, o(xs_sbcI.sb_hxtot),       "sbcI.hxtot" },	// FLOAT
    {   2,   19, 1060,  o(xs_sbcI.sb_uRat),        "sbcI.uRat" },	// DBL
    {   2,   19, 1060,  o(xs_sbcI.sb_fRat),        "sbcI.fRat" },	// DBL
    {   2,   19, 1060,    o(xs_sbcI.sb_cx),          "sbcI.cx" },	// DBL
    {   2,   19, 1060,o(xs_sbcI.sb_sgTarg.st_bm),   "sbcI.sgTarg.bm" },	// DBL
    {   2,   19, 1060,o(xs_sbcI.sb_sgTarg.st_df),   "sbcI.sgTarg.df" },	// DBL
    {   2,   19, 1060,o(xs_sbcI.sb_sgTarg.st_tot),  "sbcI.sgTarg.tot" },	// DBL
    {   2,   19, 1060,    o(xs_sbcI.sb_sg),          "sbcI.sg" },	// DBL
    {   2,   12, 1060,  o(xs_sbcI.sb_tSrf),        "sbcI.tSrf" },	// FLOAT
    {   2,   12, 1056,o(xs_sbcI.sb_tSrfls),      "sbcI.tSrfls" },	// FLOAT
    {   2,   19, 1060, o(xs_sbcI.sb_qrAbs),       "sbcI.qrAbs" },	// DBL
    {   2,   12, 1060,   o(xs_sbcI.sb_txa),         "sbcI.txa" },	// FLOAT
    {   2,   12, 1060,   o(xs_sbcI.sb_txr),         "sbcI.txr" },	// FLOAT
    {   2,   12, 1060,   o(xs_sbcI.sb_txe),         "sbcI.txe" },	// FLOAT
    {   2,   19, 1060,     o(xs_sbcI.sb_w),           "sbcI.w" },	// DBL
    {   2,   19, 1060,  o(xs_sbcI.sb_qSrf),        "sbcI.qSrf" },	// DBL
    {   0,   86,   32,   o(xs_sbcI.sb_pXS),         "sbcI.pXS" },	// XSURFP
    {   0,    1,   32,    o(xs_sbcI.sb_si),          "sbcI.si" },	// INT
    {   0,   19,   32,o(xs_sbcI.sb_fcWind),      "sbcI.fcWind" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_fcWind2),     "sbcI.fcWind2" },	// DBL
    {   0,   19, 1060,   o(xs_sbcI.sb_eta),         "sbcI.eta" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_widNom),      "sbcI.widNom" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_lenNom),      "sbcI.lenNom" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_lenCharNat),  "sbcI.lenCharNat" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_lenEffWink),  "sbcI.lenEffWink" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_cosTilt),     "sbcI.cosTilt" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_atvDeg),      "sbcI.atvDeg" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_cosAtv),      "sbcI.cosAtv" },	// DBL
    {   0,  105,   33,o(xs_sbcI.sb_hcModel),     "sbcI.hcModel" },	// CONVMODELCH
    {   0,   12,   32,o(xs_sbcI.sb_hcLChar),     "sbcI.hcLChar" },	// FLOAT
    {   0,   19,   32,o(xs_sbcI.sb_hcConst[0]),  "sbcI.hcConst[0]" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_hcConst[1]),  "sbcI.hcConst[1]" },	// DBL
    {   0,   19,   32,o(xs_sbcI.sb_hcConst[2]),  "sbcI.hcConst[2]" },	// DBL
    {   0,  102,   33,o(xs_sbcI.sb_groundModel), "sbcI.groundModel" },	// GROUNDMODELCH
    {   0,   13,   33,o(xs_sbcI.sb_cTaDbAvgYr),  "sbcI.cTaDbAvgYr" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcI.sb_cTaDbAvg31),  "sbcI.cTaDbAvg31" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcI.sb_cTaDbAvg14),  "sbcI.cTaDbAvg14" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcI.sb_cTaDbAvg07),  "sbcI.cTaDbAvg07" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcI.sb_cTGrnd),      "sbcI.cTGrnd" },	// FLOAT_GEZ
    {   0,   13,   32, o(xs_sbcI.sb_rGrnd),       "sbcI.rGrnd" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcI.sb_rConGrnd),    "sbcI.rConGrnd" },	// FLOAT_GEZ
    {   1,   12,   33,o(xs_sbcI.sb_hCX.hc_history[0]),  "sbcI.history[0]" },	// FLOAT
    {   1,   12,   33,o(xs_sbcI.sb_hCX.hc_history[1]),  "sbcI.history[1]" },	// FLOAT
    {   1,   12,   33,o(xs_sbcI.sb_hCX.hc_history[2]),  "sbcI.history[2]" },	// FLOAT
    {   1,   12,   33,o(xs_sbcI.sb_hCX.hc_history[3]),  "sbcI.history[3]" },	// FLOAT
    {   1,    1,   33,o(xs_sbcI.sb_hCX.hc_iXHist),      "sbcI.iXHist" },	// INT
    {   2,   17,  288,o(xs_sbcO.sb_absSlr),      "sbcO.absSlr" },	// FRAC
    {   2,   19,  288,o(xs_sbcO.sb_awAbsSlr),    "sbcO.awAbsSlr" },	// DBL
    {   2,   17,   32, o(xs_sbcO.sb_epsLW),       "sbcO.epsLW" },	// FRAC
    {   2,   24,   32,    o(xs_sbcO.sb_zi),          "sbcO.zi" },	// TI
    {   2,   19,   32,     o(xs_sbcO.sb_F),           "sbcO.F" },	// DBL
    {   2,   19,   32,    o(xs_sbcO.sb_Fp),          "sbcO.Fp" },	// DBL
    {   2,   19,   32, o(xs_sbcO.sb_frRad),       "sbcO.frRad" },	// DBL
    {   2,   19,   32,  o(xs_sbcO.sb_fSky),        "sbcO.fSky" },	// DBL
    {   2,   19,   32,  o(xs_sbcO.sb_fAir),        "sbcO.fAir" },	// DBL
    {   2,   12, 1060, o(xs_sbcO.sb_hcNat),       "sbcO.hcNat" },	// FLOAT
    {   2,   12, 1060, o(xs_sbcO.sb_hcFrc),       "sbcO.hcFrc" },	// FLOAT
    {   2,   12, 1060,o(xs_sbcO.sb_hcMult),      "sbcO.hcMult" },	// FLOAT
    {   2,   12, 1060,   o(xs_sbcO.sb_hxa),         "sbcO.hxa" },	// FLOAT
    {   2,   12, 1060,   o(xs_sbcO.sb_hxr),         "sbcO.hxr" },	// FLOAT
    {   2,   12, 1060, o(xs_sbcO.sb_hxtot),       "sbcO.hxtot" },	// FLOAT
    {   2,   19, 1060,  o(xs_sbcO.sb_uRat),        "sbcO.uRat" },	// DBL
    {   2,   19, 1060,  o(xs_sbcO.sb_fRat),        "sbcO.fRat" },	// DBL
    {   2,   19, 1060,    o(xs_sbcO.sb_cx),          "sbcO.cx" },	// DBL
    {   2,   19, 1060,o(xs_sbcO.sb_sgTarg.st_bm),   "sbcO.sgTarg.bm" },	// DBL
    {   2,   19, 1060,o(xs_sbcO.sb_sgTarg.st_df),   "sbcO.sgTarg.df" },	// DBL
    {   2,   19, 1060,o(xs_sbcO.sb_sgTarg.st_tot),  "sbcO.sgTarg.tot" },	// DBL
    {   2,   19, 1060,    o(xs_sbcO.sb_sg),          "sbcO.sg" },	// DBL
    {   2,   12, 1060,  o(xs_sbcO.sb_tSrf),        "sbcO.tSrf" },	// FLOAT
    {   2,   12, 1056,o(xs_sbcO.sb_tSrfls),      "sbcO.tSrfls" },	// FLOAT
    {   2,   19, 1060, o(xs_sbcO.sb_qrAbs),       "sbcO.qrAbs" },	// DBL
    {   2,   12, 1060,   o(xs_sbcO.sb_txa),         "sbcO.txa" },	// FLOAT
    {   2,   12, 1060,   o(xs_sbcO.sb_txr),         "sbcO.txr" },	// FLOAT
    {   2,   12, 1060,   o(xs_sbcO.sb_txe),         "sbcO.txe" },	// FLOAT
    {   2,   19, 1060,     o(xs_sbcO.sb_w),           "sbcO.w" },	// DBL
    {   2,   19, 1060,  o(xs_sbcO.sb_qSrf),        "sbcO.qSrf" },	// DBL
    {   0,   86,   32,   o(xs_sbcO.sb_pXS),         "sbcO.pXS" },	// XSURFP
    {   0,    1,   32,    o(xs_sbcO.sb_si),          "sbcO.si" },	// INT
    {   0,   19,   32,o(xs_sbcO.sb_fcWind),      "sbcO.fcWind" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_fcWind2),     "sbcO.fcWind2" },	// DBL
    {   0,   19, 1060,   o(xs_sbcO.sb_eta),         "sbcO.eta" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_widNom),      "sbcO.widNom" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_lenNom),      "sbcO.lenNom" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_lenCharNat),  "sbcO.lenCharNat" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_lenEffWink),  "sbcO.lenEffWink" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_cosTilt),     "sbcO.cosTilt" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_atvDeg),      "sbcO.atvDeg" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_cosAtv),      "sbcO.cosAtv" },	// DBL
    {   0,  105,   33,o(xs_sbcO.sb_hcModel),     "sbcO.hcModel" },	// CONVMODELCH
    {   0,   12,   32,o(xs_sbcO.sb_hcLChar),     "sbcO.hcLChar" },	// FLOAT
    {   0,   19,   32,o(xs_sbcO.sb_hcConst[0]),  "sbcO.hcConst[0]" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_hcConst[1]),  "sbcO.hcConst[1]" },	// DBL
    {   0,   19,   32,o(xs_sbcO.sb_hcConst[2]),  "sbcO.hcConst[2]" },	// DBL
    {   0,  102,   33,o(xs_sbcO.sb_groundModel), "sbcO.groundModel" },	// GROUNDMODELCH
    {   0,   13,   33,o(xs_sbcO.sb_cTaDbAvgYr),  "sbcO.cTaDbAvgYr" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcO.sb_cTaDbAvg31),  "sbcO.cTaDbAvg31" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcO.sb_cTaDbAvg14),  "sbcO.cTaDbAvg14" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcO.sb_cTaDbAvg07),  "sbcO.cTaDbAvg07" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcO.sb_cTGrnd),      "sbcO.cTGrnd" },	// FLOAT_GEZ
    {   0,   13,   32, o(xs_sbcO.sb_rGrnd),       "sbcO.rGrnd" },	// FLOAT_GEZ
    {   0,   13,   33,o(xs_sbcO.sb_rConGrnd),    "sbcO.rConGrnd" },	// FLOAT_GEZ
    {   1,   12,   33,o(xs_sbcO.sb_hCX.hc_history[0]),  "sbcO.history[0]" },	// FLOAT
    {   1,   12,   33,o(xs_sbcO.sb_hCX.hc_history[1]),  "sbcO.history[1]" },	// FLOAT
    {   1,   12,   33,o(xs_sbcO.sb_hCX.hc_history[2]),  "sbcO.history[2]" },	// FLOAT
    {   1,   12,   33,o(xs_sbcO.sb_hCX.hc_history[3]),  "sbcO.history[3]" },	// FLOAT
    {   1,    1,   33,o(xs_sbcO.sb_hCX.hc_iXHist),      "sbcO.iXHist" },	// INT
    {   0,  126,    1,      o(xs_fenModel),         "fenModel" },	// FENMODELCH
    {   0,   17,    1,          o(xs_SHGC),             "SHGC" },	// FRAC
    {   0,   13,   32,         o(xs_fMult),            "fMult" },	// FLOAT_GEZ
    {   0,   57,    1,         o(xs_UNFRC),            "UNFRC" },	// UH_GZ
    {   0,    3,    1,          o(xs_NGlz),             "NGlz" },	// SI
    {   0,  127,    1,         o(xs_exShd),            "exShd" },	// EXSHDCH
    {   0,  128,    1,         o(xs_inShd),            "inShd" },	// INSHDCH
    {   0,   13,   32,      o(xs_dirtLoss),         "dirtLoss" },	// FLOAT_GEZ
    {   0,  100,   32,          o(sfExCnd),          "sfExCnd" },	// EXCNDCH
    {   0,   42, 1024,            o(sfExT),            "sfExT" },	// TEMP
    {   0,   24,    1,          o(sfAdjZi),          "sfAdjZi" },	// TI
    {   0,   57,   32,               o(uI),               "uI" },	// UH_GZ
    {   0,   57,   32,               o(uC),               "uC" },	// UH_GZ
    {   0,   57,   32,               o(uX),               "uX" },	// UH_GZ
    {   0,   12,   32,            o(xs_Rf),               "Rf" },	// FLOAT
    {   0,   17,  256,         o(grndRefl),         "grndRefl" },	// FRAC
    {   0,   17,  256,          o(vfSkyDf),          "vfSkyDf" },	// FRAC
    {   0,   17,  256,         o(vfGrndDf),         "vfGrndDf" },	// FRAC
    {   0,   17,   32,          o(vfSkyLW),          "vfSkyLW" },	// FRAC
    {   0,   17,   32,         o(vfGrndLW),         "vfGrndLW" },	// FRAC
    {   0,   57,   32,          o(xs_uval),             "uval" },	// UH_GZ
    {   0,   57,   32,          o(xs_UNom),             "UNom" },	// UH_GZ
    {   0,   59,   32,         o(xs_UANom),            "UANom" },	// UA
    {   0,   12,   32,    o(xs_rSrfNom[0]),       "rSrfNom[0]" },	// FLOAT
    {   0,   12,   32,    o(xs_rSrfNom[1]),       "rSrfNom[1]" },	// FLOAT
    {   0,   12,   32,    o(xs_hSrfNom[0]),       "hSrfNom[0]" },	// FLOAT
    {   0,   12,   32,    o(xs_hSrfNom[1]),       "hSrfNom[1]" },	// FLOAT
    {   0,   57,   32,         o(xs_cFctr),            "cFctr" },	// UH_GZ
    {   0,   24,   32,           o(iwshad),           "iwshad" },	// TI
    {   0,   24,   32,           o(xs_msi),              "msi" },	// TI
    {   0,   12,  516,       o(xs_tLrB[0]),          "tLrB[0]" },	// FLOAT
    {   0,   12,  516,       o(xs_tLrB[1]),          "tLrB[1]" },	// FLOAT
    {   0,   12,  516,       o(xs_tLrB[2]),          "tLrB[2]" },	// FLOAT
    {   0,   12,  516,       o(xs_tLrB[3]),          "tLrB[3]" },	// FLOAT
    {   0,   12,  516,       o(xs_tLrB[4]),          "tLrB[4]" },	// FLOAT
    {   0,   12,  516,       o(xs_tLrB[5]),          "tLrB[5]" },	// FLOAT
    {   0,   12,  516,       o(xs_tLrB[6]),          "tLrB[6]" },	// FLOAT
    {   0,   12,  516,       o(xs_tLrB[7]),          "tLrB[7]" },	// FLOAT
    {   0,   12,  516,       o(xs_tLrB[8]),          "tLrB[8]" },	// FLOAT
    {   0,   12,  516,       o(xs_tLrB[9]),          "tLrB[9]" },	// FLOAT
    {   0,    3,   32,          o(nsgdist),          "nsgdist" },	// SI
    {   0,    3,   32,o(sgdist[0].sd_targTy), "sgdist[0].targTy" },	// SI
    {   0,   24,   33,o(sgdist[0].sd_targTi), "sgdist[0].targTi" },	// TI
    {   0,   17,  288, o(sgdist[0].sd_FSO),    "sgdist[0].FSO" },	// FRAC
    {   0,   17,  288, o(sgdist[0].sd_FSC),    "sgdist[0].FSC" },	// FRAC
    {   0,    3,   32,o(sgdist[1].sd_targTy), "sgdist[1].targTy" },	// SI
    {   0,   24,   33,o(sgdist[1].sd_targTi), "sgdist[1].targTi" },	// TI
    {   0,   17,  288, o(sgdist[1].sd_FSO),    "sgdist[1].FSO" },	// FRAC
    {   0,   17,  288, o(sgdist[1].sd_FSC),    "sgdist[1].FSC" },	// FRAC
    {   0,    3,   32,o(sgdist[2].sd_targTy), "sgdist[2].targTy" },	// SI
    {   0,   24,   33,o(sgdist[2].sd_targTi), "sgdist[2].targTi" },	// TI
    {   0,   17,  288, o(sgdist[2].sd_FSO),    "sgdist[2].FSO" },	// FRAC
    {   0,   17,  288, o(sgdist[2].sd_FSC),    "sgdist[2].FSC" },	// FRAC
    {   0,    3,   32,o(sgdist[3].sd_targTy), "sgdist[3].targTy" },	// SI
    {   0,   24,   33,o(sgdist[3].sd_targTi), "sgdist[3].targTi" },	// TI
    {   0,   17,  288, o(sgdist[3].sd_FSO),    "sgdist[3].FSO" },	// FRAC
    {   0,   17,  288, o(sgdist[3].sd_FSC),    "sgdist[3].FSC" },	// FRAC
    {   0,    3,   32,o(sgdist[4].sd_targTy), "sgdist[4].targTy" },	// SI
    {   0,   24,   33,o(sgdist[4].sd_targTi), "sgdist[4].targTi" },	// TI
    {   0,   17,  288, o(sgdist[4].sd_FSO),    "sgdist[4].FSO" },	// FRAC
    {   0,   17,  288, o(sgdist[4].sd_FSC),    "sgdist[4].FSC" },	// FRAC
    {   0,    3,   32,o(sgdist[5].sd_targTy), "sgdist[5].targTy" },	// SI
    {   0,   24,   33,o(sgdist[5].sd_targTi), "sgdist[5].targTi" },	// TI
    {   0,   17,  288, o(sgdist[5].sd_FSO),    "sgdist[5].FSO" },	// FRAC
    {   0,   17,  288, o(sgdist[5].sd_FSC),    "sgdist[5].FSC" },	// FRAC
    {   0,    3,   32,o(sgdist[6].sd_targTy), "sgdist[6].targTy" },	// SI
    {   0,   24,   33,o(sgdist[6].sd_targTi), "sgdist[6].targTi" },	// TI
    {   0,   17,  288, o(sgdist[6].sd_FSO),    "sgdist[6].FSO" },	// FRAC
    {   0,   17,  288, o(sgdist[6].sd_FSC),    "sgdist[6].FSC" },	// FRAC
    {   0,    3,   32,o(sgdist[7].sd_targTy), "sgdist[7].targTy" },	// SI
    {   0,   24,   33,o(sgdist[7].sd_targTi), "sgdist[7].targTi" },	// TI
    {   0,   17,  288, o(sgdist[7].sd_FSO),    "sgdist[7].FSO" },	// FRAC
    {   0,   17,  288, o(sgdist[7].sd_FSC),    "sgdist[7].FSC" },	// FRAC
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirXSURF

struct SFIR sfirPRI[] =	// fields info for RTPRI
{
 #define o(m) offsetof(PRI,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   1,    3,   32,          o(x.xs_ty),               "ty" },	// SI
    {   1,   28,   32,        o(x.xs_area),             "area" },	// AREA_GZ
    {   1,   40,   32,            o(x.azm),              "azm" },	// ANGLE
    {   1,   40,   32,           o(x.tilt),             "tilt" },	// ANGLE
    {   1,   12,   32,   o(x.xs_dircos[0]),        "dircos[0]" },	// FLOAT
    {   1,   12,   32,   o(x.xs_dircos[1]),        "dircos[1]" },	// FLOAT
    {   1,   12,   32,   o(x.xs_dircos[2]),        "dircos[2]" },	// FLOAT
    {   1,   13,   32,     o(x.xs_depthBG),          "depthBG" },	// FLOAT_GEZ
    {   1,   13,   32,      o(x.xs_height),           "height" },	// FLOAT_GEZ
    {   1,  101,   32,       o(x.xs_model),            "model" },	// SFMODELCH
    {   1,  101,   32,      o(x.xs_modelr),           "modelr" },	// SFMODELCH
    {   1,   12,   32,       o(x.xs_lThkF),            "lThkF" },	// FLOAT
    {   1,   24,   32,            o(x.gti),              "gti" },	// TI
    {   1,   17,  288,            o(x.sco),              "sco" },	// FRAC
    {   1,   17,  288,            o(x.scc),              "scc" },	// FRAC
    {   3,   17,  288,o(x.xs_sbcI.sb_absSlr),      "sbcI.absSlr" },	// FRAC
    {   3,   19,  288,o(x.xs_sbcI.sb_awAbsSlr),    "sbcI.awAbsSlr" },	// DBL
    {   3,   17,   32,o(x.xs_sbcI.sb_epsLW),       "sbcI.epsLW" },	// FRAC
    {   3,   24,   32,  o(x.xs_sbcI.sb_zi),          "sbcI.zi" },	// TI
    {   3,   19,   32,   o(x.xs_sbcI.sb_F),           "sbcI.F" },	// DBL
    {   3,   19,   32,  o(x.xs_sbcI.sb_Fp),          "sbcI.Fp" },	// DBL
    {   3,   19,   32,o(x.xs_sbcI.sb_frRad),       "sbcI.frRad" },	// DBL
    {   3,   19,   32,o(x.xs_sbcI.sb_fSky),        "sbcI.fSky" },	// DBL
    {   3,   19,   32,o(x.xs_sbcI.sb_fAir),        "sbcI.fAir" },	// DBL
    {   3,   12, 1060,o(x.xs_sbcI.sb_hcNat),       "sbcI.hcNat" },	// FLOAT
    {   3,   12, 1060,o(x.xs_sbcI.sb_hcFrc),       "sbcI.hcFrc" },	// FLOAT
    {   3,   12, 1060,o(x.xs_sbcI.sb_hcMult),      "sbcI.hcMult" },	// FLOAT
    {   3,   12, 1060, o(x.xs_sbcI.sb_hxa),         "sbcI.hxa" },	// FLOAT
    {   3,   12, 1060, o(x.xs_sbcI.sb_hxr),         "sbcI.hxr" },	// FLOAT
    {   3,   12, 1060,o(x.xs_sbcI.sb_hxtot),       "sbcI.hxtot" },	// FLOAT
    {   3,   19, 1060,o(x.xs_sbcI.sb_uRat),        "sbcI.uRat" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcI.sb_fRat),        "sbcI.fRat" },	// DBL
    {   3,   19, 1060,  o(x.xs_sbcI.sb_cx),          "sbcI.cx" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcI.sb_sgTarg.st_bm),   "sbcI.sgTarg.bm" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcI.sb_sgTarg.st_df),   "sbcI.sgTarg.df" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcI.sb_sgTarg.st_tot),  "sbcI.sgTarg.tot" },	// DBL
    {   3,   19, 1060,  o(x.xs_sbcI.sb_sg),          "sbcI.sg" },	// DBL
    {   3,   12, 1060,o(x.xs_sbcI.sb_tSrf),        "sbcI.tSrf" },	// FLOAT
    {   3,   12, 1056,o(x.xs_sbcI.sb_tSrfls),      "sbcI.tSrfls" },	// FLOAT
    {   3,   19, 1060,o(x.xs_sbcI.sb_qrAbs),       "sbcI.qrAbs" },	// DBL
    {   3,   12, 1060, o(x.xs_sbcI.sb_txa),         "sbcI.txa" },	// FLOAT
    {   3,   12, 1060, o(x.xs_sbcI.sb_txr),         "sbcI.txr" },	// FLOAT
    {   3,   12, 1060, o(x.xs_sbcI.sb_txe),         "sbcI.txe" },	// FLOAT
    {   3,   19, 1060,   o(x.xs_sbcI.sb_w),           "sbcI.w" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcI.sb_qSrf),        "sbcI.qSrf" },	// DBL
    {   1,   86,   32, o(x.xs_sbcI.sb_pXS),         "sbcI.pXS" },	// XSURFP
    {   1,    1,   32,  o(x.xs_sbcI.sb_si),          "sbcI.si" },	// INT
    {   1,   19,   32,o(x.xs_sbcI.sb_fcWind),      "sbcI.fcWind" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_fcWind2),     "sbcI.fcWind2" },	// DBL
    {   1,   19, 1060, o(x.xs_sbcI.sb_eta),         "sbcI.eta" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_widNom),      "sbcI.widNom" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_lenNom),      "sbcI.lenNom" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_lenCharNat),  "sbcI.lenCharNat" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_lenEffWink),  "sbcI.lenEffWink" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_cosTilt),     "sbcI.cosTilt" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_atvDeg),      "sbcI.atvDeg" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_cosAtv),      "sbcI.cosAtv" },	// DBL
    {   1,  105,   33,o(x.xs_sbcI.sb_hcModel),     "sbcI.hcModel" },	// CONVMODELCH
    {   1,   12,   32,o(x.xs_sbcI.sb_hcLChar),     "sbcI.hcLChar" },	// FLOAT
    {   1,   19,   32,o(x.xs_sbcI.sb_hcConst[0]),  "sbcI.hcConst[0]" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_hcConst[1]),  "sbcI.hcConst[1]" },	// DBL
    {   1,   19,   32,o(x.xs_sbcI.sb_hcConst[2]),  "sbcI.hcConst[2]" },	// DBL
    {   1,  102,   33,o(x.xs_sbcI.sb_groundModel), "sbcI.groundModel" },	// GROUNDMODELCH
    {   1,   13,   33,o(x.xs_sbcI.sb_cTaDbAvgYr),  "sbcI.cTaDbAvgYr" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcI.sb_cTaDbAvg31),  "sbcI.cTaDbAvg31" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcI.sb_cTaDbAvg14),  "sbcI.cTaDbAvg14" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcI.sb_cTaDbAvg07),  "sbcI.cTaDbAvg07" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcI.sb_cTGrnd),      "sbcI.cTGrnd" },	// FLOAT_GEZ
    {   1,   13,   32,o(x.xs_sbcI.sb_rGrnd),       "sbcI.rGrnd" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcI.sb_rConGrnd),    "sbcI.rConGrnd" },	// FLOAT_GEZ
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[0]),  "sbcI.history[0]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[1]),  "sbcI.history[1]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[2]),  "sbcI.history[2]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[3]),  "sbcI.history[3]" },	// FLOAT
    {   1,    1,   33,o(x.xs_sbcI.sb_hCX.hc_iXHist),      "sbcI.iXHist" },	// INT
    {   3,   17,  288,o(x.xs_sbcO.sb_absSlr),      "sbcO.absSlr" },	// FRAC
    {   3,   19,  288,o(x.xs_sbcO.sb_awAbsSlr),    "sbcO.awAbsSlr" },	// DBL
    {   3,   17,   32,o(x.xs_sbcO.sb_epsLW),       "sbcO.epsLW" },	// FRAC
    {   3,   24,   32,  o(x.xs_sbcO.sb_zi),          "sbcO.zi" },	// TI
    {   3,   19,   32,   o(x.xs_sbcO.sb_F),           "sbcO.F" },	// DBL
    {   3,   19,   32,  o(x.xs_sbcO.sb_Fp),          "sbcO.Fp" },	// DBL
    {   3,   19,   32,o(x.xs_sbcO.sb_frRad),       "sbcO.frRad" },	// DBL
    {   3,   19,   32,o(x.xs_sbcO.sb_fSky),        "sbcO.fSky" },	// DBL
    {   3,   19,   32,o(x.xs_sbcO.sb_fAir),        "sbcO.fAir" },	// DBL
    {   3,   12, 1060,o(x.xs_sbcO.sb_hcNat),       "sbcO.hcNat" },	// FLOAT
    {   3,   12, 1060,o(x.xs_sbcO.sb_hcFrc),       "sbcO.hcFrc" },	// FLOAT
    {   3,   12, 1060,o(x.xs_sbcO.sb_hcMult),      "sbcO.hcMult" },	// FLOAT
    {   3,   12, 1060, o(x.xs_sbcO.sb_hxa),         "sbcO.hxa" },	// FLOAT
    {   3,   12, 1060, o(x.xs_sbcO.sb_hxr),         "sbcO.hxr" },	// FLOAT
    {   3,   12, 1060,o(x.xs_sbcO.sb_hxtot),       "sbcO.hxtot" },	// FLOAT
    {   3,   19, 1060,o(x.xs_sbcO.sb_uRat),        "sbcO.uRat" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcO.sb_fRat),        "sbcO.fRat" },	// DBL
    {   3,   19, 1060,  o(x.xs_sbcO.sb_cx),          "sbcO.cx" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcO.sb_sgTarg.st_bm),   "sbcO.sgTarg.bm" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcO.sb_sgTarg.st_df),   "sbcO.sgTarg.df" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcO.sb_sgTarg.st_tot),  "sbcO.sgTarg.tot" },	// DBL
    {   3,   19, 1060,  o(x.xs_sbcO.sb_sg),          "sbcO.sg" },	// DBL
    {   3,   12, 1060,o(x.xs_sbcO.sb_tSrf),        "sbcO.tSrf" },	// FLOAT
    {   3,   12, 1056,o(x.xs_sbcO.sb_tSrfls),      "sbcO.tSrfls" },	// FLOAT
    {   3,   19, 1060,o(x.xs_sbcO.sb_qrAbs),       "sbcO.qrAbs" },	// DBL
    {   3,   12, 1060, o(x.xs_sbcO.sb_txa),         "sbcO.txa" },	// FLOAT
    {   3,   12, 1060, o(x.xs_sbcO.sb_txr),         "sbcO.txr" },	// FLOAT
    {   3,   12, 1060, o(x.xs_sbcO.sb_txe),         "sbcO.txe" },	// FLOAT
    {   3,   19, 1060,   o(x.xs_sbcO.sb_w),           "sbcO.w" },	// DBL
    {   3,   19, 1060,o(x.xs_sbcO.sb_qSrf),        "sbcO.qSrf" },	// DBL
    {   1,   86,   32, o(x.xs_sbcO.sb_pXS),         "sbcO.pXS" },	// XSURFP
    {   1,    1,   32,  o(x.xs_sbcO.sb_si),          "sbcO.si" },	// INT
    {   1,   19,   32,o(x.xs_sbcO.sb_fcWind),      "sbcO.fcWind" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_fcWind2),     "sbcO.fcWind2" },	// DBL
    {   1,   19, 1060, o(x.xs_sbcO.sb_eta),         "sbcO.eta" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_widNom),      "sbcO.widNom" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_lenNom),      "sbcO.lenNom" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_lenCharNat),  "sbcO.lenCharNat" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_lenEffWink),  "sbcO.lenEffWink" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_cosTilt),     "sbcO.cosTilt" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_atvDeg),      "sbcO.atvDeg" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_cosAtv),      "sbcO.cosAtv" },	// DBL
    {   1,  105,   33,o(x.xs_sbcO.sb_hcModel),     "sbcO.hcModel" },	// CONVMODELCH
    {   1,   12,   32,o(x.xs_sbcO.sb_hcLChar),     "sbcO.hcLChar" },	// FLOAT
    {   1,   19,   32,o(x.xs_sbcO.sb_hcConst[0]),  "sbcO.hcConst[0]" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_hcConst[1]),  "sbcO.hcConst[1]" },	// DBL
    {   1,   19,   32,o(x.xs_sbcO.sb_hcConst[2]),  "sbcO.hcConst[2]" },	// DBL
    {   1,  102,   33,o(x.xs_sbcO.sb_groundModel), "sbcO.groundModel" },	// GROUNDMODELCH
    {   1,   13,   33,o(x.xs_sbcO.sb_cTaDbAvgYr),  "sbcO.cTaDbAvgYr" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcO.sb_cTaDbAvg31),  "sbcO.cTaDbAvg31" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcO.sb_cTaDbAvg14),  "sbcO.cTaDbAvg14" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcO.sb_cTaDbAvg07),  "sbcO.cTaDbAvg07" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcO.sb_cTGrnd),      "sbcO.cTGrnd" },	// FLOAT_GEZ
    {   1,   13,   32,o(x.xs_sbcO.sb_rGrnd),       "sbcO.rGrnd" },	// FLOAT_GEZ
    {   1,   13,   33,o(x.xs_sbcO.sb_rConGrnd),    "sbcO.rConGrnd" },	// FLOAT_GEZ
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[0]),  "sbcO.history[0]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[1]),  "sbcO.history[1]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[2]),  "sbcO.history[2]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[3]),  "sbcO.history[3]" },	// FLOAT
    {   1,    1,   33,o(x.xs_sbcO.sb_hCX.hc_iXHist),      "sbcO.iXHist" },	// INT
    {   1,  126,   33,    o(x.xs_fenModel),         "fenModel" },	// FENMODELCH
    {   1,   17,   33,        o(x.xs_SHGC),             "SHGC" },	// FRAC
    {   1,   13,   32,       o(x.xs_fMult),            "fMult" },	// FLOAT_GEZ
    {   1,   57,   33,       o(x.xs_UNFRC),            "UNFRC" },	// UH_GZ
    {   1,    3,   33,        o(x.xs_NGlz),             "NGlz" },	// SI
    {   1,  127,   33,       o(x.xs_exShd),            "exShd" },	// EXSHDCH
    {   1,  128,   33,       o(x.xs_inShd),            "inShd" },	// INSHDCH
    {   1,   13,   32,    o(x.xs_dirtLoss),         "dirtLoss" },	// FLOAT_GEZ
    {   1,  100,   32,        o(x.sfExCnd),          "sfExCnd" },	// EXCNDCH
    {   1,   42, 1056,          o(x.sfExT),            "sfExT" },	// TEMP
    {   1,   24,   33,        o(x.sfAdjZi),          "sfAdjZi" },	// TI
    {   1,   57,   32,             o(x.uI),               "uI" },	// UH_GZ
    {   1,   57,   32,             o(x.uC),               "uC" },	// UH_GZ
    {   1,   57,   32,             o(x.uX),               "uX" },	// UH_GZ
    {   1,   12,   32,          o(x.xs_Rf),               "Rf" },	// FLOAT
    {   1,   17,  288,       o(x.grndRefl),         "grndRefl" },	// FRAC
    {   1,   17,  288,        o(x.vfSkyDf),          "vfSkyDf" },	// FRAC
    {   1,   17,  288,       o(x.vfGrndDf),         "vfGrndDf" },	// FRAC
    {   1,   17,   32,        o(x.vfSkyLW),          "vfSkyLW" },	// FRAC
    {   1,   17,   32,       o(x.vfGrndLW),         "vfGrndLW" },	// FRAC
    {   1,   57,   32,        o(x.xs_uval),             "uval" },	// UH_GZ
    {   1,   57,   32,        o(x.xs_UNom),             "UNom" },	// UH_GZ
    {   1,   59,   32,       o(x.xs_UANom),            "UANom" },	// UA
    {   1,   12,   32,  o(x.xs_rSrfNom[0]),       "rSrfNom[0]" },	// FLOAT
    {   1,   12,   32,  o(x.xs_rSrfNom[1]),       "rSrfNom[1]" },	// FLOAT
    {   1,   12,   32,  o(x.xs_hSrfNom[0]),       "hSrfNom[0]" },	// FLOAT
    {   1,   12,   32,  o(x.xs_hSrfNom[1]),       "hSrfNom[1]" },	// FLOAT
    {   1,   57,   32,       o(x.xs_cFctr),            "cFctr" },	// UH_GZ
    {   1,   24,   32,         o(x.iwshad),           "iwshad" },	// TI
    {   1,   24,   32,         o(x.xs_msi),              "msi" },	// TI
    {   1,   12,  548,     o(x.xs_tLrB[0]),          "tLrB[0]" },	// FLOAT
    {   1,   12,  548,     o(x.xs_tLrB[1]),          "tLrB[1]" },	// FLOAT
    {   1,   12,  548,     o(x.xs_tLrB[2]),          "tLrB[2]" },	// FLOAT
    {   1,   12,  548,     o(x.xs_tLrB[3]),          "tLrB[3]" },	// FLOAT
    {   1,   12,  548,     o(x.xs_tLrB[4]),          "tLrB[4]" },	// FLOAT
    {   1,   12,  548,     o(x.xs_tLrB[5]),          "tLrB[5]" },	// FLOAT
    {   1,   12,  548,     o(x.xs_tLrB[6]),          "tLrB[6]" },	// FLOAT
    {   1,   12,  548,     o(x.xs_tLrB[7]),          "tLrB[7]" },	// FLOAT
    {   1,   12,  548,     o(x.xs_tLrB[8]),          "tLrB[8]" },	// FLOAT
    {   1,   12,  548,     o(x.xs_tLrB[9]),          "tLrB[9]" },	// FLOAT
    {   1,    3,   32,        o(x.nsgdist),          "nsgdist" },	// SI
    {   1,    3,   32,o(x.sgdist[0].sd_targTy), "sgdist[0].targTy" },	// SI
    {   1,   24,   33,o(x.sgdist[0].sd_targTi), "sgdist[0].targTi" },	// TI
    {   1,   17,  288,o(x.sgdist[0].sd_FSO),    "sgdist[0].FSO" },	// FRAC
    {   1,   17,  288,o(x.sgdist[0].sd_FSC),    "sgdist[0].FSC" },	// FRAC
    {   1,    3,   32,o(x.sgdist[1].sd_targTy), "sgdist[1].targTy" },	// SI
    {   1,   24,   33,o(x.sgdist[1].sd_targTi), "sgdist[1].targTi" },	// TI
    {   1,   17,  288,o(x.sgdist[1].sd_FSO),    "sgdist[1].FSO" },	// FRAC
    {   1,   17,  288,o(x.sgdist[1].sd_FSC),    "sgdist[1].FSC" },	// FRAC
    {   1,    3,   32,o(x.sgdist[2].sd_targTy), "sgdist[2].targTy" },	// SI
    {   1,   24,   33,o(x.sgdist[2].sd_targTi), "sgdist[2].targTi" },	// TI
    {   1,   17,  288,o(x.sgdist[2].sd_FSO),    "sgdist[2].FSO" },	// FRAC
    {   1,   17,  288,o(x.sgdist[2].sd_FSC),    "sgdist[2].FSC" },	// FRAC
    {   1,    3,   32,o(x.sgdist[3].sd_targTy), "sgdist[3].targTy" },	// SI
    {   1,   24,   33,o(x.sgdist[3].sd_targTi), "sgdist[3].targTi" },	// TI
    {   1,   17,  288,o(x.sgdist[3].sd_FSO),    "sgdist[3].FSO" },	// FRAC
    {   1,   17,  288,o(x.sgdist[3].sd_FSC),    "sgdist[3].FSC" },	// FRAC
    {   1,    3,   32,o(x.sgdist[4].sd_targTy), "sgdist[4].targTy" },	// SI
    {   1,   24,   33,o(x.sgdist[4].sd_targTi), "sgdist[4].targTi" },	// TI
    {   1,   17,  288,o(x.sgdist[4].sd_FSO),    "sgdist[4].FSO" },	// FRAC
    {   1,   17,  288,o(x.sgdist[4].sd_FSC),    "sgdist[4].FSC" },	// FRAC
    {   1,    3,   32,o(x.sgdist[5].sd_targTy), "sgdist[5].targTy" },	// SI
    {   1,   24,   33,o(x.sgdist[5].sd_targTi), "sgdist[5].targTi" },	// TI
    {   1,   17,  288,o(x.sgdist[5].sd_FSO),    "sgdist[5].FSO" },	// FRAC
    {   1,   17,  288,o(x.sgdist[5].sd_FSC),    "sgdist[5].FSC" },	// FRAC
    {   1,    3,   32,o(x.sgdist[6].sd_targTy), "sgdist[6].targTy" },	// SI
    {   1,   24,   33,o(x.sgdist[6].sd_targTi), "sgdist[6].targTi" },	// TI
    {   1,   17,  288,o(x.sgdist[6].sd_FSO),    "sgdist[6].FSO" },	// FRAC
    {   1,   17,  288,o(x.sgdist[6].sd_FSC),    "sgdist[6].FSC" },	// FRAC
    {   1,    3,   32,o(x.sgdist[7].sd_targTy), "sgdist[7].targTy" },	// SI
    {   1,   24,   33,o(x.sgdist[7].sd_targTi), "sgdist[7].targTi" },	// TI
    {   1,   17,  288,o(x.sgdist[7].sd_FSO),    "sgdist[7].FSO" },	// FRAC
    {   1,   17,  288,o(x.sgdist[7].sd_FSC),    "sgdist[7].FSC" },	// FRAC
    {   0,   26,    1,            o(prLen),            "prLen" },	// LEN_GZ
    {   0,   58,    1,             o(prF2),             "prF2" },	// F2_GZ
    {   0,   24,   32,               o(xi),               "xi" },	// TI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPRI

struct SFIR sfirSFI[] =	// fields info for RTSFI
{
 #define o(m) offsetof(SFI,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    3,    1,          o(x.xs_ty),               "ty" },	// SI
    {   0,   28,   33,        o(x.xs_area),             "area" },	// AREA_GZ
    {   0,   40,   33,            o(x.azm),              "azm" },	// ANGLE
    {   0,   40,   33,           o(x.tilt),             "tilt" },	// ANGLE
    {   0,   12,   33,   o(x.xs_dircos[0]),        "dircos[0]" },	// FLOAT
    {   0,   12,   33,   o(x.xs_dircos[1]),        "dircos[1]" },	// FLOAT
    {   0,   12,   33,   o(x.xs_dircos[2]),        "dircos[2]" },	// FLOAT
    {   0,   13,   33,     o(x.xs_depthBG),          "depthBG" },	// FLOAT_GEZ
    {   0,   13,   33,      o(x.xs_height),           "height" },	// FLOAT_GEZ
    {   0,  101,    1,       o(x.xs_model),            "model" },	// SFMODELCH
    {   0,  101,   33,      o(x.xs_modelr),           "modelr" },	// SFMODELCH
    {   0,   12,   33,       o(x.xs_lThkF),            "lThkF" },	// FLOAT
    {   0,   24,   33,            o(x.gti),              "gti" },	// TI
    {   0,   17,  257,            o(x.sco),              "sco" },	// FRAC
    {   0,   17,  257,            o(x.scc),              "scc" },	// FRAC
    {   2,   17,  289,o(x.xs_sbcI.sb_absSlr),      "sbcI.absSlr" },	// FRAC
    {   2,   19,  289,o(x.xs_sbcI.sb_awAbsSlr),    "sbcI.awAbsSlr" },	// DBL
    {   2,   17,   33,o(x.xs_sbcI.sb_epsLW),       "sbcI.epsLW" },	// FRAC
    {   2,   24,   33,  o(x.xs_sbcI.sb_zi),          "sbcI.zi" },	// TI
    {   2,   19,   33,   o(x.xs_sbcI.sb_F),           "sbcI.F" },	// DBL
    {   2,   19,   33,  o(x.xs_sbcI.sb_Fp),          "sbcI.Fp" },	// DBL
    {   2,   19,   33,o(x.xs_sbcI.sb_frRad),       "sbcI.frRad" },	// DBL
    {   2,   19,   33,o(x.xs_sbcI.sb_fSky),        "sbcI.fSky" },	// DBL
    {   2,   19,   33,o(x.xs_sbcI.sb_fAir),        "sbcI.fAir" },	// DBL
    {   2,   12, 1061,o(x.xs_sbcI.sb_hcNat),       "sbcI.hcNat" },	// FLOAT
    {   2,   12, 1061,o(x.xs_sbcI.sb_hcFrc),       "sbcI.hcFrc" },	// FLOAT
    {   2,   12, 1061,o(x.xs_sbcI.sb_hcMult),      "sbcI.hcMult" },	// FLOAT
    {   2,   12, 1061, o(x.xs_sbcI.sb_hxa),         "sbcI.hxa" },	// FLOAT
    {   2,   12, 1061, o(x.xs_sbcI.sb_hxr),         "sbcI.hxr" },	// FLOAT
    {   2,   12, 1061,o(x.xs_sbcI.sb_hxtot),       "sbcI.hxtot" },	// FLOAT
    {   2,   19, 1061,o(x.xs_sbcI.sb_uRat),        "sbcI.uRat" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcI.sb_fRat),        "sbcI.fRat" },	// DBL
    {   2,   19, 1061,  o(x.xs_sbcI.sb_cx),          "sbcI.cx" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcI.sb_sgTarg.st_bm),   "sbcI.sgTarg.bm" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcI.sb_sgTarg.st_df),   "sbcI.sgTarg.df" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcI.sb_sgTarg.st_tot),  "sbcI.sgTarg.tot" },	// DBL
    {   2,   19, 1061,  o(x.xs_sbcI.sb_sg),          "sbcI.sg" },	// DBL
    {   2,   12, 1061,o(x.xs_sbcI.sb_tSrf),        "sbcI.tSrf" },	// FLOAT
    {   2,   12, 1057,o(x.xs_sbcI.sb_tSrfls),      "sbcI.tSrfls" },	// FLOAT
    {   2,   19, 1061,o(x.xs_sbcI.sb_qrAbs),       "sbcI.qrAbs" },	// DBL
    {   2,   12, 1061, o(x.xs_sbcI.sb_txa),         "sbcI.txa" },	// FLOAT
    {   2,   12, 1061, o(x.xs_sbcI.sb_txr),         "sbcI.txr" },	// FLOAT
    {   2,   12, 1061, o(x.xs_sbcI.sb_txe),         "sbcI.txe" },	// FLOAT
    {   2,   19, 1061,   o(x.xs_sbcI.sb_w),           "sbcI.w" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcI.sb_qSrf),        "sbcI.qSrf" },	// DBL
    {   0,   86,   33, o(x.xs_sbcI.sb_pXS),         "sbcI.pXS" },	// XSURFP
    {   0,    1,   33,  o(x.xs_sbcI.sb_si),          "sbcI.si" },	// INT
    {   0,   19,   33,o(x.xs_sbcI.sb_fcWind),      "sbcI.fcWind" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_fcWind2),     "sbcI.fcWind2" },	// DBL
    {   0,   19, 1061, o(x.xs_sbcI.sb_eta),         "sbcI.eta" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_widNom),      "sbcI.widNom" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_lenNom),      "sbcI.lenNom" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_lenCharNat),  "sbcI.lenCharNat" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_lenEffWink),  "sbcI.lenEffWink" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_cosTilt),     "sbcI.cosTilt" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_atvDeg),      "sbcI.atvDeg" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_cosAtv),      "sbcI.cosAtv" },	// DBL
    {   0,  105,   33,o(x.xs_sbcI.sb_hcModel),     "sbcI.hcModel" },	// CONVMODELCH
    {   0,   12,   33,o(x.xs_sbcI.sb_hcLChar),     "sbcI.hcLChar" },	// FLOAT
    {   0,   19,   33,o(x.xs_sbcI.sb_hcConst[0]),  "sbcI.hcConst[0]" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_hcConst[1]),  "sbcI.hcConst[1]" },	// DBL
    {   0,   19,   33,o(x.xs_sbcI.sb_hcConst[2]),  "sbcI.hcConst[2]" },	// DBL
    {   0,  102,   33,o(x.xs_sbcI.sb_groundModel), "sbcI.groundModel" },	// GROUNDMODELCH
    {   0,   13,   33,o(x.xs_sbcI.sb_cTaDbAvgYr),  "sbcI.cTaDbAvgYr" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_cTaDbAvg31),  "sbcI.cTaDbAvg31" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_cTaDbAvg14),  "sbcI.cTaDbAvg14" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_cTaDbAvg07),  "sbcI.cTaDbAvg07" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_cTGrnd),      "sbcI.cTGrnd" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_rGrnd),       "sbcI.rGrnd" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_rConGrnd),    "sbcI.rConGrnd" },	// FLOAT_GEZ
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[0]),  "sbcI.history[0]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[1]),  "sbcI.history[1]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[2]),  "sbcI.history[2]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[3]),  "sbcI.history[3]" },	// FLOAT
    {   1,    1,   33,o(x.xs_sbcI.sb_hCX.hc_iXHist),      "sbcI.iXHist" },	// INT
    {   2,   17,  289,o(x.xs_sbcO.sb_absSlr),      "sbcO.absSlr" },	// FRAC
    {   2,   19,  289,o(x.xs_sbcO.sb_awAbsSlr),    "sbcO.awAbsSlr" },	// DBL
    {   2,   17,   33,o(x.xs_sbcO.sb_epsLW),       "sbcO.epsLW" },	// FRAC
    {   2,   24,   33,  o(x.xs_sbcO.sb_zi),          "sbcO.zi" },	// TI
    {   2,   19,   33,   o(x.xs_sbcO.sb_F),           "sbcO.F" },	// DBL
    {   2,   19,   33,  o(x.xs_sbcO.sb_Fp),          "sbcO.Fp" },	// DBL
    {   2,   19,   33,o(x.xs_sbcO.sb_frRad),       "sbcO.frRad" },	// DBL
    {   2,   19,   33,o(x.xs_sbcO.sb_fSky),        "sbcO.fSky" },	// DBL
    {   2,   19,   33,o(x.xs_sbcO.sb_fAir),        "sbcO.fAir" },	// DBL
    {   2,   12, 1061,o(x.xs_sbcO.sb_hcNat),       "sbcO.hcNat" },	// FLOAT
    {   2,   12, 1061,o(x.xs_sbcO.sb_hcFrc),       "sbcO.hcFrc" },	// FLOAT
    {   2,   12, 1061,o(x.xs_sbcO.sb_hcMult),      "sbcO.hcMult" },	// FLOAT
    {   2,   12, 1061, o(x.xs_sbcO.sb_hxa),         "sbcO.hxa" },	// FLOAT
    {   2,   12, 1061, o(x.xs_sbcO.sb_hxr),         "sbcO.hxr" },	// FLOAT
    {   2,   12, 1061,o(x.xs_sbcO.sb_hxtot),       "sbcO.hxtot" },	// FLOAT
    {   2,   19, 1061,o(x.xs_sbcO.sb_uRat),        "sbcO.uRat" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcO.sb_fRat),        "sbcO.fRat" },	// DBL
    {   2,   19, 1061,  o(x.xs_sbcO.sb_cx),          "sbcO.cx" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcO.sb_sgTarg.st_bm),   "sbcO.sgTarg.bm" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcO.sb_sgTarg.st_df),   "sbcO.sgTarg.df" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcO.sb_sgTarg.st_tot),  "sbcO.sgTarg.tot" },	// DBL
    {   2,   19, 1061,  o(x.xs_sbcO.sb_sg),          "sbcO.sg" },	// DBL
    {   2,   12, 1061,o(x.xs_sbcO.sb_tSrf),        "sbcO.tSrf" },	// FLOAT
    {   2,   12, 1057,o(x.xs_sbcO.sb_tSrfls),      "sbcO.tSrfls" },	// FLOAT
    {   2,   19, 1061,o(x.xs_sbcO.sb_qrAbs),       "sbcO.qrAbs" },	// DBL
    {   2,   12, 1061, o(x.xs_sbcO.sb_txa),         "sbcO.txa" },	// FLOAT
    {   2,   12, 1061, o(x.xs_sbcO.sb_txr),         "sbcO.txr" },	// FLOAT
    {   2,   12, 1061, o(x.xs_sbcO.sb_txe),         "sbcO.txe" },	// FLOAT
    {   2,   19, 1061,   o(x.xs_sbcO.sb_w),           "sbcO.w" },	// DBL
    {   2,   19, 1061,o(x.xs_sbcO.sb_qSrf),        "sbcO.qSrf" },	// DBL
    {   0,   86,   33, o(x.xs_sbcO.sb_pXS),         "sbcO.pXS" },	// XSURFP
    {   0,    1,   33,  o(x.xs_sbcO.sb_si),          "sbcO.si" },	// INT
    {   0,   19,   33,o(x.xs_sbcO.sb_fcWind),      "sbcO.fcWind" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_fcWind2),     "sbcO.fcWind2" },	// DBL
    {   0,   19, 1061, o(x.xs_sbcO.sb_eta),         "sbcO.eta" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_widNom),      "sbcO.widNom" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_lenNom),      "sbcO.lenNom" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_lenCharNat),  "sbcO.lenCharNat" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_lenEffWink),  "sbcO.lenEffWink" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_cosTilt),     "sbcO.cosTilt" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_atvDeg),      "sbcO.atvDeg" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_cosAtv),      "sbcO.cosAtv" },	// DBL
    {   0,  105,   33,o(x.xs_sbcO.sb_hcModel),     "sbcO.hcModel" },	// CONVMODELCH
    {   0,   12,   33,o(x.xs_sbcO.sb_hcLChar),     "sbcO.hcLChar" },	// FLOAT
    {   0,   19,   33,o(x.xs_sbcO.sb_hcConst[0]),  "sbcO.hcConst[0]" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_hcConst[1]),  "sbcO.hcConst[1]" },	// DBL
    {   0,   19,   33,o(x.xs_sbcO.sb_hcConst[2]),  "sbcO.hcConst[2]" },	// DBL
    {   0,  102,   33,o(x.xs_sbcO.sb_groundModel), "sbcO.groundModel" },	// GROUNDMODELCH
    {   0,   13,   33,o(x.xs_sbcO.sb_cTaDbAvgYr),  "sbcO.cTaDbAvgYr" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_cTaDbAvg31),  "sbcO.cTaDbAvg31" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_cTaDbAvg14),  "sbcO.cTaDbAvg14" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_cTaDbAvg07),  "sbcO.cTaDbAvg07" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_cTGrnd),      "sbcO.cTGrnd" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_rGrnd),       "sbcO.rGrnd" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_rConGrnd),    "sbcO.rConGrnd" },	// FLOAT_GEZ
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[0]),  "sbcO.history[0]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[1]),  "sbcO.history[1]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[2]),  "sbcO.history[2]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[3]),  "sbcO.history[3]" },	// FLOAT
    {   1,    1,   33,o(x.xs_sbcO.sb_hCX.hc_iXHist),      "sbcO.iXHist" },	// INT
    {   0,  126,    1,    o(x.xs_fenModel),         "fenModel" },	// FENMODELCH
    {   0,   17,    1,        o(x.xs_SHGC),             "SHGC" },	// FRAC
    {   0,   13,   33,       o(x.xs_fMult),            "fMult" },	// FLOAT_GEZ
    {   0,   57,    1,       o(x.xs_UNFRC),            "UNFRC" },	// UH_GZ
    {   0,    3,    1,        o(x.xs_NGlz),             "NGlz" },	// SI
    {   0,  127,    1,       o(x.xs_exShd),            "exShd" },	// EXSHDCH
    {   0,  128,    1,       o(x.xs_inShd),            "inShd" },	// INSHDCH
    {   0,   13,   33,    o(x.xs_dirtLoss),         "dirtLoss" },	// FLOAT_GEZ
    {   0,  100,   33,        o(x.sfExCnd),          "sfExCnd" },	// EXCNDCH
    {   0,   42, 1025,          o(x.sfExT),            "sfExT" },	// TEMP
    {   0,   24,    1,        o(x.sfAdjZi),          "sfAdjZi" },	// TI
    {   0,   57,   33,             o(x.uI),               "uI" },	// UH_GZ
    {   0,   57,   33,             o(x.uC),               "uC" },	// UH_GZ
    {   0,   57,   33,             o(x.uX),               "uX" },	// UH_GZ
    {   0,   12,   33,          o(x.xs_Rf),               "Rf" },	// FLOAT
    {   0,   17,  257,       o(x.grndRefl),         "grndRefl" },	// FRAC
    {   0,   17,  257,        o(x.vfSkyDf),          "vfSkyDf" },	// FRAC
    {   0,   17,  257,       o(x.vfGrndDf),         "vfGrndDf" },	// FRAC
    {   0,   17,   33,        o(x.vfSkyLW),          "vfSkyLW" },	// FRAC
    {   0,   17,   33,       o(x.vfGrndLW),         "vfGrndLW" },	// FRAC
    {   0,   57,   33,        o(x.xs_uval),             "uval" },	// UH_GZ
    {   0,   57,   33,        o(x.xs_UNom),             "UNom" },	// UH_GZ
    {   0,   59,   33,       o(x.xs_UANom),            "UANom" },	// UA
    {   0,   12,   33,  o(x.xs_rSrfNom[0]),       "rSrfNom[0]" },	// FLOAT
    {   0,   12,   33,  o(x.xs_rSrfNom[1]),       "rSrfNom[1]" },	// FLOAT
    {   0,   12,   33,  o(x.xs_hSrfNom[0]),       "hSrfNom[0]" },	// FLOAT
    {   0,   12,   33,  o(x.xs_hSrfNom[1]),       "hSrfNom[1]" },	// FLOAT
    {   0,   57,   33,       o(x.xs_cFctr),            "cFctr" },	// UH_GZ
    {   0,   24,   33,         o(x.iwshad),           "iwshad" },	// TI
    {   0,   24,   33,         o(x.xs_msi),              "msi" },	// TI
    {   0,   12,  517,     o(x.xs_tLrB[0]),          "tLrB[0]" },	// FLOAT
    {   0,   12,  517,     o(x.xs_tLrB[1]),          "tLrB[1]" },	// FLOAT
    {   0,   12,  517,     o(x.xs_tLrB[2]),          "tLrB[2]" },	// FLOAT
    {   0,   12,  517,     o(x.xs_tLrB[3]),          "tLrB[3]" },	// FLOAT
    {   0,   12,  517,     o(x.xs_tLrB[4]),          "tLrB[4]" },	// FLOAT
    {   0,   12,  517,     o(x.xs_tLrB[5]),          "tLrB[5]" },	// FLOAT
    {   0,   12,  517,     o(x.xs_tLrB[6]),          "tLrB[6]" },	// FLOAT
    {   0,   12,  517,     o(x.xs_tLrB[7]),          "tLrB[7]" },	// FLOAT
    {   0,   12,  517,     o(x.xs_tLrB[8]),          "tLrB[8]" },	// FLOAT
    {   0,   12,  517,     o(x.xs_tLrB[9]),          "tLrB[9]" },	// FLOAT
    {   0,    3,   33,        o(x.nsgdist),          "nsgdist" },	// SI
    {   0,    3,   33,o(x.sgdist[0].sd_targTy), "sgdist[0].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[0].sd_targTi), "sgdist[0].targTi" },	// TI
    {   0,   17,  289,o(x.sgdist[0].sd_FSO),    "sgdist[0].FSO" },	// FRAC
    {   0,   17,  289,o(x.sgdist[0].sd_FSC),    "sgdist[0].FSC" },	// FRAC
    {   0,    3,   33,o(x.sgdist[1].sd_targTy), "sgdist[1].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[1].sd_targTi), "sgdist[1].targTi" },	// TI
    {   0,   17,  289,o(x.sgdist[1].sd_FSO),    "sgdist[1].FSO" },	// FRAC
    {   0,   17,  289,o(x.sgdist[1].sd_FSC),    "sgdist[1].FSC" },	// FRAC
    {   0,    3,   33,o(x.sgdist[2].sd_targTy), "sgdist[2].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[2].sd_targTi), "sgdist[2].targTi" },	// TI
    {   0,   17,  289,o(x.sgdist[2].sd_FSO),    "sgdist[2].FSO" },	// FRAC
    {   0,   17,  289,o(x.sgdist[2].sd_FSC),    "sgdist[2].FSC" },	// FRAC
    {   0,    3,   33,o(x.sgdist[3].sd_targTy), "sgdist[3].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[3].sd_targTi), "sgdist[3].targTi" },	// TI
    {   0,   17,  289,o(x.sgdist[3].sd_FSO),    "sgdist[3].FSO" },	// FRAC
    {   0,   17,  289,o(x.sgdist[3].sd_FSC),    "sgdist[3].FSC" },	// FRAC
    {   0,    3,   33,o(x.sgdist[4].sd_targTy), "sgdist[4].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[4].sd_targTi), "sgdist[4].targTi" },	// TI
    {   0,   17,  289,o(x.sgdist[4].sd_FSO),    "sgdist[4].FSO" },	// FRAC
    {   0,   17,  289,o(x.sgdist[4].sd_FSC),    "sgdist[4].FSC" },	// FRAC
    {   0,    3,   33,o(x.sgdist[5].sd_targTy), "sgdist[5].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[5].sd_targTi), "sgdist[5].targTi" },	// TI
    {   0,   17,  289,o(x.sgdist[5].sd_FSO),    "sgdist[5].FSO" },	// FRAC
    {   0,   17,  289,o(x.sgdist[5].sd_FSC),    "sgdist[5].FSC" },	// FRAC
    {   0,    3,   33,o(x.sgdist[6].sd_targTy), "sgdist[6].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[6].sd_targTi), "sgdist[6].targTi" },	// TI
    {   0,   17,  289,o(x.sgdist[6].sd_FSO),    "sgdist[6].FSO" },	// FRAC
    {   0,   17,  289,o(x.sgdist[6].sd_FSC),    "sgdist[6].FSC" },	// FRAC
    {   0,    3,   33,o(x.sgdist[7].sd_targTy), "sgdist[7].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[7].sd_targTi), "sgdist[7].targTi" },	// TI
    {   0,   17,  289,o(x.sgdist[7].sd_FSO),    "sgdist[7].FSO" },	// FRAC
    {   0,   17,  289,o(x.sgdist[7].sd_FSC),    "sgdist[7].FSC" },	// FRAC
    {   0,    1,    1,          o(sfClass),          "sfClass" },	// INT
    {   0,   28,    1,           o(sfArea),           "sfArea" },	// AREA_GZ
    {   0,   57,    1,              o(sfU),              "sfU" },	// UH_GZ
    {   0,   24,    1,            o(sfCon),            "sfCon" },	// TI
    {   0,   97,    0,             o(sfTy),             "sfTy" },	// OSTYCH
    {   0,   24,    1,            o(sfFnd),            "sfFnd" },	// TI
    {   0,   24,    1,       o(sfFndFloor),       "sfFndFloor" },	// TI
    {   0,   25,    1,       o(sfExpPerim),       "sfExpPerim" },	// LEN
    {   0,   26,    1,            o(width),            "width" },	// LEN_GZ
    {   0,   26,    1,           o(height),           "height" },	// LEN_GZ
    {   0,   14,    1,             o(mult),             "mult" },	// FLOAT_GZ
    {   0,   24,   32,               o(xi),               "xi" },	// TI
    {   0,   24,   32,           o(sf_msi),              "msi" },	// TI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSFI

struct SFIR sfirXSRAT[] =	// fields info for RTXSRAT
{
 #define o(m) offsetof(XSRAT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,   32,          o(nxXsurf),          "nxXsurf" },	// TI
    {   0,   24,   32,        o(nxXsSpecT),        "nxXsSpecT" },	// TI
    {   0,    3,   32,          o(x.xs_ty),               "ty" },	// SI
    {   0,   28,   32,        o(x.xs_area),             "area" },	// AREA_GZ
    {   0,   40,   32,            o(x.azm),              "azm" },	// ANGLE
    {   0,   40,   32,           o(x.tilt),             "tilt" },	// ANGLE
    {   0,   12,   32,   o(x.xs_dircos[0]),        "dircos[0]" },	// FLOAT
    {   0,   12,   32,   o(x.xs_dircos[1]),        "dircos[1]" },	// FLOAT
    {   0,   12,   32,   o(x.xs_dircos[2]),        "dircos[2]" },	// FLOAT
    {   0,   13,   32,     o(x.xs_depthBG),          "depthBG" },	// FLOAT_GEZ
    {   0,   13,   32,      o(x.xs_height),           "height" },	// FLOAT_GEZ
    {   0,  101,   32,       o(x.xs_model),            "model" },	// SFMODELCH
    {   0,  101,   32,      o(x.xs_modelr),           "modelr" },	// SFMODELCH
    {   0,   12,   32,       o(x.xs_lThkF),            "lThkF" },	// FLOAT
    {   0,   24,   32,            o(x.gti),              "gti" },	// TI
    {   0,   17,  288,            o(x.sco),              "sco" },	// FRAC
    {   0,   17,  288,            o(x.scc),              "scc" },	// FRAC
    {   2,   17,  288,o(x.xs_sbcI.sb_absSlr),      "sbcI.absSlr" },	// FRAC
    {   2,   19,  288,o(x.xs_sbcI.sb_awAbsSlr),    "sbcI.awAbsSlr" },	// DBL
    {   2,   17,   32,o(x.xs_sbcI.sb_epsLW),       "sbcI.epsLW" },	// FRAC
    {   2,   24,   32,  o(x.xs_sbcI.sb_zi),          "sbcI.zi" },	// TI
    {   2,   19,   32,   o(x.xs_sbcI.sb_F),           "sbcI.F" },	// DBL
    {   2,   19,   32,  o(x.xs_sbcI.sb_Fp),          "sbcI.Fp" },	// DBL
    {   2,   19,   32,o(x.xs_sbcI.sb_frRad),       "sbcI.frRad" },	// DBL
    {   2,   19,   32,o(x.xs_sbcI.sb_fSky),        "sbcI.fSky" },	// DBL
    {   2,   19,   32,o(x.xs_sbcI.sb_fAir),        "sbcI.fAir" },	// DBL
    {   2,   12, 1060,o(x.xs_sbcI.sb_hcNat),       "sbcI.hcNat" },	// FLOAT
    {   2,   12, 1060,o(x.xs_sbcI.sb_hcFrc),       "sbcI.hcFrc" },	// FLOAT
    {   2,   12, 1060,o(x.xs_sbcI.sb_hcMult),      "sbcI.hcMult" },	// FLOAT
    {   2,   12, 1060, o(x.xs_sbcI.sb_hxa),         "sbcI.hxa" },	// FLOAT
    {   2,   12, 1060, o(x.xs_sbcI.sb_hxr),         "sbcI.hxr" },	// FLOAT
    {   2,   12, 1060,o(x.xs_sbcI.sb_hxtot),       "sbcI.hxtot" },	// FLOAT
    {   2,   19, 1060,o(x.xs_sbcI.sb_uRat),        "sbcI.uRat" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcI.sb_fRat),        "sbcI.fRat" },	// DBL
    {   2,   19, 1060,  o(x.xs_sbcI.sb_cx),          "sbcI.cx" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcI.sb_sgTarg.st_bm),   "sbcI.sgTarg.bm" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcI.sb_sgTarg.st_df),   "sbcI.sgTarg.df" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcI.sb_sgTarg.st_tot),  "sbcI.sgTarg.tot" },	// DBL
    {   2,   19, 1060,  o(x.xs_sbcI.sb_sg),          "sbcI.sg" },	// DBL
    {   2,   12, 1060,o(x.xs_sbcI.sb_tSrf),        "sbcI.tSrf" },	// FLOAT
    {   2,   12, 1056,o(x.xs_sbcI.sb_tSrfls),      "sbcI.tSrfls" },	// FLOAT
    {   2,   19, 1060,o(x.xs_sbcI.sb_qrAbs),       "sbcI.qrAbs" },	// DBL
    {   2,   12, 1060, o(x.xs_sbcI.sb_txa),         "sbcI.txa" },	// FLOAT
    {   2,   12, 1060, o(x.xs_sbcI.sb_txr),         "sbcI.txr" },	// FLOAT
    {   2,   12, 1060, o(x.xs_sbcI.sb_txe),         "sbcI.txe" },	// FLOAT
    {   2,   19, 1060,   o(x.xs_sbcI.sb_w),           "sbcI.w" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcI.sb_qSrf),        "sbcI.qSrf" },	// DBL
    {   0,   86,   32, o(x.xs_sbcI.sb_pXS),         "sbcI.pXS" },	// XSURFP
    {   0,    1,   32,  o(x.xs_sbcI.sb_si),          "sbcI.si" },	// INT
    {   0,   19,   32,o(x.xs_sbcI.sb_fcWind),      "sbcI.fcWind" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_fcWind2),     "sbcI.fcWind2" },	// DBL
    {   0,   19, 1060, o(x.xs_sbcI.sb_eta),         "sbcI.eta" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_widNom),      "sbcI.widNom" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_lenNom),      "sbcI.lenNom" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_lenCharNat),  "sbcI.lenCharNat" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_lenEffWink),  "sbcI.lenEffWink" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_cosTilt),     "sbcI.cosTilt" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_atvDeg),      "sbcI.atvDeg" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_cosAtv),      "sbcI.cosAtv" },	// DBL
    {   0,  105,   33,o(x.xs_sbcI.sb_hcModel),     "sbcI.hcModel" },	// CONVMODELCH
    {   0,   12,   32,o(x.xs_sbcI.sb_hcLChar),     "sbcI.hcLChar" },	// FLOAT
    {   0,   19,   32,o(x.xs_sbcI.sb_hcConst[0]),  "sbcI.hcConst[0]" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_hcConst[1]),  "sbcI.hcConst[1]" },	// DBL
    {   0,   19,   32,o(x.xs_sbcI.sb_hcConst[2]),  "sbcI.hcConst[2]" },	// DBL
    {   0,  102,   33,o(x.xs_sbcI.sb_groundModel), "sbcI.groundModel" },	// GROUNDMODELCH
    {   0,   13,   33,o(x.xs_sbcI.sb_cTaDbAvgYr),  "sbcI.cTaDbAvgYr" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_cTaDbAvg31),  "sbcI.cTaDbAvg31" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_cTaDbAvg14),  "sbcI.cTaDbAvg14" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_cTaDbAvg07),  "sbcI.cTaDbAvg07" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_cTGrnd),      "sbcI.cTGrnd" },	// FLOAT_GEZ
    {   0,   13,   32,o(x.xs_sbcI.sb_rGrnd),       "sbcI.rGrnd" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcI.sb_rConGrnd),    "sbcI.rConGrnd" },	// FLOAT_GEZ
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[0]),  "sbcI.history[0]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[1]),  "sbcI.history[1]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[2]),  "sbcI.history[2]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcI.sb_hCX.hc_history[3]),  "sbcI.history[3]" },	// FLOAT
    {   1,    1,   33,o(x.xs_sbcI.sb_hCX.hc_iXHist),      "sbcI.iXHist" },	// INT
    {   2,   17,  288,o(x.xs_sbcO.sb_absSlr),      "sbcO.absSlr" },	// FRAC
    {   2,   19,  288,o(x.xs_sbcO.sb_awAbsSlr),    "sbcO.awAbsSlr" },	// DBL
    {   2,   17,   32,o(x.xs_sbcO.sb_epsLW),       "sbcO.epsLW" },	// FRAC
    {   2,   24,   32,  o(x.xs_sbcO.sb_zi),          "sbcO.zi" },	// TI
    {   2,   19,   32,   o(x.xs_sbcO.sb_F),           "sbcO.F" },	// DBL
    {   2,   19,   32,  o(x.xs_sbcO.sb_Fp),          "sbcO.Fp" },	// DBL
    {   2,   19,   32,o(x.xs_sbcO.sb_frRad),       "sbcO.frRad" },	// DBL
    {   2,   19,   32,o(x.xs_sbcO.sb_fSky),        "sbcO.fSky" },	// DBL
    {   2,   19,   32,o(x.xs_sbcO.sb_fAir),        "sbcO.fAir" },	// DBL
    {   2,   12, 1060,o(x.xs_sbcO.sb_hcNat),       "sbcO.hcNat" },	// FLOAT
    {   2,   12, 1060,o(x.xs_sbcO.sb_hcFrc),       "sbcO.hcFrc" },	// FLOAT
    {   2,   12, 1060,o(x.xs_sbcO.sb_hcMult),      "sbcO.hcMult" },	// FLOAT
    {   2,   12, 1060, o(x.xs_sbcO.sb_hxa),         "sbcO.hxa" },	// FLOAT
    {   2,   12, 1060, o(x.xs_sbcO.sb_hxr),         "sbcO.hxr" },	// FLOAT
    {   2,   12, 1060,o(x.xs_sbcO.sb_hxtot),       "sbcO.hxtot" },	// FLOAT
    {   2,   19, 1060,o(x.xs_sbcO.sb_uRat),        "sbcO.uRat" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcO.sb_fRat),        "sbcO.fRat" },	// DBL
    {   2,   19, 1060,  o(x.xs_sbcO.sb_cx),          "sbcO.cx" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcO.sb_sgTarg.st_bm),   "sbcO.sgTarg.bm" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcO.sb_sgTarg.st_df),   "sbcO.sgTarg.df" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcO.sb_sgTarg.st_tot),  "sbcO.sgTarg.tot" },	// DBL
    {   2,   19, 1060,  o(x.xs_sbcO.sb_sg),          "sbcO.sg" },	// DBL
    {   2,   12, 1060,o(x.xs_sbcO.sb_tSrf),        "sbcO.tSrf" },	// FLOAT
    {   2,   12, 1056,o(x.xs_sbcO.sb_tSrfls),      "sbcO.tSrfls" },	// FLOAT
    {   2,   19, 1060,o(x.xs_sbcO.sb_qrAbs),       "sbcO.qrAbs" },	// DBL
    {   2,   12, 1060, o(x.xs_sbcO.sb_txa),         "sbcO.txa" },	// FLOAT
    {   2,   12, 1060, o(x.xs_sbcO.sb_txr),         "sbcO.txr" },	// FLOAT
    {   2,   12, 1060, o(x.xs_sbcO.sb_txe),         "sbcO.txe" },	// FLOAT
    {   2,   19, 1060,   o(x.xs_sbcO.sb_w),           "sbcO.w" },	// DBL
    {   2,   19, 1060,o(x.xs_sbcO.sb_qSrf),        "sbcO.qSrf" },	// DBL
    {   0,   86,   32, o(x.xs_sbcO.sb_pXS),         "sbcO.pXS" },	// XSURFP
    {   0,    1,   32,  o(x.xs_sbcO.sb_si),          "sbcO.si" },	// INT
    {   0,   19,   32,o(x.xs_sbcO.sb_fcWind),      "sbcO.fcWind" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_fcWind2),     "sbcO.fcWind2" },	// DBL
    {   0,   19, 1060, o(x.xs_sbcO.sb_eta),         "sbcO.eta" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_widNom),      "sbcO.widNom" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_lenNom),      "sbcO.lenNom" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_lenCharNat),  "sbcO.lenCharNat" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_lenEffWink),  "sbcO.lenEffWink" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_cosTilt),     "sbcO.cosTilt" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_atvDeg),      "sbcO.atvDeg" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_cosAtv),      "sbcO.cosAtv" },	// DBL
    {   0,  105,   33,o(x.xs_sbcO.sb_hcModel),     "sbcO.hcModel" },	// CONVMODELCH
    {   0,   12,   32,o(x.xs_sbcO.sb_hcLChar),     "sbcO.hcLChar" },	// FLOAT
    {   0,   19,   32,o(x.xs_sbcO.sb_hcConst[0]),  "sbcO.hcConst[0]" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_hcConst[1]),  "sbcO.hcConst[1]" },	// DBL
    {   0,   19,   32,o(x.xs_sbcO.sb_hcConst[2]),  "sbcO.hcConst[2]" },	// DBL
    {   0,  102,   33,o(x.xs_sbcO.sb_groundModel), "sbcO.groundModel" },	// GROUNDMODELCH
    {   0,   13,   33,o(x.xs_sbcO.sb_cTaDbAvgYr),  "sbcO.cTaDbAvgYr" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_cTaDbAvg31),  "sbcO.cTaDbAvg31" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_cTaDbAvg14),  "sbcO.cTaDbAvg14" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_cTaDbAvg07),  "sbcO.cTaDbAvg07" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_cTGrnd),      "sbcO.cTGrnd" },	// FLOAT_GEZ
    {   0,   13,   32,o(x.xs_sbcO.sb_rGrnd),       "sbcO.rGrnd" },	// FLOAT_GEZ
    {   0,   13,   33,o(x.xs_sbcO.sb_rConGrnd),    "sbcO.rConGrnd" },	// FLOAT_GEZ
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[0]),  "sbcO.history[0]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[1]),  "sbcO.history[1]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[2]),  "sbcO.history[2]" },	// FLOAT
    {   1,   12,   33,o(x.xs_sbcO.sb_hCX.hc_history[3]),  "sbcO.history[3]" },	// FLOAT
    {   1,    1,   33,o(x.xs_sbcO.sb_hCX.hc_iXHist),      "sbcO.iXHist" },	// INT
    {   0,  126,   33,    o(x.xs_fenModel),         "fenModel" },	// FENMODELCH
    {   0,   17,   33,        o(x.xs_SHGC),             "SHGC" },	// FRAC
    {   0,   13,   32,       o(x.xs_fMult),            "fMult" },	// FLOAT_GEZ
    {   0,   57,   33,       o(x.xs_UNFRC),            "UNFRC" },	// UH_GZ
    {   0,    3,   33,        o(x.xs_NGlz),             "NGlz" },	// SI
    {   0,  127,   33,       o(x.xs_exShd),            "exShd" },	// EXSHDCH
    {   0,  128,   33,       o(x.xs_inShd),            "inShd" },	// INSHDCH
    {   0,   13,   32,    o(x.xs_dirtLoss),         "dirtLoss" },	// FLOAT_GEZ
    {   0,  100,   32,        o(x.sfExCnd),          "sfExCnd" },	// EXCNDCH
    {   0,   42, 1056,          o(x.sfExT),            "sfExT" },	// TEMP
    {   0,   24,   33,        o(x.sfAdjZi),          "sfAdjZi" },	// TI
    {   0,   57,   32,             o(x.uI),               "uI" },	// UH_GZ
    {   0,   57,   32,             o(x.uC),               "uC" },	// UH_GZ
    {   0,   57,   32,             o(x.uX),               "uX" },	// UH_GZ
    {   0,   12,   32,          o(x.xs_Rf),               "Rf" },	// FLOAT
    {   0,   17,  288,       o(x.grndRefl),         "grndRefl" },	// FRAC
    {   0,   17,  288,        o(x.vfSkyDf),          "vfSkyDf" },	// FRAC
    {   0,   17,  288,       o(x.vfGrndDf),         "vfGrndDf" },	// FRAC
    {   0,   17,   32,        o(x.vfSkyLW),          "vfSkyLW" },	// FRAC
    {   0,   17,   32,       o(x.vfGrndLW),         "vfGrndLW" },	// FRAC
    {   0,   57,   32,        o(x.xs_uval),             "uval" },	// UH_GZ
    {   0,   57,   32,        o(x.xs_UNom),             "UNom" },	// UH_GZ
    {   0,   59,   32,       o(x.xs_UANom),            "UANom" },	// UA
    {   0,   12,   32,  o(x.xs_rSrfNom[0]),       "rSrfNom[0]" },	// FLOAT
    {   0,   12,   32,  o(x.xs_rSrfNom[1]),       "rSrfNom[1]" },	// FLOAT
    {   0,   12,   32,  o(x.xs_hSrfNom[0]),       "hSrfNom[0]" },	// FLOAT
    {   0,   12,   32,  o(x.xs_hSrfNom[1]),       "hSrfNom[1]" },	// FLOAT
    {   0,   57,   32,       o(x.xs_cFctr),            "cFctr" },	// UH_GZ
    {   0,   24,   32,         o(x.iwshad),           "iwshad" },	// TI
    {   0,   24,   32,         o(x.xs_msi),              "msi" },	// TI
    {   0,   12,  548,     o(x.xs_tLrB[0]),          "tLrB[0]" },	// FLOAT
    {   0,   12,  548,     o(x.xs_tLrB[1]),          "tLrB[1]" },	// FLOAT
    {   0,   12,  548,     o(x.xs_tLrB[2]),          "tLrB[2]" },	// FLOAT
    {   0,   12,  548,     o(x.xs_tLrB[3]),          "tLrB[3]" },	// FLOAT
    {   0,   12,  548,     o(x.xs_tLrB[4]),          "tLrB[4]" },	// FLOAT
    {   0,   12,  548,     o(x.xs_tLrB[5]),          "tLrB[5]" },	// FLOAT
    {   0,   12,  548,     o(x.xs_tLrB[6]),          "tLrB[6]" },	// FLOAT
    {   0,   12,  548,     o(x.xs_tLrB[7]),          "tLrB[7]" },	// FLOAT
    {   0,   12,  548,     o(x.xs_tLrB[8]),          "tLrB[8]" },	// FLOAT
    {   0,   12,  548,     o(x.xs_tLrB[9]),          "tLrB[9]" },	// FLOAT
    {   0,    3,   32,        o(x.nsgdist),          "nsgdist" },	// SI
    {   0,    3,   32,o(x.sgdist[0].sd_targTy), "sgdist[0].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[0].sd_targTi), "sgdist[0].targTi" },	// TI
    {   0,   17,  288,o(x.sgdist[0].sd_FSO),    "sgdist[0].FSO" },	// FRAC
    {   0,   17,  288,o(x.sgdist[0].sd_FSC),    "sgdist[0].FSC" },	// FRAC
    {   0,    3,   32,o(x.sgdist[1].sd_targTy), "sgdist[1].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[1].sd_targTi), "sgdist[1].targTi" },	// TI
    {   0,   17,  288,o(x.sgdist[1].sd_FSO),    "sgdist[1].FSO" },	// FRAC
    {   0,   17,  288,o(x.sgdist[1].sd_FSC),    "sgdist[1].FSC" },	// FRAC
    {   0,    3,   32,o(x.sgdist[2].sd_targTy), "sgdist[2].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[2].sd_targTi), "sgdist[2].targTi" },	// TI
    {   0,   17,  288,o(x.sgdist[2].sd_FSO),    "sgdist[2].FSO" },	// FRAC
    {   0,   17,  288,o(x.sgdist[2].sd_FSC),    "sgdist[2].FSC" },	// FRAC
    {   0,    3,   32,o(x.sgdist[3].sd_targTy), "sgdist[3].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[3].sd_targTi), "sgdist[3].targTi" },	// TI
    {   0,   17,  288,o(x.sgdist[3].sd_FSO),    "sgdist[3].FSO" },	// FRAC
    {   0,   17,  288,o(x.sgdist[3].sd_FSC),    "sgdist[3].FSC" },	// FRAC
    {   0,    3,   32,o(x.sgdist[4].sd_targTy), "sgdist[4].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[4].sd_targTi), "sgdist[4].targTi" },	// TI
    {   0,   17,  288,o(x.sgdist[4].sd_FSO),    "sgdist[4].FSO" },	// FRAC
    {   0,   17,  288,o(x.sgdist[4].sd_FSC),    "sgdist[4].FSC" },	// FRAC
    {   0,    3,   32,o(x.sgdist[5].sd_targTy), "sgdist[5].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[5].sd_targTi), "sgdist[5].targTi" },	// TI
    {   0,   17,  288,o(x.sgdist[5].sd_FSO),    "sgdist[5].FSO" },	// FRAC
    {   0,   17,  288,o(x.sgdist[5].sd_FSC),    "sgdist[5].FSC" },	// FRAC
    {   0,    3,   32,o(x.sgdist[6].sd_targTy), "sgdist[6].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[6].sd_targTi), "sgdist[6].targTi" },	// TI
    {   0,   17,  288,o(x.sgdist[6].sd_FSO),    "sgdist[6].FSO" },	// FRAC
    {   0,   17,  288,o(x.sgdist[6].sd_FSC),    "sgdist[6].FSC" },	// FRAC
    {   0,    3,   32,o(x.sgdist[7].sd_targTy), "sgdist[7].targTy" },	// SI
    {   0,   24,   33,o(x.sgdist[7].sd_targTi), "sgdist[7].targTi" },	// TI
    {   0,   17,  288,o(x.sgdist[7].sd_FSO),    "sgdist[7].FSO" },	// FRAC
    {   0,   17,  288,o(x.sgdist[7].sd_FSC),    "sgdist[7].FSC" },	// FRAC
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirXSRAT

struct SFIR sfirWSHADRAT[] =	// fields info for RTWSHADRAT
{
 #define o(m) offsetof(WSHADRAT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   26,   32,           o(wWidth),           "wWidth" },	// LEN_GZ
    {   0,   26,   32,          o(wHeight),          "wHeight" },	// LEN_GZ
    {   0,   25,  256,          o(ohDepth),          "ohDepth" },	// LEN
    {   0,   25,  256,         o(ohDistUp),         "ohDistUp" },	// LEN
    {   0,   25,  256,            o(ohExL),            "ohExL" },	// LEN
    {   0,   25,  256,            o(ohExR),            "ohExR" },	// LEN
    {   0,   25,  256,           o(ohFlap),           "ohFlap" },	// LEN
    {   0,   25,  256,          o(lfDepth),          "lfDepth" },	// LEN
    {   0,   25,  256,          o(lfTopUp),          "lfTopUp" },	// LEN
    {   0,   25,  256,          o(lfDistL),          "lfDistL" },	// LEN
    {   0,   25,  256,          o(lfBotUp),          "lfBotUp" },	// LEN
    {   0,   25,  256,          o(rfDepth),          "rfDepth" },	// LEN
    {   0,   25,  256,          o(rfTopUp),          "rfTopUp" },	// LEN
    {   0,   25,  256,          o(rfDistR),          "rfDistR" },	// LEN
    {   0,   25,  256,          o(rfBotUp),          "rfBotUp" },	// LEN
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirWSHADRAT

struct SFIR sfirMASSBC[] =	// fields info for RTMASSBC
{
 #define o(m) offsetof(MASSBC,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   24,   32,           o(bc_msi),              "msi" },	// TI
    {   0,    3,   32,            o(bc_ty),               "ty" },	// SI
    {   0,   24,   32,            o(bc_zi),               "zi" },	// TI
    {   0,   12,  512,          o(bc_exTa),             "exTa" },	// FLOAT
    {   0,   12,  512,          o(bc_exTr),             "exTr" },	// FLOAT
    {   0,   12,   32,         o(bc_rsurf),            "rsurf" },	// FLOAT
    {   0,   12,   32,             o(bc_h),                "h" },	// FLOAT
    {   0,   12,   32,            o(bc_ha),               "ha" },	// FLOAT
    {   0,   83,  512,              o(rIg),              "rIg" },	// RIGTARG
    {   0,   19,  516,           o(qxhnet),           "qxhnet" },	// DBL
    {   0,   19,  132,           o(qxdnet),           "qxdnet" },	// DBL
    {   0,   19,   68,           o(qxmnet),           "qxmnet" },	// DBL
    {   0,   19,  516,           o(qxhtot),           "qxhtot" },	// DBL
    {   0,   19,  132,           o(qxdtot),           "qxdtot" },	// DBL
    {   0,   19,   68,           o(qxmtot),           "qxmtot" },	// DBL
    {   0,   12, 1028,      o(bc_surfTemp),         "surfTemp" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirMASSBC

struct SFIR sfirMSRAT[] =	// fields info for RTMSRAT
{
 #define o(m) offsetof(MSRAT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,   32,           o(ms_sfi),              "sfi" },	// TI
    {   0,    1,   32,       o(ms_sfClass),          "sfClass" },	// INT
    {   0,   24,   32,           o(ms_xri),              "xri" },	// TI
    {   0,   12,   32,          o(ms_area),             "area" },	// FLOAT
    {   0,    6,   32,        o(isSubhrly),        "isSubhrly" },	// BOO
    {   0,    6,   32,          o(ms_isFD),             "isFD" },	// BOO
    {   0,   24,   32,    o(inside.bc_msi),       "inside.msi" },	// TI
    {   0,    3,   32,     o(inside.bc_ty),        "inside.ty" },	// SI
    {   0,   24,   32,     o(inside.bc_zi),        "inside.zi" },	// TI
    {   0,   12,  544,   o(inside.bc_exTa),      "inside.exTa" },	// FLOAT
    {   0,   12,  544,   o(inside.bc_exTr),      "inside.exTr" },	// FLOAT
    {   0,   12,   32,  o(inside.bc_rsurf),     "inside.rsurf" },	// FLOAT
    {   0,   12,   32,      o(inside.bc_h),         "inside.h" },	// FLOAT
    {   0,   12,   32,     o(inside.bc_ha),        "inside.ha" },	// FLOAT
    {   0,   83,  544,       o(inside.rIg),       "inside.rIg" },	// RIGTARG
    {   0,   19,  548,    o(inside.qxhnet),    "inside.qxhnet" },	// DBL
    {   0,   19,  164,    o(inside.qxdnet),    "inside.qxdnet" },	// DBL
    {   0,   19,  100,    o(inside.qxmnet),    "inside.qxmnet" },	// DBL
    {   0,   19,  548,    o(inside.qxhtot),    "inside.qxhtot" },	// DBL
    {   0,   19,  164,    o(inside.qxdtot),    "inside.qxdtot" },	// DBL
    {   0,   19,  100,    o(inside.qxmtot),    "inside.qxmtot" },	// DBL
    {   0,   12, 1060,o(inside.bc_surfTemp),  "inside.surfTemp" },	// FLOAT
    {   0,   24,   32,   o(outside.bc_msi),      "outside.msi" },	// TI
    {   0,    3,   32,    o(outside.bc_ty),       "outside.ty" },	// SI
    {   0,   24,   32,    o(outside.bc_zi),       "outside.zi" },	// TI
    {   0,   12,  544,  o(outside.bc_exTa),     "outside.exTa" },	// FLOAT
    {   0,   12,  544,  o(outside.bc_exTr),     "outside.exTr" },	// FLOAT
    {   0,   12,   32, o(outside.bc_rsurf),    "outside.rsurf" },	// FLOAT
    {   0,   12,   32,     o(outside.bc_h),        "outside.h" },	// FLOAT
    {   0,   12,   32,    o(outside.bc_ha),       "outside.ha" },	// FLOAT
    {   0,   83,  544,      o(outside.rIg),      "outside.rIg" },	// RIGTARG
    {   0,   19,  548,   o(outside.qxhnet),   "outside.qxhnet" },	// DBL
    {   0,   19,  164,   o(outside.qxdnet),   "outside.qxdnet" },	// DBL
    {   0,   19,  100,   o(outside.qxmnet),   "outside.qxmnet" },	// DBL
    {   0,   19,  548,   o(outside.qxhtot),   "outside.qxhtot" },	// DBL
    {   0,   19,  164,   o(outside.qxdtot),   "outside.qxdtot" },	// DBL
    {   0,   19,  100,   o(outside.qxmtot),   "outside.qxmtot" },	// DBL
    {   0,   12, 1060,o(outside.bc_surfTemp), "outside.surfTemp" },	// FLOAT
    {   0,   57,   32,          o(ms_UNom),             "UNom" },	// UH_GZ
    {   0,   12,   32,            o(ms_tc),               "tc" },	// FLOAT
    {   1,   19,  516,       o(ms_qBal[0]),          "qBal[0]" },	// DBL
    {   1,   19,  516,       o(ms_qBal[1]),          "qBal[1]" },	// DBL
    {   1,   19,  516,       o(ms_qBal[2]),          "qBal[2]" },	// DBL
    {   1,   19,  516,       o(ms_qBal[3]),          "qBal[3]" },	// DBL
    {   1,   19,  516,        o(ms_qIE[0]),           "qIE[0]" },	// DBL
    {   1,   19,  516,        o(ms_qIE[1]),           "qIE[1]" },	// DBL
    {   1,   19,  516,        o(ms_qIE[2]),           "qIE[2]" },	// DBL
    {   1,   19,  516,        o(ms_qIE[3]),           "qIE[3]" },	// DBL
    {   1,   19,  516,   o(ms_qIEDelta[0]),      "qIEDelta[0]" },	// DBL
    {   1,   19,  516,   o(ms_qIEDelta[1]),      "qIEDelta[1]" },	// DBL
    {   1,   19,  516,   o(ms_qIEDelta[2]),      "qIEDelta[2]" },	// DBL
    {   1,   19,  516,   o(ms_qIEDelta[3]),      "qIEDelta[3]" },	// DBL
    {   1,    1,  516,      o(ms_flags[0]),         "flags[0]" },	// INT
    {   1,    1,  516,      o(ms_flags[1]),         "flags[1]" },	// INT
    {   1,    1,  516,      o(ms_flags[2]),         "flags[2]" },	// INT
    {   1,    1,  516,      o(ms_flags[3]),         "flags[3]" },	// INT
    {   1,    1, 1028,    o(ms_ebErrCount),       "ebErrCount" },	// INT
    {   0,   69,   32,           o(ms_pMM),              "pMM" },	// MASSMODELP
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirMSRAT

struct SFIR sfirKIVA[] =	// fields info for RTKIVA
{
 #define o(m) offsetof(KIVA,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,   32,         o(kv_floor),            "floor" },	// TI
    {   0,   18,   32,   o(kv_perimWeight),      "perimWeight" },	// FRAC_GZ
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirKIVA

struct SFIR sfirSGI[] =	// fields info for RTSGI
{
 #define o(m) offsetof(SGI,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  129,    1,           o(sgSide),           "sgSide" },	// SIDECH
    {   0,    3,   33,      o(d.sd_targTy),           "targTy" },	// SI
    {   0,   24,    1,      o(d.sd_targTi),           "targTi" },	// TI
    {   0,   17,  257,         o(d.sd_FSO),              "FSO" },	// FRAC
    {   0,   17,  257,         o(d.sd_FSC),              "FSC" },	// FRAC
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSGI

struct SFIR sfirSGRAT[] =	// fields info for RTSGRAT
{
 #define o(m) offsetof(SGRAT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    3,  260,         o(sg_addIt),            "addIt" },	// SI
    {   0,   67,    0,         o(sg_pTarg),            "pTarg" },	// SGTARGP
    {   0,    6,    0,     o(sg_isSubhrly),        "isSubhrly" },	// BOO
    {   0,   20,    0,      o(sg_pControl),         "pControl" },	// FLOATP
    {   0,   19,  260,     o(sg_bmXBmF[0]),        "bmXBmF[0]" },	// DBL
    {   0,   19,  260,     o(sg_bmXBmF[1]),        "bmXBmF[1]" },	// DBL
    {   0,   19,  260,     o(sg_bmXBmF[2]),        "bmXBmF[2]" },	// DBL
    {   0,   19,  260,     o(sg_bmXBmF[3]),        "bmXBmF[3]" },	// DBL
    {   0,   19,  260,     o(sg_bmXBmF[4]),        "bmXBmF[4]" },	// DBL
    {   0,   19,  260,     o(sg_bmXBmF[5]),        "bmXBmF[5]" },	// DBL
    {   0,   19,  260,     o(sg_bmXBmF[6]),        "bmXBmF[6]" },	// DBL
    {   0,   19,  260,     o(sg_bmXBmF[7]),        "bmXBmF[7]" },	// DBL
    {   0,   19,  260,     o(sg_bmXBmF[8]),        "bmXBmF[8]" },	// DBL
    {   0,   19,  260,     o(sg_bmXBmF[9]),        "bmXBmF[9]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[10]),       "bmXBmF[10]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[11]),       "bmXBmF[11]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[12]),       "bmXBmF[12]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[13]),       "bmXBmF[13]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[14]),       "bmXBmF[14]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[15]),       "bmXBmF[15]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[16]),       "bmXBmF[16]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[17]),       "bmXBmF[17]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[18]),       "bmXBmF[18]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[19]),       "bmXBmF[19]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[20]),       "bmXBmF[20]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[21]),       "bmXBmF[21]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[22]),       "bmXBmF[22]" },	// DBL
    {   0,   19,  260,    o(sg_bmXBmF[23]),       "bmXBmF[23]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[0]),        "dfXBmF[0]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[1]),        "dfXBmF[1]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[2]),        "dfXBmF[2]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[3]),        "dfXBmF[3]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[4]),        "dfXBmF[4]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[5]),        "dfXBmF[5]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[6]),        "dfXBmF[6]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[7]),        "dfXBmF[7]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[8]),        "dfXBmF[8]" },	// DBL
    {   0,   19,  260,     o(sg_dfXBmF[9]),        "dfXBmF[9]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[10]),       "dfXBmF[10]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[11]),       "dfXBmF[11]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[12]),       "dfXBmF[12]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[13]),       "dfXBmF[13]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[14]),       "dfXBmF[14]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[15]),       "dfXBmF[15]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[16]),       "dfXBmF[16]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[17]),       "dfXBmF[17]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[18]),       "dfXBmF[18]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[19]),       "dfXBmF[19]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[20]),       "dfXBmF[20]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[21]),       "dfXBmF[21]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[22]),       "dfXBmF[22]" },	// DBL
    {   0,   19,  260,    o(sg_dfXBmF[23]),       "dfXBmF[23]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[0]),        "dfXDfF[0]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[1]),        "dfXDfF[1]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[2]),        "dfXDfF[2]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[3]),        "dfXDfF[3]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[4]),        "dfXDfF[4]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[5]),        "dfXDfF[5]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[6]),        "dfXDfF[6]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[7]),        "dfXDfF[7]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[8]),        "dfXDfF[8]" },	// DBL
    {   0,   19,  260,     o(sg_dfXDfF[9]),        "dfXDfF[9]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[10]),       "dfXDfF[10]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[11]),       "dfXDfF[11]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[12]),       "dfXDfF[12]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[13]),       "dfXDfF[13]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[14]),       "dfXDfF[14]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[15]),       "dfXDfF[15]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[16]),       "dfXDfF[16]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[17]),       "dfXDfF[17]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[18]),       "dfXDfF[18]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[19]),       "dfXDfF[19]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[20]),       "dfXDfF[20]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[21]),       "dfXDfF[21]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[22]),       "dfXDfF[22]" },	// DBL
    {   0,   19,  260,    o(sg_dfXDfF[23]),       "dfXDfF[23]" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSGRAT

struct SFIR sfirGT[] =	// fields info for RTGT
{
 #define o(m) offsetof(GT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   17,    1,           o(gtSHGC),           "gtSHGC" },	// FRAC
    {   0,   17,  256,           o(gtSMSO),           "gtSMSO" },	// FRAC
    {   0,   17,  256,           o(gtSMSC),           "gtSMSC" },	// FRAC
    {   0,   13,    1,          o(gtFMult),          "gtFMult" },	// FLOAT_GEZ
    {   0,   12,    3,    o(gtPySHGC.k[0]),    "gtPySHGC.k[0]" },	// FLOAT
    {   0,   12,    3,    o(gtPySHGC.k[1]),    "gtPySHGC.k[1]" },	// FLOAT
    {   0,   12,    3,    o(gtPySHGC.k[2]),    "gtPySHGC.k[2]" },	// FLOAT
    {   0,   12,    3,    o(gtPySHGC.k[3]),    "gtPySHGC.k[3]" },	// FLOAT
    {   0,   12,    3,    o(gtPySHGC.k[4]),    "gtPySHGC.k[4]" },	// FLOAT
    {   0,   12,    3,    o(gtPySHGC.k[5]),    "gtPySHGC.k[5]" },	// FLOAT
    {   0,   17,    1,         o(gtDMSHGC),         "gtDMSHGC" },	// FRAC
    {   0,   17,    1,        o(gtDMRBSol),        "gtDMRBSol" },	// FRAC
    {   0,   57,    1,              o(gtU),              "gtU" },	// UH_GZ
    {   0,   57,    1,          o(gtUNFRC),          "gtUNFRC" },	// UH_GZ
    {   0,    3,    1,           o(gtNGlz),           "gtNGlz" },	// SI
    {   0,  126,    1,       o(gtFenModel),       "gtFenModel" },	// FENMODELCH
    {   0,  127,    1,          o(gtExShd),          "gtExShd" },	// EXSHDCH
    {   0,  128,    1,          o(gtInShd),          "gtInShd" },	// INSHDCH
    {   0,   13,    1,       o(gtDirtLoss),       "gtDirtLoss" },	// FLOAT_GEZ
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirGT

struct SFIR sfirCON[] =	// fields info for RTCON
{
 #define o(m) offsetof(CON,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   56,    1,             o(conU),             "conU" },	// UH
    {   0,    3,   32,              o(nLr),              "nLr" },	// SI
    {   0,    3,   32,           o(nFrmLr),           "nFrmLr" },	// SI
    {   0,   61,   32,                o(r),                "r" },	// RES_GZ
    {   0,   64,   32,               o(hc),               "hc" },	// HC_AREA
    {   0,   61,   32,             o(rNom),             "rNom" },	// RES_GZ
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirCON

struct SFIR sfirLR[] =	// fields info for RTLR
{
 #define o(m) offsetof(LR,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   26,    1,           o(lr_thk),              "thk" },	// LEN_GZ
    {   0,   24,    1,          o(lr_mati),             "mati" },	// TI
    {   0,   24,    1,       o(lr_frmMati),          "frmMati" },	// TI
    {   0,   17,    1,       o(lr_frmFrac),          "frmFrac" },	// FRAC
    {   0,   55,   32,           o(lr_uvy),              "uvy" },	// CNDVY_GZ
    {   0,   61,   32,             o(lr_r),                "r" },	// RES_GZ
    {   0,   65,   32,           o(lr_vhc),              "vhc" },	// HC_VOL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirLR

struct SFIR sfirMAT[] =	// fields info for RTMAT
{
 #define o(m) offsetof(MAT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   26,    1,           o(mt_thk),              "thk" },	// LEN_GZ
    {   0,   55,    1,          o(mt_cond),             "cond" },	// CNDVY_GZ
    {   0,   12,    1,      o(mt_condTRat),         "condTRat" },	// FLOAT
    {   0,   12,    1,        o(mt_condCT),           "condCT" },	// FLOAT
    {   0,   62,    1,          o(mt_spHt),             "spHt" },	// SPECHEAT
    {   0,   54,    1,          o(mt_dens),             "dens" },	// DENSITY
    {   0,   60,    1,          o(mt_rNom),             "rNom" },	// RESVY_GZ
    {   0,   65,   32,           o(mt_vhc),              "vhc" },	// HC_VOL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirMAT

struct SFIR sfirFOUNDATION[] =	// fields info for RTFOUNDATION
{
 #define o(m) offsetof(FOUNDATION,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   25,    1,    o(fd_wlHtAbvGrd),       "wlHtAbvGrd" },	// LEN
    {   0,   25,    1,    o(fd_wlDpBlwSlb),       "wlDpBlwSlb" },	// LEN
    {   0,   24,    1,      o(fd_ftWlConi),         "ftWlConi" },	// TI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirFOUNDATION

struct SFIR sfirFNDBLOCK[] =	// fields info for RTFNDBLOCK
{
 #define o(m) offsetof(FNDBLOCK,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,    1,          o(fb_mati),             "mati" },	// TI
    {   0,  103,    1,         o(fb_x1Ref),            "x1Ref" },	// FBXREFCH
    {   0,  104,    1,         o(fb_z1Ref),            "z1Ref" },	// FBZREFCH
    {   0,   12,    1,            o(fb_x1),               "x1" },	// FLOAT
    {   0,   12,    1,            o(fb_z1),               "z1" },	// FLOAT
    {   0,  103,    1,         o(fb_x2Ref),            "x2Ref" },	// FBXREFCH
    {   0,  104,    1,         o(fb_z2Ref),            "z2Ref" },	// FBZREFCH
    {   0,   12,    1,            o(fb_x2),               "x2" },	// FLOAT
    {   0,   12,    1,            o(fb_z2),               "z2" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirFNDBLOCK

struct SFIR sfirRFI[] =	// fields info for RTRFI
{
 #define o(m) offsetof(RFI,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   11,    1,         o(fileName),         "fileName" },	// CHP
    {   0,  131,   32,         o(fileStat),         "fileStat" },	// FILESTATCH
    {   0,   89,    1,          o(pageFmt),          "pageFmt" },	// NOYESCH
    {   0,    3,   32,  o(fileStatChecked),  "fileStatChecked" },	// SI
    {   0,    3,   32,        o(overWrite),        "overWrite" },	// SI
    {   0,    3,   32,      o(wasNotEmpty),      "wasNotEmpty" },	// SI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirRFI

struct SFIR sfirRI[] =	// fields info for RTRI
{
 #define o(m) offsetof(RI,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,    1,               o(zi),               "zi" },	// TI
    {   0,   24,    1,             o(mtri),             "mtri" },	// TI
    {   0,   24,    1,              o(ahi),              "ahi" },	// TI
    {   0,   24,    1,              o(tui),              "tui" },	// TI
    {   0,   24,    1,       o(ri_dhwMtri),          "dhwMtri" },	// TI
    {   0,   24,    1,        o(ri_afMtri),           "afMtri" },	// TI
    {   0,    6,    1,         o(isExport),         "isExport" },	// BOO
    {   0,  132,    0,             o(rpTy),             "rpTy" },	// RPTYCH
    {   0,  130,    0,           o(rpFreq),           "rpFreq" },	// IVLCH
    {   0,    7,    1,         o(rpDayBeg),         "rpDayBeg" },	// DOY
    {   0,    7,    1,         o(rpDayEnd),         "rpDayEnd" },	// DOY
    {   0,   14,    1,          o(rpBtuSf),          "rpBtuSf" },	// FLOAT_GZ
    {   0,   10, 1028,           o(rpCond),           "rpCond" },	// LI
    {   0,   11,    1,          o(rpTitle),          "rpTitle" },	// CHP
    {   0,    3,    1,            o(rpCpl),            "rpCpl" },	// SI
    {   0,  133,    1,         o(rpHeader),         "rpHeader" },	// RPTHDCH
    {   0,   89,    1,         o(rpFooter),         "rpFooter" },	// NOYESCH
    {   1,    3,   32,         o(putAtEnd),         "putAtEnd" },	// SI
    {   0,   24,   32,             o(coli),             "coli" },	// TI
    {   0,    3,   32,             o(nCol),             "nCol" },	// SI
    {   0,    3,   32,              o(wid),              "wid" },	// SI
    {   0,    1,   32,              o(vrh),              "vrh" },	// INT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirRI

struct SFIR sfirCOL[] =	// fields info for RTCOL
{
 #define o(m) offsetof(COL,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   11,    1,          o(colHead),          "colHead" },	// CHP
    {   0,    4,    1,           o(colGap),           "colGap" },	// SI_GEZ
    {   0,    3,    1,           o(colWid),           "colWid" },	// SI
    {   0,    3,    1,           o(colDec),           "colDec" },	// SI
    {   0,  134,    1,          o(colJust),          "colJust" },	// JUSTCH
    {   0,  135, 1032,           o(colVal),           "colVal" },	// VALNDT
    {   0,   24,    0,           o(nxColi),           "nxColi" },	// TI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirCOL

struct SFIR sfirDVRI[] =	// fields info for RTDVRI
{
 #define o(m) offsetof(DVRI,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,   32,             o(mtri),             "mtri" },	// TI
    {   0,   24,   32,       o(dv_dhwMtri),          "dhwMtri" },	// TI
    {   0,   24,   32,        o(dv_afMtri),           "afMtri" },	// TI
    {   0,   24,   32,              o(ahi),              "ahi" },	// TI
    {   0,   24,    1,              o(tui),              "tui" },	// TI
    {   0,    6,   32,         o(isExport),         "isExport" },	// BOO
    {   0,    6,   32,            o(isAll),            "isAll" },	// BOO
    {   0,  132,   32,             o(rpTy),             "rpTy" },	// RPTYCH
    {   0,  130,   32,           o(rpFreq),           "rpFreq" },	// IVLCH
    {   0,    7,   32,         o(rpDayBeg),         "rpDayBeg" },	// DOY
    {   0,    7,   32,         o(rpDayEnd),         "rpDayEnd" },	// DOY
    {   0,   12,   32,          o(rpBtuSf),          "rpBtuSf" },	// FLOAT
    {   0,   10, 1024,           o(rpCond),           "rpCond" },	// LI
    {   0,    3,   32,      o(rpCondGiven),      "rpCondGiven" },	// SI
    {   0,   11,   32,          o(rpTitle),          "rpTitle" },	// CHP
    {   0,    3,   32,            o(rpCpl),            "rpCpl" },	// SI
    {   0,  133,   32,         o(rpHeader),         "rpHeader" },	// RPTHDCH
    {   0,   89,   32,         o(rpFooter),         "rpFooter" },	// NOYESCH
    {   0,   24,   32,             o(coli),             "coli" },	// TI
    {   0,    3,   32,             o(nCol),             "nCol" },	// SI
    {   0,    3,   32,              o(wid),              "wid" },	// SI
    {   0,    1,   32,              o(vrh),              "vrh" },	// INT
    {   0,   24,  128,          o(nextNow),          "nextNow" },	// TI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDVRI

struct SFIR sfirIMPF[] =	// fields info for RTIMPF
{
 #define o(m) offsetof(IMPF,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   11,    2,         o(fileName),         "fileName" },	// CHP
    {   0,   11,    2,          o(imTitle),          "imTitle" },	// CHP
    {   0,    3,    0,     o(imPhaseSpare),     "imPhaseSpare" },	// SI
    {   0,  130,    1,           o(imFreq),           "imFreq" },	// IVLCH
    {   0,   89,    2,        o(hasHeader),        "hasHeader" },	// NOYESCH
    {   1,   89,    1,         o(imBinary),         "imBinary" },	// NOYESCH
    {   0,   24,   32,           o(iffnmi),           "iffnmi" },	// TI
    {   0,    6,   32,           o(isOpen),           "isOpen" },	// BOO
    {   0,    3,   32,               o(fh),               "fh" },	// SI
    {   0,   10,   32,        o(posEndHdr),        "posEndHdr" },	// LI
    {   1,   11,   32,              o(buf),              "buf" },	// CHP
    {   0,    9,   32,            o(bufSz),            "bufSz" },	// USI
    {   0,    9,  512,             o(bufN),             "bufN" },	// USI
    {   0,    6,  512,          o(eofRead),          "eofRead" },	// BOO
    {   0,    6,  512,              o(eof),              "eof" },	// BOO
    {   0,    9,  512,            o(bufI1),            "bufI1" },	// USI
    {   0,    9,  512,            o(bufI2),            "bufI2" },	// USI
    {   0,    9,  512,           o(lineNo),           "lineNo" },	// USI
    {   0,    9,   32,     o(lineNoEndHdr),     "lineNoEndHdr" },	// USI
    {   0,    3,  516,   o(nFieldsScanned),   "nFieldsScanned" },	// SI
    {   0,    6,  516,       o(eorScanned),       "eorScanned" },	// BOO
    {   1,    9,   32,          o(fnrtNAl),          "fnrtNAl" },	// USI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirIMPF

struct SFIR sfirIFFNM[] =	// fields info for RTIFFNM
{
 #define o(m) offsetof(IFFNM,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,    1,            o(impfi),            "impfi" },	// TI
    {   0,    3,    1,            o(fnmiN),            "fnmiN" },	// SI
    {   1,    3,    1,          o(fnmtNAl),          "fnmtNAl" },	// SI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirIFFNM

struct SFIR sfirAUSZ[] =	// fields info for RTAUSZ
{
 #define o(m) offsetof(AUSZ,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    6,   32,        o(az_active),        "az_active" },	// BOO
    {   1,   20,   36,            o(az_px),            "az_px" },	// FLOATP
    {   1,    6,   36,            o(isNeg),            "isNeg" },	// BOO
    {   0,   12, 1028,             o(az_a),             "az_a" },	// FLOAT
    {   0,   12, 1028,             o(az_b),             "az_b" },	// FLOAT
    {   0,   12, 1028,             o(ldPk),             "ldPk" },	// FLOAT
    {   0,   12,  132,           o(ldPkAs),           "ldPkAs" },	// FLOAT
    {   0,   12,  132,          o(ldPkAs1),          "ldPkAs1" },	// FLOAT
    {   0,   12, 1028,            o(plrPk),            "plrPk" },	// FLOAT
    {   0,   12,  132,          o(plrPkAs),          "plrPkAs" },	// FLOAT
    {   0,   12, 1028,              o(xPk),              "xPk" },	// FLOAT
    {   0,   12,  132,            o(xPkAs),            "xPkAs" },	// FLOAT
    {   1,   11,  128,         o(az_doing),         "az_doing" },	// CHP
    {   1,   12, 1028,               o(e1),               "e1" },	// FLOAT
    {   1,   12, 1028,               o(e2),               "e2" },	// FLOAT
    {   1,   12, 1028,             o(orig),             "orig" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAUSZ

struct SFIR sfirCONVERGER[] =	// fields info for RTCONVERGER
{
 #define o(m) offsetof(CONVERGER,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    6, 1028,          o(isSetup),          "isSetup" },	// BOO
    {   0,   19, 1028,     o(minSigChange),     "minSigChange" },	// DBL
    {   0,   19, 1028,       o(minMaxIncr),       "minMaxIncr" },	// DBL
    {   0,   19, 1028,          o(maxIncr),          "maxIncr" },	// DBL
    {   0,   19, 1028,               o(v2),               "v2" },	// DBL
    {   0,   19,    0,               o(v1),               "v1" },	// DBL
    {   0,   19,    0,               o(v0),               "v0" },	// DBL
    {   0,   19, 1028,               o(d1),               "d1" },	// DBL
    {   0,   19,    0,               o(d0),               "d0" },	// DBL
    {   0,    3, 1028,             o(nRev),             "nRev" },	// SI
    {   0,    3, 1028,         o(nitSince),         "nitSince" },	// SI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirCONVERGER

struct SFIR sfirAIRSTATE[] =	// fields info for RTAIRSTATE
{
 #define o(m) offsetof(AIRSTATE,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   19, 1028,           o(as_tdb),              "tdb" },	// DBL
    {   0,   19, 1028,             o(as_w),                "w" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAIRSTATE

struct SFIR sfirAIRFLOW[] =	// fields info for RTAIRFLOW
{
 #define o(m) offsetof(AIRFLOW,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,   19, 1028,           o(as_tdb),              "tdb" },	// DBL
    {   2,   19, 1028,             o(as_w),                "w" },	// DBL
    {   0,   19, 1028,           o(af_amf),              "amf" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAIRFLOW

struct SFIR sfirFAN[] =	// fields info for RTFAN
{
 #define o(m) offsetof(FAN,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,  140,    2,            o(fanTy),            "fanTy" },	// FANTYCH
    {   0,   33, 1028,             o(vfDs),             "vfDs" },	// AFLOW_GZ
    {   0,   32,    2,          o(vfDs_As),          "vfDs_As" },	// AFLOW
    {   0,   32,    2,       o(vfDs_AsNov),       "vfDs_AsNov" },	// AFLOW
    {   0,   12,    2,            o(vfMxF),            "vfMxF" },	// FLOAT
    {   0,   37,   32,            o(press),            "press" },	// PRESAIR_GEZ
    {   0,   18,   32,              o(eff),              "eff" },	// FRAC_GZ
    {   0,   53,   32,         o(shaftPwr),         "shaftPwr" },	// BHP_GZ
    {   0,   14,   32,          o(elecPwr),          "elecPwr" },	// FLOAT_GZ
    {   0,  142,   32,         o(fn_motTy),            "motTy" },	// MOTTYCH
    {   0,   18,    2,           o(motEff),           "motEff" },	// FRAC_GZ
    {   0,  143,    2,           o(motPos),           "motPos" },	// MOTPOSCH
    {   0,   12,    2,     o(curvePy.k[0]),     "curvePy.k[0]" },	// FLOAT
    {   0,   12,    2,     o(curvePy.k[1]),     "curvePy.k[1]" },	// FLOAT
    {   0,   12,    2,     o(curvePy.k[2]),     "curvePy.k[2]" },	// FLOAT
    {   0,   12,    2,     o(curvePy.k[3]),     "curvePy.k[3]" },	// FLOAT
    {   0,   12,    2,     o(curvePy.k[4]),     "curvePy.k[4]" },	// FLOAT
    {   0,   12,    2,     o(curvePy.k[5]),     "curvePy.k[5]" },	// FLOAT
    {   0,   24,    1,          o(fn_mtri),             "mtri" },	// TI
    {   0,  136,    2,        o(fn_endUse),           "endUse" },	// ENDUSECH
    {   0,    6,   32,             o(ausz),             "ausz" },	// BOO
    {   0,   48, 1024,         o(outPower),         "outPower" },	// POWER
    {   0,   48, 1024,         o(airPower),         "airPower" },	// POWER
    {   0,   35, 1028,              o(cMx),              "cMx" },	// CFLOW
    {   0,   35, 1028,                o(c),                "c" },	// CFLOW
    {   0,   42, 1028,                o(t),                "t" },	// TEMP
    {   0,   17, 1028,             o(frOn),             "frOn" },	// FRAC
    {   0,   48, 1028,                o(p),                "p" },	// POWER
    {   0,   48, 1028,                o(q),                "q" },	// POWER
    {   0,   44, 1028,               o(dT),               "dT" },	// TEMPDIFF
    {   0,   48, 1028,          o(qAround),          "qAround" },	// POWER
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirFAN

struct SFIR sfirZNISUB[] =	// fields info for RTZNISUB
{
 #define o(m) offsetof(ZNISUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   98,    1,          o(znModel),          "znModel" },	// ZNMODELCH
    {   0,   28,    1,           o(znArea),           "znArea" },	// AREA_GZ
    {   0,   31,    1,            o(znVol),            "znVol" },	// VOL_GZ
    {   0,   12,    1,        o(zn_floorZ),           "floorZ" },	// FLOAT
    {   0,   26,   32,     o(zn_ceilingHt),        "ceilingHt" },	// LEN_GZ
    {   0,   63,    1,           o(znCAir),           "znCAir" },	// HC_GZ
    {   1,   63,   32,         o(znCAirSh),         "znCAirSh" },	// HC_GZ
    {   0,   14,   32,       o(zn_HIRatio),          "HIRatio" },	// FLOAT_GZ
    {   0,   40,    1,            o(znAzm),            "znAzm" },	// ANGLE
    {   0,    6,    1,        o(plenumRet),        "plenumRet" },	// BOO
    {   0,   17,  512,             o(znSC),             "znSC" },	// FRAC
    {   0,   43, 1024,             o(znTH),             "znTH" },	// TEMP_GZ
    {   0,   43, 1024,             o(znTD),             "znTD" },	// TEMP_GZ
    {   0,   43, 1024,             o(znTC),             "znTC" },	// TEMP_GZ
    {   0,   12,  512,           o(znQMxH),           "znQMxH" },	// FLOAT
    {   0,   12,   32,      o(znQMxHRated),      "znQMxHRated" },	// FLOAT
    {   0,   12,  512,           o(znQMxC),           "znQMxC" },	// FLOAT
    {   0,   12,   32,      o(znQMxCRated),      "znQMxCRated" },	// FLOAT
    {   0,   24,   32,           o(zn_rsi),              "rsi" },	// TI
    {   0,   12,  512,        o(zn_hcFrcF),           "hcFrcF" },	// FLOAT
    {   0,   12, 1028,        o(zn_hcAirX),           "hcAirX" },	// FLOAT
    {   0,    1,   32,   o(zn_hcAirXIsSet),      "hcAirXIsSet" },	// INT
    {   0,   17,  512,          o(xfanFOn),          "xfanFOn" },	// FRAC
    {   0,  140,    3,       o(xfan.fanTy),       "xfan.fanTy" },	// FANTYCH
    {   0,   33, 1029,        o(xfan.vfDs),        "xfan.vfDs" },	// AFLOW_GZ
    {   0,   32,    3,     o(xfan.vfDs_As),     "xfan.vfDs_As" },	// AFLOW
    {   0,   32,    3,  o(xfan.vfDs_AsNov),  "xfan.vfDs_AsNov" },	// AFLOW
    {   0,   12,    3,       o(xfan.vfMxF),       "xfan.vfMxF" },	// FLOAT
    {   0,   37,   33,       o(xfan.press),       "xfan.press" },	// PRESAIR_GEZ
    {   0,   18,   33,         o(xfan.eff),         "xfan.eff" },	// FRAC_GZ
    {   0,   53,   33,    o(xfan.shaftPwr),    "xfan.shaftPwr" },	// BHP_GZ
    {   0,   14,   33,     o(xfan.elecPwr),     "xfan.elecPwr" },	// FLOAT_GZ
    {   0,  142,   33,    o(xfan.fn_motTy),       "xfan.motTy" },	// MOTTYCH
    {   0,   18,    3,      o(xfan.motEff),      "xfan.motEff" },	// FRAC_GZ
    {   0,  143,    3,      o(xfan.motPos),      "xfan.motPos" },	// MOTPOSCH
    {   0,   12,    3,o(xfan.curvePy.k[0]),"xfan.curvePy.k[0]" },	// FLOAT
    {   0,   12,    3,o(xfan.curvePy.k[1]),"xfan.curvePy.k[1]" },	// FLOAT
    {   0,   12,    3,o(xfan.curvePy.k[2]),"xfan.curvePy.k[2]" },	// FLOAT
    {   0,   12,    3,o(xfan.curvePy.k[3]),"xfan.curvePy.k[3]" },	// FLOAT
    {   0,   12,    3,o(xfan.curvePy.k[4]),"xfan.curvePy.k[4]" },	// FLOAT
    {   0,   12,    3,o(xfan.curvePy.k[5]),"xfan.curvePy.k[5]" },	// FLOAT
    {   0,   24,    1,     o(xfan.fn_mtri),        "xfan.mtri" },	// TI
    {   0,  136,    3,   o(xfan.fn_endUse),      "xfan.endUse" },	// ENDUSECH
    {   0,    6,   33,        o(xfan.ausz),        "xfan.ausz" },	// BOO
    {   0,   48, 1025,    o(xfan.outPower),    "xfan.outPower" },	// POWER
    {   0,   48, 1025,    o(xfan.airPower),    "xfan.airPower" },	// POWER
    {   0,   35, 1029,         o(xfan.cMx),         "xfan.cMx" },	// CFLOW
    {   0,   35, 1029,           o(xfan.c),           "xfan.c" },	// CFLOW
    {   0,   42, 1029,           o(xfan.t),           "xfan.t" },	// TEMP
    {   0,   17, 1029,        o(xfan.frOn),        "xfan.frOn" },	// FRAC
    {   0,   48, 1029,           o(xfan.p),           "xfan.p" },	// POWER
    {   0,   48, 1029,           o(xfan.q),           "xfan.q" },	// POWER
    {   0,   44, 1029,          o(xfan.dT),          "xfan.dT" },	// TEMPDIFF
    {   0,   48, 1029,     o(xfan.qAround),     "xfan.qAround" },	// POWER
    {   0,   13,  512,            o(infAC),            "infAC" },	// FLOAT_GEZ
    {   0,   30,  512,           o(infELA),           "infELA" },	// AREA2
    {   0,    5,    0,       o(zn_infShld),          "infShld" },	// SI_GZ
    {   0,    5,    0,    o(zn_infStories),       "infStories" },	// SI_GZ
    {   0,   26,   32,         o(zn_eaveZ),            "eaveZ" },	// LEN_GZ
    {   0,   12, 1024,      o(zn_windFLkg),         "windFLkg" },	// FLOAT
    {   0,   24,   32,        o(zn_afMtri),           "afMtri" },	// TI
    {   0,    1,   32,            o(vrZdd),            "vrZdd" },	// INT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirZNISUB

struct SFIR sfirZNI[] =	// fields info for RTZNI
{
 #define o(m) offsetof(ZNI,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   98,    1,        o(i.znModel),          "znModel" },	// ZNMODELCH
    {   0,   28,    1,         o(i.znArea),           "znArea" },	// AREA_GZ
    {   0,   31,    1,          o(i.znVol),            "znVol" },	// VOL_GZ
    {   0,   12,    1,      o(i.zn_floorZ),           "floorZ" },	// FLOAT
    {   0,   26,   33,   o(i.zn_ceilingHt),        "ceilingHt" },	// LEN_GZ
    {   0,   63,    1,         o(i.znCAir),           "znCAir" },	// HC_GZ
    {   1,   63,   33,       o(i.znCAirSh),         "znCAirSh" },	// HC_GZ
    {   0,   14,   33,     o(i.zn_HIRatio),          "HIRatio" },	// FLOAT_GZ
    {   0,   40,    1,          o(i.znAzm),            "znAzm" },	// ANGLE
    {   0,    6,    1,      o(i.plenumRet),        "plenumRet" },	// BOO
    {   0,   17,  513,           o(i.znSC),             "znSC" },	// FRAC
    {   0,   43, 1025,           o(i.znTH),             "znTH" },	// TEMP_GZ
    {   0,   43, 1025,           o(i.znTD),             "znTD" },	// TEMP_GZ
    {   0,   43, 1025,           o(i.znTC),             "znTC" },	// TEMP_GZ
    {   0,   12,  513,         o(i.znQMxH),           "znQMxH" },	// FLOAT
    {   0,   12,   33,    o(i.znQMxHRated),      "znQMxHRated" },	// FLOAT
    {   0,   12,  513,         o(i.znQMxC),           "znQMxC" },	// FLOAT
    {   0,   12,   33,    o(i.znQMxCRated),      "znQMxCRated" },	// FLOAT
    {   0,   24,   33,         o(i.zn_rsi),              "rsi" },	// TI
    {   0,   12,  513,      o(i.zn_hcFrcF),           "hcFrcF" },	// FLOAT
    {   0,   12, 1029,      o(i.zn_hcAirX),           "hcAirX" },	// FLOAT
    {   0,    1,   33, o(i.zn_hcAirXIsSet),      "hcAirXIsSet" },	// INT
    {   0,   17,  513,        o(i.xfanFOn),          "xfanFOn" },	// FRAC
    {   0,  140,    3,     o(i.xfan.fanTy),       "xfan.fanTy" },	// FANTYCH
    {   0,   33, 1029,      o(i.xfan.vfDs),        "xfan.vfDs" },	// AFLOW_GZ
    {   0,   32,    3,   o(i.xfan.vfDs_As),     "xfan.vfDs_As" },	// AFLOW
    {   0,   32,    3,o(i.xfan.vfDs_AsNov),  "xfan.vfDs_AsNov" },	// AFLOW
    {   0,   12,    3,     o(i.xfan.vfMxF),       "xfan.vfMxF" },	// FLOAT
    {   0,   37,   33,     o(i.xfan.press),       "xfan.press" },	// PRESAIR_GEZ
    {   0,   18,   33,       o(i.xfan.eff),         "xfan.eff" },	// FRAC_GZ
    {   0,   53,   33,  o(i.xfan.shaftPwr),    "xfan.shaftPwr" },	// BHP_GZ
    {   0,   14,   33,   o(i.xfan.elecPwr),     "xfan.elecPwr" },	// FLOAT_GZ
    {   0,  142,   33,  o(i.xfan.fn_motTy),       "xfan.motTy" },	// MOTTYCH
    {   0,   18,    3,    o(i.xfan.motEff),      "xfan.motEff" },	// FRAC_GZ
    {   0,  143,    3,    o(i.xfan.motPos),      "xfan.motPos" },	// MOTPOSCH
    {   0,   12,    3,o(i.xfan.curvePy.k[0]),"xfan.curvePy.k[0]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[1]),"xfan.curvePy.k[1]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[2]),"xfan.curvePy.k[2]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[3]),"xfan.curvePy.k[3]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[4]),"xfan.curvePy.k[4]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[5]),"xfan.curvePy.k[5]" },	// FLOAT
    {   0,   24,    1,   o(i.xfan.fn_mtri),        "xfan.mtri" },	// TI
    {   0,  136,    3, o(i.xfan.fn_endUse),      "xfan.endUse" },	// ENDUSECH
    {   0,    6,   33,      o(i.xfan.ausz),        "xfan.ausz" },	// BOO
    {   0,   48, 1025,  o(i.xfan.outPower),    "xfan.outPower" },	// POWER
    {   0,   48, 1025,  o(i.xfan.airPower),    "xfan.airPower" },	// POWER
    {   0,   35, 1029,       o(i.xfan.cMx),         "xfan.cMx" },	// CFLOW
    {   0,   35, 1029,         o(i.xfan.c),           "xfan.c" },	// CFLOW
    {   0,   42, 1029,         o(i.xfan.t),           "xfan.t" },	// TEMP
    {   0,   17, 1029,      o(i.xfan.frOn),        "xfan.frOn" },	// FRAC
    {   0,   48, 1029,         o(i.xfan.p),           "xfan.p" },	// POWER
    {   0,   48, 1029,         o(i.xfan.q),           "xfan.q" },	// POWER
    {   0,   44, 1029,        o(i.xfan.dT),          "xfan.dT" },	// TEMPDIFF
    {   0,   48, 1029,   o(i.xfan.qAround),     "xfan.qAround" },	// POWER
    {   0,   13,  513,          o(i.infAC),            "infAC" },	// FLOAT_GEZ
    {   0,   30,  513,         o(i.infELA),           "infELA" },	// AREA2
    {   0,    5,    1,     o(i.zn_infShld),          "infShld" },	// SI_GZ
    {   0,    5,    1,  o(i.zn_infStories),       "infStories" },	// SI_GZ
    {   0,   26,   33,       o(i.zn_eaveZ),            "eaveZ" },	// LEN_GZ
    {   0,   12, 1025,    o(i.zn_windFLkg),         "windFLkg" },	// FLOAT
    {   0,   24,   33,      o(i.zn_afMtri),           "afMtri" },	// TI
    {   0,    1,   33,          o(i.vrZdd),            "vrZdd" },	// INT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirZNI

struct SFIR sfirZNR[] =	// fields info for RTZNR
{
 #define o(m) offsetof(ZNR,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   98,    1,        o(i.znModel),          "znModel" },	// ZNMODELCH
    {   0,   28,    1,         o(i.znArea),           "znArea" },	// AREA_GZ
    {   0,   31,    1,          o(i.znVol),            "znVol" },	// VOL_GZ
    {   0,   12,    1,      o(i.zn_floorZ),           "floorZ" },	// FLOAT
    {   0,   26,   32,   o(i.zn_ceilingHt),        "ceilingHt" },	// LEN_GZ
    {   0,   63,    1,         o(i.znCAir),           "znCAir" },	// HC_GZ
    {   1,   63,   32,       o(i.znCAirSh),         "znCAirSh" },	// HC_GZ
    {   0,   14,   32,     o(i.zn_HIRatio),          "HIRatio" },	// FLOAT_GZ
    {   0,   40,    1,          o(i.znAzm),            "znAzm" },	// ANGLE
    {   0,    6,    1,      o(i.plenumRet),        "plenumRet" },	// BOO
    {   0,   17,  512,           o(i.znSC),             "znSC" },	// FRAC
    {   0,   43, 1024,           o(i.znTH),             "znTH" },	// TEMP_GZ
    {   0,   43, 1024,           o(i.znTD),             "znTD" },	// TEMP_GZ
    {   0,   43, 1024,           o(i.znTC),             "znTC" },	// TEMP_GZ
    {   0,   12,  512,         o(i.znQMxH),           "znQMxH" },	// FLOAT
    {   0,   12,   32,    o(i.znQMxHRated),      "znQMxHRated" },	// FLOAT
    {   0,   12,  512,         o(i.znQMxC),           "znQMxC" },	// FLOAT
    {   0,   12,   32,    o(i.znQMxCRated),      "znQMxCRated" },	// FLOAT
    {   0,   24,   32,         o(i.zn_rsi),              "rsi" },	// TI
    {   0,   12,  512,      o(i.zn_hcFrcF),           "hcFrcF" },	// FLOAT
    {   0,   12, 1028,      o(i.zn_hcAirX),           "hcAirX" },	// FLOAT
    {   0,    1,   32, o(i.zn_hcAirXIsSet),      "hcAirXIsSet" },	// INT
    {   0,   17,  512,        o(i.xfanFOn),          "xfanFOn" },	// FRAC
    {   0,  140,    3,     o(i.xfan.fanTy),       "xfan.fanTy" },	// FANTYCH
    {   0,   33, 1029,      o(i.xfan.vfDs),        "xfan.vfDs" },	// AFLOW_GZ
    {   0,   32,    3,   o(i.xfan.vfDs_As),     "xfan.vfDs_As" },	// AFLOW
    {   0,   32,    3,o(i.xfan.vfDs_AsNov),  "xfan.vfDs_AsNov" },	// AFLOW
    {   0,   12,    3,     o(i.xfan.vfMxF),       "xfan.vfMxF" },	// FLOAT
    {   0,   37,   33,     o(i.xfan.press),       "xfan.press" },	// PRESAIR_GEZ
    {   0,   18,   33,       o(i.xfan.eff),         "xfan.eff" },	// FRAC_GZ
    {   0,   53,   33,  o(i.xfan.shaftPwr),    "xfan.shaftPwr" },	// BHP_GZ
    {   0,   14,   33,   o(i.xfan.elecPwr),     "xfan.elecPwr" },	// FLOAT_GZ
    {   0,  142,   33,  o(i.xfan.fn_motTy),       "xfan.motTy" },	// MOTTYCH
    {   0,   18,    3,    o(i.xfan.motEff),      "xfan.motEff" },	// FRAC_GZ
    {   0,  143,    3,    o(i.xfan.motPos),      "xfan.motPos" },	// MOTPOSCH
    {   0,   12,    3,o(i.xfan.curvePy.k[0]),"xfan.curvePy.k[0]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[1]),"xfan.curvePy.k[1]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[2]),"xfan.curvePy.k[2]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[3]),"xfan.curvePy.k[3]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[4]),"xfan.curvePy.k[4]" },	// FLOAT
    {   0,   12,    3,o(i.xfan.curvePy.k[5]),"xfan.curvePy.k[5]" },	// FLOAT
    {   0,   24,    1,   o(i.xfan.fn_mtri),        "xfan.mtri" },	// TI
    {   0,  136,    3, o(i.xfan.fn_endUse),      "xfan.endUse" },	// ENDUSECH
    {   0,    6,   33,      o(i.xfan.ausz),        "xfan.ausz" },	// BOO
    {   0,   48, 1025,  o(i.xfan.outPower),    "xfan.outPower" },	// POWER
    {   0,   48, 1025,  o(i.xfan.airPower),    "xfan.airPower" },	// POWER
    {   0,   35, 1029,       o(i.xfan.cMx),         "xfan.cMx" },	// CFLOW
    {   0,   35, 1029,         o(i.xfan.c),           "xfan.c" },	// CFLOW
    {   0,   42, 1029,         o(i.xfan.t),           "xfan.t" },	// TEMP
    {   0,   17, 1029,      o(i.xfan.frOn),        "xfan.frOn" },	// FRAC
    {   0,   48, 1029,         o(i.xfan.p),           "xfan.p" },	// POWER
    {   0,   48, 1029,         o(i.xfan.q),           "xfan.q" },	// POWER
    {   0,   44, 1029,        o(i.xfan.dT),          "xfan.dT" },	// TEMPDIFF
    {   0,   48, 1029,   o(i.xfan.qAround),     "xfan.qAround" },	// POWER
    {   0,   13,  512,          o(i.infAC),            "infAC" },	// FLOAT_GEZ
    {   0,   30,  512,         o(i.infELA),           "infELA" },	// AREA2
    {   0,    5,    0,     o(i.zn_infShld),          "infShld" },	// SI_GZ
    {   0,    5,    0,  o(i.zn_infStories),       "infStories" },	// SI_GZ
    {   0,   26,   32,       o(i.zn_eaveZ),            "eaveZ" },	// LEN_GZ
    {   0,   12, 1024,    o(i.zn_windFLkg),         "windFLkg" },	// FLOAT
    {   0,   24,   32,      o(i.zn_afMtri),           "afMtri" },	// TI
    {   0,    1,   32,          o(i.vrZdd),            "vrZdd" },	// INT
    {   0,   24,   32,           o(xsurf1),           "xsurf1" },	// TI
    {   0,   24,   32,         o(xsSpecT1),         "xsSpecT1" },	// TI
    {   0,   24,   32,              o(tu1),              "tu1" },	// TI
    {   0,   24,   32,             o(zhx1),             "zhx1" },	// TI
    {   0,   24,   32,           o(zhx1St),           "zhx1St" },	// TI
    {   0,    6,   32,            o(znSCF),            "znSCF" },	// BOO
    {   0,   12,   32,        o(zn_stackc),           "stackc" },	// FLOAT
    {   0,   12,   32,         o(zn_windc),            "windc" },	// FLOAT
    {   0,    9,   32,       o(rIgDistNAl),       "rIgDistNAl" },	// USI
    {   0,    9,   32,         o(rIgDistN),         "rIgDistN" },	// USI
    {   0,   84,   32,          o(rIgDist),          "rIgDist" },	// RIGDISTP
    {   0,   19,   32,         o(zn_surfA),            "surfA" },	// DBL
    {   0,   19,   32,      o(zn_surfASlr),         "surfASlr" },	// DBL
    {   0,   19,   32,         o(zn_ductA),            "ductA" },	// DBL
    {   0,   19,   32,  o(zn_surfEpsLWAvg),     "surfEpsLWAvg" },	// DBL
    {   0,   19,   32,     o(zn_airRadXC1),        "airRadXC1" },	// DBL
    {   0,   19,   32,     o(zn_airRadXC2),        "airRadXC2" },	// DBL
    {   0,   19,   32,   o(zn_airRadXArea),      "airRadXArea" },	// DBL
    {   0,   19,   32,          o(zn_FAir),             "FAir" },	// DBL
    {   0,   19,  516,        o(zn_airCxF),           "airCxF" },	// DBL
    {   0,   19, 1028,         o(zn_airCx),            "airCx" },	// DBL
    {   0,   19,  260,       o(rmTrans[0]),       "rmTrans[0]" },	// DBL
    {   0,   19,  260,       o(rmTrans[1]),       "rmTrans[1]" },	// DBL
    {   0,   17,  260,            o(rmAbs),            "rmAbs" },	// FRAC
    {   0,   19,  260,      o(adjRmAbs[0]),      "adjRmAbs[0]" },	// DBL
    {   0,   19,  260,      o(adjRmAbs[1]),      "adjRmAbs[1]" },	// DBL
    {   0,   19,  260,        o(rmAbsCAir),        "rmAbsCAir" },	// DBL
    {   0,   19,  260,    o(cavAbsCAir[0]),    "cavAbsCAir[0]" },	// DBL
    {   0,   19,  260,    o(cavAbsCAir[1]),    "cavAbsCAir[1]" },	// DBL
    {   0,   19,  260,      o(sgfCavBm[0]),      "sgfCavBm[0]" },	// DBL
    {   0,   19,  260,      o(sgfCavBm[1]),      "sgfCavBm[1]" },	// DBL
    {   0,   19,  260,      o(sgfCavDf[0]),      "sgfCavDf[0]" },	// DBL
    {   0,   19,  260,      o(sgfCavDf[1]),      "sgfCavDf[1]" },	// DBL
    {   0,   19,  260,        o(sgSaBm[0]),        "sgSaBm[0]" },	// DBL
    {   0,   19,  260,        o(sgSaBm[1]),        "sgSaBm[1]" },	// DBL
    {   0,   19,  260,        o(sgSaDf[0]),        "sgSaDf[0]" },	// DBL
    {   0,   19,  260,        o(sgSaDf[1]),        "sgSaDf[1]" },	// DBL
    {   0,   19,  260,     o(sgfCAirBm[0]),     "sgfCAirBm[0]" },	// DBL
    {   0,   19,  260,     o(sgfCAirBm[1]),     "sgfCAirBm[1]" },	// DBL
    {   0,   19,  260,     o(sgfCAirDf[0]),     "sgfCAirDf[0]" },	// DBL
    {   0,   19,  260,     o(sgfCAirDf[1]),     "sgfCAirDf[1]" },	// DBL
    {   0,   19,   32,       o(zn_uaSpecT),          "uaSpecT" },	// DBL
    {   0,   19,   32,            o(zn_ua),               "ua" },	// DBL
    {   0,   19,   32,         o(zn_UANom),            "UANom" },	// DBL
    {   0,   19,   32, o(zn_ductCondUANom),    "ductCondUANom" },	// DBL
    {   0,   19,   32,           o(haMass),           "haMass" },	// DBL
    {   0,   19,   32,   o(zn_BGWallPerim),      "BGWallPerim" },	// DBL
    {   0,   19,   32,     o(zn_BGWallPA4),        "BGWallPA4" },	// DBL
    {   0,   19,   32,     o(zn_BGWallPA5),        "BGWallPA5" },	// DBL
    {   0,   19,  516,           o(qSgTot),           "qSgTot" },	// DBL
    {   0,   19, 1540,o(zn_sgTotTarg.st_bm),     "sgTotTarg.bm" },	// DBL
    {   0,   19, 1540,o(zn_sgTotTarg.st_df),     "sgTotTarg.df" },	// DBL
    {   0,   19, 1540,o(zn_sgTotTarg.st_tot),    "sgTotTarg.tot" },	// DBL
    {   0,   83,  516,          o(qrIgTot),          "qrIgTot" },	// RIGTARG
    {   0,   83,  516,         o(qrIgTotO),         "qrIgTotO" },	// RIGTARG
    {   0,   83,  516,        o(qrIgTotIz),        "qrIgTotIz" },	// RIGTARG
    {   0,   83,  516,          o(qrIgAir),          "qrIgAir" },	// RIGTARG
    {   0,   48,  516,           o(qrIgMs),           "qrIgMs" },	// POWER
    {   0,   19,  516,          o(znSGain),          "znSGain" },	// DBL
    {   0,   19,  516,          o(znLGain),          "znLGain" },	// DBL
    {   0,   19,  516,         o(znLitDmd),         "znLitDmd" },	// DBL
    {   0,   19,  516,          o(znLitEu),          "znLitEu" },	// DBL
    {   1,   19,  512,           o(qsIgHr),           "qsIgHr" },	// DBL
    {   0,   19, 1028,         o(znXLGain),         "znXLGain" },	// DBL
    {   0,   19, 1028,       o(znXLGainLs),       "znXLGainLs" },	// DBL
    {   1,   19,  512,        o(zn_aqLdHr),           "aqLdHr" },	// DBL
    {   1,   19,  512,      o(zn_uaXSpecT),         "uaXSpecT" },	// DBL
    {   1,   19,  512,          o(aMassHr),          "aMassHr" },	// DBL
    {   0,   19,   32,             o(bcon),             "bcon" },	// DBL
    {   1,   19,  512,            o(bLdHr),            "bLdHr" },	// DBL
    {   1,   19,  512,              o(xqh),              "xqh" },	// DBL
    {   0,   19, 1028,            o(qMsSg),            "qMsSg" },	// DBL
    {   0,   19, 1028,        o(zn_qSgAir),           "qSgAir" },	// DBL
    {   0,   19, 1028,o(zn_sgAirTarg.st_bm),     "sgAirTarg.bm" },	// DBL
    {   0,   19, 1028,o(zn_sgAirTarg.st_df),     "sgAirTarg.df" },	// DBL
    {   0,   19, 1028,o(zn_sgAirTarg.st_tot),    "sgAirTarg.tot" },	// DBL
    {   0,   19, 1028,         o(qSgTotSh),         "qSgTotSh" },	// DBL
    {   0,   19, 1028,o(zn_sgTotShTarg.st_bm),   "sgTotShTarg.bm" },	// DBL
    {   0,   19, 1028,o(zn_sgTotShTarg.st_df),   "sgTotShTarg.df" },	// DBL
    {   0,   19, 1028,o(zn_sgTotShTarg.st_tot),  "sgTotShTarg.tot" },	// DBL
    {   1,   19,  512,          o(aMassSh),          "aMassSh" },	// DBL
    {   1,   19, 1024,       o(zn_uaInfil),          "uaInfil" },	// DBL
    {   0,   19, 1028,      o(zn_qIzXAnSh),         "qIzXAnSh" },	// DBL
    {   0,   19, 1028,         o(zn_qIzSh),            "qIzSh" },	// DBL
    {   0,   19, 1028,       o(zn_pz0W[0]),          "pz0W[0]" },	// DBL
    {   0,   19, 1028,       o(zn_pz0W[1]),          "pz0W[1]" },	// DBL
    {   0,   19, 1028,           o(zn_pz0),              "pz0" },	// DBL
    {   0,    3, 1028,        o(zn_ventUt),           "ventUt" },	// SI
    {   1,   19, 1028,        o(zn_aqLdSh),           "aqLdSh" },	// DBL
    {   1,   19, 1028,         o(zn_bLdSh),            "bLdSh" },	// DBL
    {   1,   19, 1028,           o(zn_xqs),              "xqs" },	// DBL
    {   0,   19, 1028,  o(zn_qDuctCondAir),     "qDuctCondAir" },	// DBL
    {   0,   19, 1028,  o(zn_qDuctCondRad),     "qDuctCondRad" },	// DBL
    {   0,   19, 1028,     o(zn_qDuctCond),        "qDuctCond" },	// DBL
    {   0,   19, 1028,   o(zn_qDHWLossAir),      "qDHWLossAir" },	// DBL
    {   0,   19, 1028,   o(zn_qDHWLossRad),      "qDHWLossRad" },	// DBL
    {   0,   19, 1028,      o(zn_qDHWLoss),         "qDHWLoss" },	// DBL
    {   0,   19, 1028,         o(zn_qHPWH),            "qHPWH" },	// DBL
    {   0,   12, 1028,      o(zn_hpwhAirX),         "hpwhAirX" },	// FLOAT
    {   0,    3,  516,  o(zn_anVentEffect),     "anVentEffect" },	// SI
    {   2,   19, 1028,o(zn_airNetI[0].as_tdb),   "airNetI[0].tdb" },	// DBL
    {   2,   19, 1028,o(zn_airNetI[0].as_w),     "airNetI[0].w" },	// DBL
    {   0,   19, 1028,o(zn_airNetI[0].af_amf),   "airNetI[0].amf" },	// DBL
    {   2,   19, 1028,o(zn_airNetI[1].as_tdb),   "airNetI[1].tdb" },	// DBL
    {   2,   19, 1028,o(zn_airNetI[1].as_w),     "airNetI[1].w" },	// DBL
    {   0,   19, 1028,o(zn_airNetI[1].af_amf),   "airNetI[1].amf" },	// DBL
    {   0,   12, 1028,      o(zn_fVentPrf),         "fVentPrf" },	// FLOAT
    {   0,   12, 1028,        o(zn_tzVent),           "tzVent" },	// FLOAT
    {   0,   12, 1028,         o(zn_fVent),            "fVent" },	// FLOAT
    {   0,   19, 1028,   o(zn_anAmfCpVent),      "anAmfCpVent" },	// DBL
    {   0,   19, 1028,  o(zn_anAmfCpTVent),     "anAmfCpTVent" },	// DBL
    {   2,   19, 1028,o(zn_ductLkI.as_tdb),      "ductLkI.tdb" },	// DBL
    {   2,   19, 1028,  o(zn_ductLkI.as_w),        "ductLkI.w" },	// DBL
    {   0,   19, 1028,o(zn_ductLkI.af_amf),      "ductLkI.amf" },	// DBL
    {   2,   19, 1028,o(zn_ductLkO.as_tdb),      "ductLkO.tdb" },	// DBL
    {   2,   19, 1028,  o(zn_ductLkO.as_w),        "ductLkO.w" },	// DBL
    {   0,   19, 1028,o(zn_ductLkO.af_amf),      "ductLkO.amf" },	// DBL
    {   2,   19, 1028,o(zn_sysAirI.as_tdb),      "sysAirI.tdb" },	// DBL
    {   2,   19, 1028,  o(zn_sysAirI.as_w),        "sysAirI.w" },	// DBL
    {   0,   19, 1028,o(zn_sysAirI.af_amf),      "sysAirI.amf" },	// DBL
    {   2,   19, 1028,o(zn_sysAirO.as_tdb),      "sysAirO.tdb" },	// DBL
    {   2,   19, 1028,  o(zn_sysAirO.as_w),        "sysAirO.w" },	// DBL
    {   0,   19, 1028,o(zn_sysAirO.af_amf),      "sysAirO.amf" },	// DBL
    {   2,   19, 1028,o(zn_OAVRlfO.as_tdb),      "OAVRlfO.tdb" },	// DBL
    {   2,   19, 1028,  o(zn_OAVRlfO.as_w),        "OAVRlfO.w" },	// DBL
    {   0,   19, 1028,o(zn_OAVRlfO.af_amf),      "OAVRlfO.amf" },	// DBL
    {   2,   19, 1028,o(zn_sysDepAirIls.as_tdb), "sysDepAirIls.tdb" },	// DBL
    {   2,   19, 1028,o(zn_sysDepAirIls.as_w),   "sysDepAirIls.w" },	// DBL
    {   0,   19, 1028,o(zn_sysDepAirIls.af_amf), "sysDepAirIls.amf" },	// DBL
    {   1,   19, 1028,        o(zn_nAirSh),           "nAirSh" },	// DBL
    {   1,   19, 1028,        o(zn_dAirSh),           "dAirSh" },	// DBL
    {   1,   19, 1028,        o(zn_nRadSh),           "nRadSh" },	// DBL
    {   1,   19, 1028,        o(zn_dRadSh),           "dRadSh" },	// DBL
    {   1,   19, 1028,          o(zn_cxSh),             "cxSh" },	// DBL
    {   1,   19, 1028,         o(zn_dRpCx),            "dRpCx" },	// DBL
    {   1,   19, 1028,         o(zn_nRxCx),            "nRxCx" },	// DBL
    {   1,   19, 1028,         o(zn_dRxCx),            "dRxCx" },	// DBL
    {   1,   19, 1028,         o(zn_balC1),            "balC1" },	// DBL
    {   1,   19, 1028,         o(zn_balC2),            "balC2" },	// DBL
    {   1,   19, 1028,      o(zn_hcATMsSh),         "hcATMsSh" },	// DBL
    {   1,   19, 1028,      o(zn_hrATMsSh),         "hrATMsSh" },	// DBL
    {   1,   19, 1028,       o(zn_hcAMsSh),          "hcAMsSh" },	// DBL
    {   1,   19, 1028,       o(zn_hrAMsSh),          "hrAMsSh" },	// DBL
    {   0,   19, 1028,       o(zn_qCondQS),          "qCondQS" },	// DBL
    {   0,   19, 1028,       o(zn_qCondMS),          "qCondMS" },	// DBL
    {   1,   19, 1028,        o(zn_ieMass),           "ieMass" },	// DBL
    {   1,   19, 1028,      o(zn_ieMassls),         "ieMassls" },	// DBL
    {   1,    1, 1028,    o(zn_ebErrCount),       "ebErrCount" },	// INT
    {   0,   19, 1028,o(zn_rsAmfSysReq[0]),   "rsAmfSysReq[0]" },	// DBL
    {   0,   19, 1028,o(zn_rsAmfSysReq[1]),   "rsAmfSysReq[1]" },	// DBL
    {   0,   12, 1028,       o(zn_rsFSize),          "rsFSize" },	// FLOAT
    {   0,   19, 1028,      o(zn_rsAmfSup),         "rsAmfSup" },	// DBL
    {   0,   19, 1028,      o(zn_rsAmfRet),         "rsAmfRet" },	// DBL
    {   0,   19, 1024,    o(zn_rsAmfRetLs),       "rsAmfRetLs" },	// DBL
    {   0,   12, 1028,          o(zn_tzsp),             "tzsp" },	// FLOAT
    {   0,    3, 1028,        o(zn_hcMode),           "hcMode" },	// SI
    {   0,   12,  516,      o(zn_unMetHDH),         "unMetHDH" },	// FLOAT
    {   0,   12,  516,      o(zn_unMetCDH),         "unMetCDH" },	// FLOAT
    {   0,   12, 1024,        o(zn_fConvH),           "fConvH" },	// FLOAT
    {   0,   12, 1024,        o(zn_fConvC),           "fConvC" },	// FLOAT
    {   0,   12, 1024,         o(zn_fConv),            "fConv" },	// FLOAT
    {   1,   19, 1028,            o(aqHvO),            "aqHvO" },	// DBL
    {   1,   19, 1028,             o(bHvO),             "bHvO" },	// DBL
    {   1,   19, 1028,               o(aq),               "aq" },	// DBL
    {   1,   19, 1028,                o(b),                "b" },	// DBL
    {   1,   19, 1028,               o(cM),               "cM" },	// DBL
    {   1,   19, 1028,               o(qM),               "qM" },	// DBL
    {   1,   35, 1028,             o(cTot),             "cTot" },	// CFLOW
    {   0,   19, 1028,        o(zn_qsHvac),           "qsHvac" },	// DBL
    {   0,   19, 1028,        o(zn_qlHvac),           "qlHvac" },	// DBL
    {   0,   19, 1028,          o(zn_qlIz),             "qlIz" },	// DBL
    {   0,   10, 1028,         o(zn_wCase),            "wCase" },	// LI
    {   0,   10, 1028,       o(zn_airMode),          "airMode" },	// LI
    {   0,   19, 1028,           o(zn_rho),              "rho" },	// DBL
    {   0,   19, 1028,          o(zn_rho0),             "rho0" },	// DBL
    {   0,   19, 1024,        o(zn_rho0ls),           "rho0ls" },	// DBL
    {   0,   19, 1028,    o(zn_dryAirMass),       "dryAirMass" },	// DBL
    {   0,   19, 1028, o(zn_dryAirMassEff),    "dryAirMassEff" },	// DBL
    {   0,   12, 1028,        o(zn_ivAirX),           "ivAirX" },	// FLOAT
    {   0,   12, 1028,          o(zn_airX),             "airX" },	// FLOAT
    {   0,   12, 1024,      o(zn_hcAirXls),         "hcAirXls" },	// FLOAT
    {   0,   12, 1024,         o(zn_hcFrc),            "hcFrc" },	// FLOAT
    {   0,   12, 1024,     o(zn_windPresV),        "windPresV" },	// FLOAT
    {   1,   19, 1028,            o(wcSum),            "wcSum" },	// DBL
    {   1,   19, 1028,           o(wcSum1),           "wcSum1" },	// DBL
    {   1,   19, 1028,             o(cSum),             "cSum" },	// DBL
    {   0,   19, 1028,               o(tz),               "tz" },	// DBL
    {   0,   19, 1028,              o(aTz),              "aTz" },	// DBL
    {   0,   19, 1028,               o(wz),               "wz" },	// DBL
    {   0,   12, 1028,        o(zn_relHum),           "relHum" },	// FLOAT
    {   0,   12, 1024,      o(zn_relHumls),         "relHumls" },	// FLOAT
    {   0,   12,  512,      o(zn_relHumlh),         "relHumlh" },	// FLOAT
    {   0,   19, 1028,           o(zn_twb),              "twb" },	// DBL
    {   0,   19, 1028,              o(aWz),              "aWz" },	// DBL
    {   0,   19, 1024,             o(tzls),             "tzls" },	// DBL
    {   0,   19, 1024,             o(wzls),             "wzls" },	// DBL
    {   0,   19,  512,             o(tzlh),             "tzlh" },	// DBL
    {   0,   19,    0,        o(tzlsDelta),        "tzlsDelta" },	// DBL
    {   0,   19,    0,        o(wzlsDelta),        "wzlsDelta" },	// DBL
    {   0,   19, 1028,               o(tr),               "tr" },	// DBL
    {   0,   19, 1028,             o(trls),             "trls" },	// DBL
    {   0,   19,  512,             o(trlh),             "trlh" },	// DBL
    {   0,    3, 1028,               o(md),               "md" },	// SI
    {   1,    3,  516,              o(nMd),              "nMd" },	// SI
    {   1,    3, 1028,         o(mdSeq[0]),         "mdSeq[0]" },	// SI
    {   1,    3, 1028,         o(mdSeq[1]),         "mdSeq[1]" },	// SI
    {   1,    3, 1028,         o(mdSeq[2]),         "mdSeq[2]" },	// SI
    {   1,    3, 1028,         o(mdSeq[3]),         "mdSeq[3]" },	// SI
    {   1,    3, 1028,         o(mdSeq[4]),         "mdSeq[4]" },	// SI
    {   1,    3, 1028,         o(mdSeq[5]),         "mdSeq[5]" },	// SI
    {   1,    3, 1028,         o(mdSeq[6]),         "mdSeq[6]" },	// SI
    {   1,    3, 1028,         o(mdSeq[7]),         "mdSeq[7]" },	// SI
    {   1,    3, 1028,         o(mdSeq[8]),         "mdSeq[8]" },	// SI
    {   1,    3, 1028,         o(mdSeq[9]),         "mdSeq[9]" },	// SI
    {   1,    3, 1028,        o(mdSeq[10]),        "mdSeq[10]" },	// SI
    {   1,    3, 1028,        o(mdSeq[11]),        "mdSeq[11]" },	// SI
    {   1,    3, 1028,        o(mdSeq[12]),        "mdSeq[12]" },	// SI
    {   1,    3, 1028,        o(mdSeq[13]),        "mdSeq[13]" },	// SI
    {   1,    3, 1028,        o(mdSeq[14]),        "mdSeq[14]" },	// SI
    {   1,    3, 1028,        o(mdSeq[15]),        "mdSeq[15]" },	// SI
    {   1,    3, 1028,        o(mdSeq[16]),        "mdSeq[16]" },	// SI
    {   1,    3, 1028,        o(mdSeq[17]),        "mdSeq[17]" },	// SI
    {   1,    3, 1028,        o(mdSeq[18]),        "mdSeq[18]" },	// SI
    {   1,    3, 1028,        o(mdSeq[19]),        "mdSeq[19]" },	// SI
    {   1,    3, 1028,        o(mdSeq[20]),        "mdSeq[20]" },	// SI
    {   1,   19, 1028,             o(tuCz),             "tuCz" },	// DBL
    {   1,   19, 1028,          o(tuCzWas),          "tuCzWas" },	// DBL
    {   1,    6, 1028,             o(spCf),             "spCf" },	// BOO
    {   1,    6, 1028,            o(ztuCf),            "ztuCf" },	// BOO
    {   1,   19, 1028,            o(xqhPr),            "xqhPr" },	// DBL
    {   1,   19, 1028,            o(xqsPr),            "xqsPr" },	// DBL
    {   1,   12, 1028,          o(qIzShPr),          "qIzShPr" },	// FLOAT
    {   1,   12, 1028,           o(tzlsPr),           "tzlsPr" },	// FLOAT
    {   1,   12, 1028,           o(wzlsPr),           "wzlsPr" },	// FLOAT
    {   1,    3, 1028,             o(mdPr),             "mdPr" },	// SI
    {   1,   19, 1028,        o(znLGainPr),        "znLGainPr" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirZNR

struct SFIR sfirZNRES_IVL_SUB[] =	// fields info for RTZNRES_IVL_SUB
{
 #define o(m) offsetof(ZNRES_IVL_SUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    1,    0,                o(n),                "n" },	// INT
    {   0,    3,    0,          o(nHrHeat),          "nHrHeat" },	// SI
    {   0,    3,    0,          o(nHrCool),          "nHrCool" },	// SI
    {   0,    3,    0,          o(nHrFanv),          "nHrFanv" },	// SI
    {   0,    3,    0,          o(nHrNatv),          "nHrNatv" },	// SI
    {   0,    3,    0,       o(nHrCeilFan),       "nHrCeilFan" },	// SI
    {   0,   10,    0,            o(nIter),            "nIter" },	// LI
    {   0,   10,    0,        o(nHrUnMetH),        "nHrUnMetH" },	// LI
    {   0,   10,    0,        o(nHrUnMetC),        "nHrUnMetC" },	// LI
    {   0,   10,    0,         o(nShVentH),         "nShVentH" },	// LI
    {   0,   10,    0,           o(nSubhr),           "nSubhr" },	// LI
    {   0,   10,    0,         o(nSubhrLX),         "nSubhrLX" },	// LI
    {   0,   12,    0,             o(tAir),             "tAir" },	// FLOAT
    {   0,   12,    0,             o(tRad),             "tRad" },	// FLOAT
    {   0,   12,    0,          o(PMV7730),          "PMV7730" },	// FLOAT
    {   0,   12,    0,          o(PPD7730),          "PPD7730" },	// FLOAT
    {   0,   12,    0,           o(ivAirX),           "ivAirX" },	// FLOAT
    {   0,   12,    0,              o(pz0),              "pz0" },	// FLOAT
    {   0,   12,    0,             o(wAir),             "wAir" },	// FLOAT
    {   0,   12,    0,            o(qCond),            "qCond" },	// FLOAT
    {   0,   12,    0,          o(qsInfil),          "qsInfil" },	// FLOAT
    {   0,   12,    0,             o(qSlr),             "qSlr" },	// FLOAT
    {   0,   12,    0,             o(qsIg),             "qsIg" },	// FLOAT
    {   0,   12,    0,            o(qMass),            "qMass" },	// FLOAT
    {   0,   12,    0,             o(qsIz),             "qsIz" },	// FLOAT
    {   0,   12,    0,           o(qsMech),           "qsMech" },	// FLOAT
    {   0,   12,    0,        o(eqfVentHr),        "eqfVentHr" },	// FLOAT
    {   0,   12,    0,          o(qlInfil),          "qlInfil" },	// FLOAT
    {   0,   12,    0,             o(qlIg),             "qlIg" },	// FLOAT
    {   0,   12,    0,             o(qlIz),             "qlIz" },	// FLOAT
    {   0,   12,    0,            o(qlAir),            "qlAir" },	// FLOAT
    {   0,   12,    0,           o(qlMech),           "qlMech" },	// FLOAT
    {   0,   12,    0,            o(qsBal),            "qsBal" },	// FLOAT
    {   0,   12,    0,            o(qlBal),            "qlBal" },	// FLOAT
    {   0,   12,    0,              o(qlX),              "qlX" },	// FLOAT
    {   0,   12,    0,         o(unMetHDH),         "unMetHDH" },	// FLOAT
    {   0,   12,    0,         o(unMetCDH),         "unMetCDH" },	// FLOAT
    {   0,   12,    0,          o(qscHvac),          "qscHvac" },	// FLOAT
    {   0,   12,    0,          o(qshHvac),          "qshHvac" },	// FLOAT
    {   0,   12,    0,           o(qcMech),           "qcMech" },	// FLOAT
    {   0,   12,    0,           o(qhMech),           "qhMech" },	// FLOAT
    {   0,   12,    0,           o(qvMech),           "qvMech" },	// FLOAT
    {   0,   12,    0,           o(litDmd),           "litDmd" },	// FLOAT
    {   0,   12,    0,            o(litEu),            "litEu" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirZNRES_IVL_SUB

struct SFIR sfirZNRES_SUB[] =	// fields info for RTZNRES_SUB
{
 #define o(m) offsetof(ZNRES_SUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    1,   32,              o(Y.n),              "Y.n" },	// INT
    {   0,    3,   32,        o(Y.nHrHeat),        "Y.nHrHeat" },	// SI
    {   0,    3,   32,        o(Y.nHrCool),        "Y.nHrCool" },	// SI
    {   0,    3,   32,        o(Y.nHrFanv),        "Y.nHrFanv" },	// SI
    {   0,    3,   32,        o(Y.nHrNatv),        "Y.nHrNatv" },	// SI
    {   0,    3,   32,     o(Y.nHrCeilFan),     "Y.nHrCeilFan" },	// SI
    {   0,   10,   32,          o(Y.nIter),          "Y.nIter" },	// LI
    {   0,   10,   32,      o(Y.nHrUnMetH),      "Y.nHrUnMetH" },	// LI
    {   0,   10,   32,      o(Y.nHrUnMetC),      "Y.nHrUnMetC" },	// LI
    {   0,   10,   32,       o(Y.nShVentH),       "Y.nShVentH" },	// LI
    {   0,   10,   32,         o(Y.nSubhr),         "Y.nSubhr" },	// LI
    {   0,   10,   32,       o(Y.nSubhrLX),       "Y.nSubhrLX" },	// LI
    {   0,   12,   32,           o(Y.tAir),           "Y.tAir" },	// FLOAT
    {   0,   12,   32,           o(Y.tRad),           "Y.tRad" },	// FLOAT
    {   0,   12,   32,        o(Y.PMV7730),        "Y.PMV7730" },	// FLOAT
    {   0,   12,   32,        o(Y.PPD7730),        "Y.PPD7730" },	// FLOAT
    {   0,   12,   32,         o(Y.ivAirX),         "Y.ivAirX" },	// FLOAT
    {   0,   12,   32,            o(Y.pz0),            "Y.pz0" },	// FLOAT
    {   0,   12,   32,           o(Y.wAir),           "Y.wAir" },	// FLOAT
    {   0,   12,   32,          o(Y.qCond),          "Y.qCond" },	// FLOAT
    {   0,   12,   32,        o(Y.qsInfil),        "Y.qsInfil" },	// FLOAT
    {   0,   12,   32,           o(Y.qSlr),           "Y.qSlr" },	// FLOAT
    {   0,   12,   32,           o(Y.qsIg),           "Y.qsIg" },	// FLOAT
    {   0,   12,   32,          o(Y.qMass),          "Y.qMass" },	// FLOAT
    {   0,   12,   32,           o(Y.qsIz),           "Y.qsIz" },	// FLOAT
    {   0,   12,   32,         o(Y.qsMech),         "Y.qsMech" },	// FLOAT
    {   0,   12,   32,      o(Y.eqfVentHr),      "Y.eqfVentHr" },	// FLOAT
    {   0,   12,   32,        o(Y.qlInfil),        "Y.qlInfil" },	// FLOAT
    {   0,   12,   32,           o(Y.qlIg),           "Y.qlIg" },	// FLOAT
    {   0,   12,   32,           o(Y.qlIz),           "Y.qlIz" },	// FLOAT
    {   0,   12,   32,          o(Y.qlAir),          "Y.qlAir" },	// FLOAT
    {   0,   12,   32,         o(Y.qlMech),         "Y.qlMech" },	// FLOAT
    {   0,   12,   32,          o(Y.qsBal),          "Y.qsBal" },	// FLOAT
    {   0,   12,   32,          o(Y.qlBal),          "Y.qlBal" },	// FLOAT
    {   0,   12,   32,            o(Y.qlX),            "Y.qlX" },	// FLOAT
    {   0,   12,   32,       o(Y.unMetHDH),       "Y.unMetHDH" },	// FLOAT
    {   0,   12,   32,       o(Y.unMetCDH),       "Y.unMetCDH" },	// FLOAT
    {   0,   12,   32,        o(Y.qscHvac),        "Y.qscHvac" },	// FLOAT
    {   0,   12,   32,        o(Y.qshHvac),        "Y.qshHvac" },	// FLOAT
    {   0,   12,   32,         o(Y.qcMech),         "Y.qcMech" },	// FLOAT
    {   0,   12,   32,         o(Y.qhMech),         "Y.qhMech" },	// FLOAT
    {   0,   12,   32,         o(Y.qvMech),         "Y.qvMech" },	// FLOAT
    {   0,   12,   32,         o(Y.litDmd),         "Y.litDmd" },	// FLOAT
    {   0,   12,   32,          o(Y.litEu),          "Y.litEu" },	// FLOAT
    {   0,    1,   64,              o(M.n),              "M.n" },	// INT
    {   0,    3,   64,        o(M.nHrHeat),        "M.nHrHeat" },	// SI
    {   0,    3,   64,        o(M.nHrCool),        "M.nHrCool" },	// SI
    {   0,    3,   64,        o(M.nHrFanv),        "M.nHrFanv" },	// SI
    {   0,    3,   64,        o(M.nHrNatv),        "M.nHrNatv" },	// SI
    {   0,    3,   64,     o(M.nHrCeilFan),     "M.nHrCeilFan" },	// SI
    {   0,   10,   64,          o(M.nIter),          "M.nIter" },	// LI
    {   0,   10,   64,      o(M.nHrUnMetH),      "M.nHrUnMetH" },	// LI
    {   0,   10,   64,      o(M.nHrUnMetC),      "M.nHrUnMetC" },	// LI
    {   0,   10,   64,       o(M.nShVentH),       "M.nShVentH" },	// LI
    {   0,   10,   64,         o(M.nSubhr),         "M.nSubhr" },	// LI
    {   0,   10,   64,       o(M.nSubhrLX),       "M.nSubhrLX" },	// LI
    {   0,   12,   64,           o(M.tAir),           "M.tAir" },	// FLOAT
    {   0,   12,   64,           o(M.tRad),           "M.tRad" },	// FLOAT
    {   0,   12,   64,        o(M.PMV7730),        "M.PMV7730" },	// FLOAT
    {   0,   12,   64,        o(M.PPD7730),        "M.PPD7730" },	// FLOAT
    {   0,   12,   64,         o(M.ivAirX),         "M.ivAirX" },	// FLOAT
    {   0,   12,   64,            o(M.pz0),            "M.pz0" },	// FLOAT
    {   0,   12,   64,           o(M.wAir),           "M.wAir" },	// FLOAT
    {   0,   12,   64,          o(M.qCond),          "M.qCond" },	// FLOAT
    {   0,   12,   64,        o(M.qsInfil),        "M.qsInfil" },	// FLOAT
    {   0,   12,   64,           o(M.qSlr),           "M.qSlr" },	// FLOAT
    {   0,   12,   64,           o(M.qsIg),           "M.qsIg" },	// FLOAT
    {   0,   12,   64,          o(M.qMass),          "M.qMass" },	// FLOAT
    {   0,   12,   64,           o(M.qsIz),           "M.qsIz" },	// FLOAT
    {   0,   12,   64,         o(M.qsMech),         "M.qsMech" },	// FLOAT
    {   0,   12,   64,      o(M.eqfVentHr),      "M.eqfVentHr" },	// FLOAT
    {   0,   12,   64,        o(M.qlInfil),        "M.qlInfil" },	// FLOAT
    {   0,   12,   64,           o(M.qlIg),           "M.qlIg" },	// FLOAT
    {   0,   12,   64,           o(M.qlIz),           "M.qlIz" },	// FLOAT
    {   0,   12,   64,          o(M.qlAir),          "M.qlAir" },	// FLOAT
    {   0,   12,   64,         o(M.qlMech),         "M.qlMech" },	// FLOAT
    {   0,   12,   64,          o(M.qsBal),          "M.qsBal" },	// FLOAT
    {   0,   12,   64,          o(M.qlBal),          "M.qlBal" },	// FLOAT
    {   0,   12,   64,            o(M.qlX),            "M.qlX" },	// FLOAT
    {   0,   12,   64,       o(M.unMetHDH),       "M.unMetHDH" },	// FLOAT
    {   0,   12,   64,       o(M.unMetCDH),       "M.unMetCDH" },	// FLOAT
    {   0,   12,   64,        o(M.qscHvac),        "M.qscHvac" },	// FLOAT
    {   0,   12,   64,        o(M.qshHvac),        "M.qshHvac" },	// FLOAT
    {   0,   12,   64,         o(M.qcMech),         "M.qcMech" },	// FLOAT
    {   0,   12,   64,         o(M.qhMech),         "M.qhMech" },	// FLOAT
    {   0,   12,   64,         o(M.qvMech),         "M.qvMech" },	// FLOAT
    {   0,   12,   64,         o(M.litDmd),         "M.litDmd" },	// FLOAT
    {   0,   12,   64,          o(M.litEu),          "M.litEu" },	// FLOAT
    {   0,    1,  128,              o(D.n),              "D.n" },	// INT
    {   0,    3,  128,        o(D.nHrHeat),        "D.nHrHeat" },	// SI
    {   0,    3,  128,        o(D.nHrCool),        "D.nHrCool" },	// SI
    {   0,    3,  128,        o(D.nHrFanv),        "D.nHrFanv" },	// SI
    {   0,    3,  128,        o(D.nHrNatv),        "D.nHrNatv" },	// SI
    {   0,    3,  128,     o(D.nHrCeilFan),     "D.nHrCeilFan" },	// SI
    {   0,   10,  128,          o(D.nIter),          "D.nIter" },	// LI
    {   0,   10,  128,      o(D.nHrUnMetH),      "D.nHrUnMetH" },	// LI
    {   0,   10,  128,      o(D.nHrUnMetC),      "D.nHrUnMetC" },	// LI
    {   0,   10,  128,       o(D.nShVentH),       "D.nShVentH" },	// LI
    {   0,   10,  128,         o(D.nSubhr),         "D.nSubhr" },	// LI
    {   0,   10,  128,       o(D.nSubhrLX),       "D.nSubhrLX" },	// LI
    {   0,   12,  128,           o(D.tAir),           "D.tAir" },	// FLOAT
    {   0,   12,  128,           o(D.tRad),           "D.tRad" },	// FLOAT
    {   0,   12,  128,        o(D.PMV7730),        "D.PMV7730" },	// FLOAT
    {   0,   12,  128,        o(D.PPD7730),        "D.PPD7730" },	// FLOAT
    {   0,   12,  128,         o(D.ivAirX),         "D.ivAirX" },	// FLOAT
    {   0,   12,  128,            o(D.pz0),            "D.pz0" },	// FLOAT
    {   0,   12,  128,           o(D.wAir),           "D.wAir" },	// FLOAT
    {   0,   12,  128,          o(D.qCond),          "D.qCond" },	// FLOAT
    {   0,   12,  128,        o(D.qsInfil),        "D.qsInfil" },	// FLOAT
    {   0,   12,  128,           o(D.qSlr),           "D.qSlr" },	// FLOAT
    {   0,   12,  128,           o(D.qsIg),           "D.qsIg" },	// FLOAT
    {   0,   12,  128,          o(D.qMass),          "D.qMass" },	// FLOAT
    {   0,   12,  128,           o(D.qsIz),           "D.qsIz" },	// FLOAT
    {   0,   12,  128,         o(D.qsMech),         "D.qsMech" },	// FLOAT
    {   0,   12,  128,      o(D.eqfVentHr),      "D.eqfVentHr" },	// FLOAT
    {   0,   12,  128,        o(D.qlInfil),        "D.qlInfil" },	// FLOAT
    {   0,   12,  128,           o(D.qlIg),           "D.qlIg" },	// FLOAT
    {   0,   12,  128,           o(D.qlIz),           "D.qlIz" },	// FLOAT
    {   0,   12,  128,          o(D.qlAir),          "D.qlAir" },	// FLOAT
    {   0,   12,  128,         o(D.qlMech),         "D.qlMech" },	// FLOAT
    {   0,   12,  128,          o(D.qsBal),          "D.qsBal" },	// FLOAT
    {   0,   12,  128,          o(D.qlBal),          "D.qlBal" },	// FLOAT
    {   0,   12,  128,            o(D.qlX),            "D.qlX" },	// FLOAT
    {   0,   12,  128,       o(D.unMetHDH),       "D.unMetHDH" },	// FLOAT
    {   0,   12,  128,       o(D.unMetCDH),       "D.unMetCDH" },	// FLOAT
    {   0,   12,  128,        o(D.qscHvac),        "D.qscHvac" },	// FLOAT
    {   0,   12,  128,        o(D.qshHvac),        "D.qshHvac" },	// FLOAT
    {   0,   12,  128,         o(D.qcMech),         "D.qcMech" },	// FLOAT
    {   0,   12,  128,         o(D.qhMech),         "D.qhMech" },	// FLOAT
    {   0,   12,  128,         o(D.qvMech),         "D.qvMech" },	// FLOAT
    {   0,   12,  128,         o(D.litDmd),         "D.litDmd" },	// FLOAT
    {   0,   12,  128,          o(D.litEu),          "D.litEu" },	// FLOAT
    {   0,    1,  512,              o(H.n),              "H.n" },	// INT
    {   0,    3,  512,        o(H.nHrHeat),        "H.nHrHeat" },	// SI
    {   0,    3,  512,        o(H.nHrCool),        "H.nHrCool" },	// SI
    {   0,    3,  512,        o(H.nHrFanv),        "H.nHrFanv" },	// SI
    {   0,    3,  512,        o(H.nHrNatv),        "H.nHrNatv" },	// SI
    {   0,    3,  512,     o(H.nHrCeilFan),     "H.nHrCeilFan" },	// SI
    {   0,   10,  512,          o(H.nIter),          "H.nIter" },	// LI
    {   0,   10,  512,      o(H.nHrUnMetH),      "H.nHrUnMetH" },	// LI
    {   0,   10,  512,      o(H.nHrUnMetC),      "H.nHrUnMetC" },	// LI
    {   0,   10,  512,       o(H.nShVentH),       "H.nShVentH" },	// LI
    {   0,   10,  512,         o(H.nSubhr),         "H.nSubhr" },	// LI
    {   0,   10,  512,       o(H.nSubhrLX),       "H.nSubhrLX" },	// LI
    {   0,   12,  512,           o(H.tAir),           "H.tAir" },	// FLOAT
    {   0,   12,  512,           o(H.tRad),           "H.tRad" },	// FLOAT
    {   0,   12,  512,        o(H.PMV7730),        "H.PMV7730" },	// FLOAT
    {   0,   12,  512,        o(H.PPD7730),        "H.PPD7730" },	// FLOAT
    {   0,   12,  512,         o(H.ivAirX),         "H.ivAirX" },	// FLOAT
    {   0,   12,  512,            o(H.pz0),            "H.pz0" },	// FLOAT
    {   0,   12,  512,           o(H.wAir),           "H.wAir" },	// FLOAT
    {   0,   12,  512,          o(H.qCond),          "H.qCond" },	// FLOAT
    {   0,   12,  512,        o(H.qsInfil),        "H.qsInfil" },	// FLOAT
    {   0,   12,  512,           o(H.qSlr),           "H.qSlr" },	// FLOAT
    {   0,   12,  512,           o(H.qsIg),           "H.qsIg" },	// FLOAT
    {   0,   12,  512,          o(H.qMass),          "H.qMass" },	// FLOAT
    {   0,   12,  512,           o(H.qsIz),           "H.qsIz" },	// FLOAT
    {   0,   12,  512,         o(H.qsMech),         "H.qsMech" },	// FLOAT
    {   0,   12,  512,      o(H.eqfVentHr),      "H.eqfVentHr" },	// FLOAT
    {   0,   12,  512,        o(H.qlInfil),        "H.qlInfil" },	// FLOAT
    {   0,   12,  512,           o(H.qlIg),           "H.qlIg" },	// FLOAT
    {   0,   12,  512,           o(H.qlIz),           "H.qlIz" },	// FLOAT
    {   0,   12,  512,          o(H.qlAir),          "H.qlAir" },	// FLOAT
    {   0,   12,  512,         o(H.qlMech),         "H.qlMech" },	// FLOAT
    {   0,   12,  512,          o(H.qsBal),          "H.qsBal" },	// FLOAT
    {   0,   12,  512,          o(H.qlBal),          "H.qlBal" },	// FLOAT
    {   0,   12,  512,            o(H.qlX),            "H.qlX" },	// FLOAT
    {   0,   12,  512,       o(H.unMetHDH),       "H.unMetHDH" },	// FLOAT
    {   0,   12,  512,       o(H.unMetCDH),       "H.unMetCDH" },	// FLOAT
    {   0,   12,  512,        o(H.qscHvac),        "H.qscHvac" },	// FLOAT
    {   0,   12,  512,        o(H.qshHvac),        "H.qshHvac" },	// FLOAT
    {   0,   12,  512,         o(H.qcMech),         "H.qcMech" },	// FLOAT
    {   0,   12,  512,         o(H.qhMech),         "H.qhMech" },	// FLOAT
    {   0,   12,  512,         o(H.qvMech),         "H.qvMech" },	// FLOAT
    {   0,   12,  512,         o(H.litDmd),         "H.litDmd" },	// FLOAT
    {   0,   12,  512,          o(H.litEu),          "H.litEu" },	// FLOAT
    {   0,    1, 1024,              o(S.n),              "S.n" },	// INT
    {   0,    3, 1024,        o(S.nHrHeat),        "S.nHrHeat" },	// SI
    {   0,    3, 1024,        o(S.nHrCool),        "S.nHrCool" },	// SI
    {   0,    3, 1024,        o(S.nHrFanv),        "S.nHrFanv" },	// SI
    {   0,    3, 1024,        o(S.nHrNatv),        "S.nHrNatv" },	// SI
    {   0,    3, 1024,     o(S.nHrCeilFan),     "S.nHrCeilFan" },	// SI
    {   0,   10, 1024,          o(S.nIter),          "S.nIter" },	// LI
    {   0,   10, 1024,      o(S.nHrUnMetH),      "S.nHrUnMetH" },	// LI
    {   0,   10, 1024,      o(S.nHrUnMetC),      "S.nHrUnMetC" },	// LI
    {   0,   10, 1024,       o(S.nShVentH),       "S.nShVentH" },	// LI
    {   0,   10, 1024,         o(S.nSubhr),         "S.nSubhr" },	// LI
    {   0,   10, 1024,       o(S.nSubhrLX),       "S.nSubhrLX" },	// LI
    {   0,   12, 1024,           o(S.tAir),           "S.tAir" },	// FLOAT
    {   0,   12, 1024,           o(S.tRad),           "S.tRad" },	// FLOAT
    {   0,   12, 1024,        o(S.PMV7730),        "S.PMV7730" },	// FLOAT
    {   0,   12, 1024,        o(S.PPD7730),        "S.PPD7730" },	// FLOAT
    {   0,   12, 1024,         o(S.ivAirX),         "S.ivAirX" },	// FLOAT
    {   0,   12, 1024,            o(S.pz0),            "S.pz0" },	// FLOAT
    {   0,   12, 1024,           o(S.wAir),           "S.wAir" },	// FLOAT
    {   0,   12, 1024,          o(S.qCond),          "S.qCond" },	// FLOAT
    {   0,   12, 1024,        o(S.qsInfil),        "S.qsInfil" },	// FLOAT
    {   0,   12, 1024,           o(S.qSlr),           "S.qSlr" },	// FLOAT
    {   0,   12, 1024,           o(S.qsIg),           "S.qsIg" },	// FLOAT
    {   0,   12, 1024,          o(S.qMass),          "S.qMass" },	// FLOAT
    {   0,   12, 1024,           o(S.qsIz),           "S.qsIz" },	// FLOAT
    {   0,   12, 1024,         o(S.qsMech),         "S.qsMech" },	// FLOAT
    {   0,   12, 1024,      o(S.eqfVentHr),      "S.eqfVentHr" },	// FLOAT
    {   0,   12, 1024,        o(S.qlInfil),        "S.qlInfil" },	// FLOAT
    {   0,   12, 1024,           o(S.qlIg),           "S.qlIg" },	// FLOAT
    {   0,   12, 1024,           o(S.qlIz),           "S.qlIz" },	// FLOAT
    {   0,   12, 1024,          o(S.qlAir),          "S.qlAir" },	// FLOAT
    {   0,   12, 1024,         o(S.qlMech),         "S.qlMech" },	// FLOAT
    {   0,   12, 1024,          o(S.qsBal),          "S.qsBal" },	// FLOAT
    {   0,   12, 1024,          o(S.qlBal),          "S.qlBal" },	// FLOAT
    {   0,   12, 1024,            o(S.qlX),            "S.qlX" },	// FLOAT
    {   0,   12, 1024,       o(S.unMetHDH),       "S.unMetHDH" },	// FLOAT
    {   0,   12, 1024,       o(S.unMetCDH),       "S.unMetCDH" },	// FLOAT
    {   0,   12, 1024,        o(S.qscHvac),        "S.qscHvac" },	// FLOAT
    {   0,   12, 1024,        o(S.qshHvac),        "S.qshHvac" },	// FLOAT
    {   0,   12, 1024,         o(S.qcMech),         "S.qcMech" },	// FLOAT
    {   0,   12, 1024,         o(S.qhMech),         "S.qhMech" },	// FLOAT
    {   0,   12, 1024,         o(S.qvMech),         "S.qvMech" },	// FLOAT
    {   0,   12, 1024,         o(S.litDmd),         "S.litDmd" },	// FLOAT
    {   0,   12, 1024,          o(S.litEu),          "S.litEu" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirZNRES_SUB

struct SFIR sfirZNRES[] =	// fields info for RTZNRES
{
 #define o(m) offsetof(ZNRES,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    1,   36,         o(curr.Y.n),              "Y.n" },	// INT
    {   0,    3,   36,   o(curr.Y.nHrHeat),        "Y.nHrHeat" },	// SI
    {   0,    3,   36,   o(curr.Y.nHrCool),        "Y.nHrCool" },	// SI
    {   0,    3,   36,   o(curr.Y.nHrFanv),        "Y.nHrFanv" },	// SI
    {   0,    3,   36,   o(curr.Y.nHrNatv),        "Y.nHrNatv" },	// SI
    {   0,    3,   36,o(curr.Y.nHrCeilFan),     "Y.nHrCeilFan" },	// SI
    {   0,   10,   36,     o(curr.Y.nIter),          "Y.nIter" },	// LI
    {   0,   10,   36, o(curr.Y.nHrUnMetH),      "Y.nHrUnMetH" },	// LI
    {   0,   10,   36, o(curr.Y.nHrUnMetC),      "Y.nHrUnMetC" },	// LI
    {   0,   10,   36,  o(curr.Y.nShVentH),       "Y.nShVentH" },	// LI
    {   0,   10,   36,    o(curr.Y.nSubhr),         "Y.nSubhr" },	// LI
    {   0,   10,   36,  o(curr.Y.nSubhrLX),       "Y.nSubhrLX" },	// LI
    {   0,   12,   36,      o(curr.Y.tAir),           "Y.tAir" },	// FLOAT
    {   0,   12,   36,      o(curr.Y.tRad),           "Y.tRad" },	// FLOAT
    {   0,   12,   36,   o(curr.Y.PMV7730),        "Y.PMV7730" },	// FLOAT
    {   0,   12,   36,   o(curr.Y.PPD7730),        "Y.PPD7730" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.ivAirX),         "Y.ivAirX" },	// FLOAT
    {   0,   12,   36,       o(curr.Y.pz0),            "Y.pz0" },	// FLOAT
    {   0,   12,   36,      o(curr.Y.wAir),           "Y.wAir" },	// FLOAT
    {   0,   12,   36,     o(curr.Y.qCond),          "Y.qCond" },	// FLOAT
    {   0,   12,   36,   o(curr.Y.qsInfil),        "Y.qsInfil" },	// FLOAT
    {   0,   12,   36,      o(curr.Y.qSlr),           "Y.qSlr" },	// FLOAT
    {   0,   12,   36,      o(curr.Y.qsIg),           "Y.qsIg" },	// FLOAT
    {   0,   12,   36,     o(curr.Y.qMass),          "Y.qMass" },	// FLOAT
    {   0,   12,   36,      o(curr.Y.qsIz),           "Y.qsIz" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.qsMech),         "Y.qsMech" },	// FLOAT
    {   0,   12,   36, o(curr.Y.eqfVentHr),      "Y.eqfVentHr" },	// FLOAT
    {   0,   12,   36,   o(curr.Y.qlInfil),        "Y.qlInfil" },	// FLOAT
    {   0,   12,   36,      o(curr.Y.qlIg),           "Y.qlIg" },	// FLOAT
    {   0,   12,   36,      o(curr.Y.qlIz),           "Y.qlIz" },	// FLOAT
    {   0,   12,   36,     o(curr.Y.qlAir),          "Y.qlAir" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.qlMech),         "Y.qlMech" },	// FLOAT
    {   0,   12,   36,     o(curr.Y.qsBal),          "Y.qsBal" },	// FLOAT
    {   0,   12,   36,     o(curr.Y.qlBal),          "Y.qlBal" },	// FLOAT
    {   0,   12,   36,       o(curr.Y.qlX),            "Y.qlX" },	// FLOAT
    {   0,   12,   36,  o(curr.Y.unMetHDH),       "Y.unMetHDH" },	// FLOAT
    {   0,   12,   36,  o(curr.Y.unMetCDH),       "Y.unMetCDH" },	// FLOAT
    {   0,   12,   36,   o(curr.Y.qscHvac),        "Y.qscHvac" },	// FLOAT
    {   0,   12,   36,   o(curr.Y.qshHvac),        "Y.qshHvac" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.qcMech),         "Y.qcMech" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.qhMech),         "Y.qhMech" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.qvMech),         "Y.qvMech" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.litDmd),         "Y.litDmd" },	// FLOAT
    {   0,   12,   36,     o(curr.Y.litEu),          "Y.litEu" },	// FLOAT
    {   0,    1,   68,         o(curr.M.n),              "M.n" },	// INT
    {   0,    3,   68,   o(curr.M.nHrHeat),        "M.nHrHeat" },	// SI
    {   0,    3,   68,   o(curr.M.nHrCool),        "M.nHrCool" },	// SI
    {   0,    3,   68,   o(curr.M.nHrFanv),        "M.nHrFanv" },	// SI
    {   0,    3,   68,   o(curr.M.nHrNatv),        "M.nHrNatv" },	// SI
    {   0,    3,   68,o(curr.M.nHrCeilFan),     "M.nHrCeilFan" },	// SI
    {   0,   10,   68,     o(curr.M.nIter),          "M.nIter" },	// LI
    {   0,   10,   68, o(curr.M.nHrUnMetH),      "M.nHrUnMetH" },	// LI
    {   0,   10,   68, o(curr.M.nHrUnMetC),      "M.nHrUnMetC" },	// LI
    {   0,   10,   68,  o(curr.M.nShVentH),       "M.nShVentH" },	// LI
    {   0,   10,   68,    o(curr.M.nSubhr),         "M.nSubhr" },	// LI
    {   0,   10,   68,  o(curr.M.nSubhrLX),       "M.nSubhrLX" },	// LI
    {   0,   12,   68,      o(curr.M.tAir),           "M.tAir" },	// FLOAT
    {   0,   12,   68,      o(curr.M.tRad),           "M.tRad" },	// FLOAT
    {   0,   12,   68,   o(curr.M.PMV7730),        "M.PMV7730" },	// FLOAT
    {   0,   12,   68,   o(curr.M.PPD7730),        "M.PPD7730" },	// FLOAT
    {   0,   12,   68,    o(curr.M.ivAirX),         "M.ivAirX" },	// FLOAT
    {   0,   12,   68,       o(curr.M.pz0),            "M.pz0" },	// FLOAT
    {   0,   12,   68,      o(curr.M.wAir),           "M.wAir" },	// FLOAT
    {   0,   12,   68,     o(curr.M.qCond),          "M.qCond" },	// FLOAT
    {   0,   12,   68,   o(curr.M.qsInfil),        "M.qsInfil" },	// FLOAT
    {   0,   12,   68,      o(curr.M.qSlr),           "M.qSlr" },	// FLOAT
    {   0,   12,   68,      o(curr.M.qsIg),           "M.qsIg" },	// FLOAT
    {   0,   12,   68,     o(curr.M.qMass),          "M.qMass" },	// FLOAT
    {   0,   12,   68,      o(curr.M.qsIz),           "M.qsIz" },	// FLOAT
    {   0,   12,   68,    o(curr.M.qsMech),         "M.qsMech" },	// FLOAT
    {   0,   12,   68, o(curr.M.eqfVentHr),      "M.eqfVentHr" },	// FLOAT
    {   0,   12,   68,   o(curr.M.qlInfil),        "M.qlInfil" },	// FLOAT
    {   0,   12,   68,      o(curr.M.qlIg),           "M.qlIg" },	// FLOAT
    {   0,   12,   68,      o(curr.M.qlIz),           "M.qlIz" },	// FLOAT
    {   0,   12,   68,     o(curr.M.qlAir),          "M.qlAir" },	// FLOAT
    {   0,   12,   68,    o(curr.M.qlMech),         "M.qlMech" },	// FLOAT
    {   0,   12,   68,     o(curr.M.qsBal),          "M.qsBal" },	// FLOAT
    {   0,   12,   68,     o(curr.M.qlBal),          "M.qlBal" },	// FLOAT
    {   0,   12,   68,       o(curr.M.qlX),            "M.qlX" },	// FLOAT
    {   0,   12,   68,  o(curr.M.unMetHDH),       "M.unMetHDH" },	// FLOAT
    {   0,   12,   68,  o(curr.M.unMetCDH),       "M.unMetCDH" },	// FLOAT
    {   0,   12,   68,   o(curr.M.qscHvac),        "M.qscHvac" },	// FLOAT
    {   0,   12,   68,   o(curr.M.qshHvac),        "M.qshHvac" },	// FLOAT
    {   0,   12,   68,    o(curr.M.qcMech),         "M.qcMech" },	// FLOAT
    {   0,   12,   68,    o(curr.M.qhMech),         "M.qhMech" },	// FLOAT
    {   0,   12,   68,    o(curr.M.qvMech),         "M.qvMech" },	// FLOAT
    {   0,   12,   68,    o(curr.M.litDmd),         "M.litDmd" },	// FLOAT
    {   0,   12,   68,     o(curr.M.litEu),          "M.litEu" },	// FLOAT
    {   0,    1,  132,         o(curr.D.n),              "D.n" },	// INT
    {   0,    3,  132,   o(curr.D.nHrHeat),        "D.nHrHeat" },	// SI
    {   0,    3,  132,   o(curr.D.nHrCool),        "D.nHrCool" },	// SI
    {   0,    3,  132,   o(curr.D.nHrFanv),        "D.nHrFanv" },	// SI
    {   0,    3,  132,   o(curr.D.nHrNatv),        "D.nHrNatv" },	// SI
    {   0,    3,  132,o(curr.D.nHrCeilFan),     "D.nHrCeilFan" },	// SI
    {   0,   10,  132,     o(curr.D.nIter),          "D.nIter" },	// LI
    {   0,   10,  132, o(curr.D.nHrUnMetH),      "D.nHrUnMetH" },	// LI
    {   0,   10,  132, o(curr.D.nHrUnMetC),      "D.nHrUnMetC" },	// LI
    {   0,   10,  132,  o(curr.D.nShVentH),       "D.nShVentH" },	// LI
    {   0,   10,  132,    o(curr.D.nSubhr),         "D.nSubhr" },	// LI
    {   0,   10,  132,  o(curr.D.nSubhrLX),       "D.nSubhrLX" },	// LI
    {   0,   12,  132,      o(curr.D.tAir),           "D.tAir" },	// FLOAT
    {   0,   12,  132,      o(curr.D.tRad),           "D.tRad" },	// FLOAT
    {   0,   12,  132,   o(curr.D.PMV7730),        "D.PMV7730" },	// FLOAT
    {   0,   12,  132,   o(curr.D.PPD7730),        "D.PPD7730" },	// FLOAT
    {   0,   12,  132,    o(curr.D.ivAirX),         "D.ivAirX" },	// FLOAT
    {   0,   12,  132,       o(curr.D.pz0),            "D.pz0" },	// FLOAT
    {   0,   12,  132,      o(curr.D.wAir),           "D.wAir" },	// FLOAT
    {   0,   12,  132,     o(curr.D.qCond),          "D.qCond" },	// FLOAT
    {   0,   12,  132,   o(curr.D.qsInfil),        "D.qsInfil" },	// FLOAT
    {   0,   12,  132,      o(curr.D.qSlr),           "D.qSlr" },	// FLOAT
    {   0,   12,  132,      o(curr.D.qsIg),           "D.qsIg" },	// FLOAT
    {   0,   12,  132,     o(curr.D.qMass),          "D.qMass" },	// FLOAT
    {   0,   12,  132,      o(curr.D.qsIz),           "D.qsIz" },	// FLOAT
    {   0,   12,  132,    o(curr.D.qsMech),         "D.qsMech" },	// FLOAT
    {   0,   12,  132, o(curr.D.eqfVentHr),      "D.eqfVentHr" },	// FLOAT
    {   0,   12,  132,   o(curr.D.qlInfil),        "D.qlInfil" },	// FLOAT
    {   0,   12,  132,      o(curr.D.qlIg),           "D.qlIg" },	// FLOAT
    {   0,   12,  132,      o(curr.D.qlIz),           "D.qlIz" },	// FLOAT
    {   0,   12,  132,     o(curr.D.qlAir),          "D.qlAir" },	// FLOAT
    {   0,   12,  132,    o(curr.D.qlMech),         "D.qlMech" },	// FLOAT
    {   0,   12,  132,     o(curr.D.qsBal),          "D.qsBal" },	// FLOAT
    {   0,   12,  132,     o(curr.D.qlBal),          "D.qlBal" },	// FLOAT
    {   0,   12,  132,       o(curr.D.qlX),            "D.qlX" },	// FLOAT
    {   0,   12,  132,  o(curr.D.unMetHDH),       "D.unMetHDH" },	// FLOAT
    {   0,   12,  132,  o(curr.D.unMetCDH),       "D.unMetCDH" },	// FLOAT
    {   0,   12,  132,   o(curr.D.qscHvac),        "D.qscHvac" },	// FLOAT
    {   0,   12,  132,   o(curr.D.qshHvac),        "D.qshHvac" },	// FLOAT
    {   0,   12,  132,    o(curr.D.qcMech),         "D.qcMech" },	// FLOAT
    {   0,   12,  132,    o(curr.D.qhMech),         "D.qhMech" },	// FLOAT
    {   0,   12,  132,    o(curr.D.qvMech),         "D.qvMech" },	// FLOAT
    {   0,   12,  132,    o(curr.D.litDmd),         "D.litDmd" },	// FLOAT
    {   0,   12,  132,     o(curr.D.litEu),          "D.litEu" },	// FLOAT
    {   0,    1,  516,         o(curr.H.n),              "H.n" },	// INT
    {   0,    3,  516,   o(curr.H.nHrHeat),        "H.nHrHeat" },	// SI
    {   0,    3,  516,   o(curr.H.nHrCool),        "H.nHrCool" },	// SI
    {   0,    3,  516,   o(curr.H.nHrFanv),        "H.nHrFanv" },	// SI
    {   0,    3,  516,   o(curr.H.nHrNatv),        "H.nHrNatv" },	// SI
    {   0,    3,  516,o(curr.H.nHrCeilFan),     "H.nHrCeilFan" },	// SI
    {   0,   10,  516,     o(curr.H.nIter),          "H.nIter" },	// LI
    {   0,   10,  516, o(curr.H.nHrUnMetH),      "H.nHrUnMetH" },	// LI
    {   0,   10,  516, o(curr.H.nHrUnMetC),      "H.nHrUnMetC" },	// LI
    {   0,   10,  516,  o(curr.H.nShVentH),       "H.nShVentH" },	// LI
    {   0,   10,  516,    o(curr.H.nSubhr),         "H.nSubhr" },	// LI
    {   0,   10,  516,  o(curr.H.nSubhrLX),       "H.nSubhrLX" },	// LI
    {   0,   12,  516,      o(curr.H.tAir),           "H.tAir" },	// FLOAT
    {   0,   12,  516,      o(curr.H.tRad),           "H.tRad" },	// FLOAT
    {   0,   12,  516,   o(curr.H.PMV7730),        "H.PMV7730" },	// FLOAT
    {   0,   12,  516,   o(curr.H.PPD7730),        "H.PPD7730" },	// FLOAT
    {   0,   12,  516,    o(curr.H.ivAirX),         "H.ivAirX" },	// FLOAT
    {   0,   12,  516,       o(curr.H.pz0),            "H.pz0" },	// FLOAT
    {   0,   12,  516,      o(curr.H.wAir),           "H.wAir" },	// FLOAT
    {   0,   12,  516,     o(curr.H.qCond),          "H.qCond" },	// FLOAT
    {   0,   12,  516,   o(curr.H.qsInfil),        "H.qsInfil" },	// FLOAT
    {   0,   12,  516,      o(curr.H.qSlr),           "H.qSlr" },	// FLOAT
    {   0,   12,  516,      o(curr.H.qsIg),           "H.qsIg" },	// FLOAT
    {   0,   12,  516,     o(curr.H.qMass),          "H.qMass" },	// FLOAT
    {   0,   12,  516,      o(curr.H.qsIz),           "H.qsIz" },	// FLOAT
    {   0,   12,  516,    o(curr.H.qsMech),         "H.qsMech" },	// FLOAT
    {   0,   12,  516, o(curr.H.eqfVentHr),      "H.eqfVentHr" },	// FLOAT
    {   0,   12,  516,   o(curr.H.qlInfil),        "H.qlInfil" },	// FLOAT
    {   0,   12,  516,      o(curr.H.qlIg),           "H.qlIg" },	// FLOAT
    {   0,   12,  516,      o(curr.H.qlIz),           "H.qlIz" },	// FLOAT
    {   0,   12,  516,     o(curr.H.qlAir),          "H.qlAir" },	// FLOAT
    {   0,   12,  516,    o(curr.H.qlMech),         "H.qlMech" },	// FLOAT
    {   0,   12,  516,     o(curr.H.qsBal),          "H.qsBal" },	// FLOAT
    {   0,   12,  516,     o(curr.H.qlBal),          "H.qlBal" },	// FLOAT
    {   0,   12,  516,       o(curr.H.qlX),            "H.qlX" },	// FLOAT
    {   0,   12,  516,  o(curr.H.unMetHDH),       "H.unMetHDH" },	// FLOAT
    {   0,   12,  516,  o(curr.H.unMetCDH),       "H.unMetCDH" },	// FLOAT
    {   0,   12,  516,   o(curr.H.qscHvac),        "H.qscHvac" },	// FLOAT
    {   0,   12,  516,   o(curr.H.qshHvac),        "H.qshHvac" },	// FLOAT
    {   0,   12,  516,    o(curr.H.qcMech),         "H.qcMech" },	// FLOAT
    {   0,   12,  516,    o(curr.H.qhMech),         "H.qhMech" },	// FLOAT
    {   0,   12,  516,    o(curr.H.qvMech),         "H.qvMech" },	// FLOAT
    {   0,   12,  516,    o(curr.H.litDmd),         "H.litDmd" },	// FLOAT
    {   0,   12,  516,     o(curr.H.litEu),          "H.litEu" },	// FLOAT
    {   0,    1, 1028,         o(curr.S.n),              "S.n" },	// INT
    {   0,    3, 1028,   o(curr.S.nHrHeat),        "S.nHrHeat" },	// SI
    {   0,    3, 1028,   o(curr.S.nHrCool),        "S.nHrCool" },	// SI
    {   0,    3, 1028,   o(curr.S.nHrFanv),        "S.nHrFanv" },	// SI
    {   0,    3, 1028,   o(curr.S.nHrNatv),        "S.nHrNatv" },	// SI
    {   0,    3, 1028,o(curr.S.nHrCeilFan),     "S.nHrCeilFan" },	// SI
    {   0,   10, 1028,     o(curr.S.nIter),          "S.nIter" },	// LI
    {   0,   10, 1028, o(curr.S.nHrUnMetH),      "S.nHrUnMetH" },	// LI
    {   0,   10, 1028, o(curr.S.nHrUnMetC),      "S.nHrUnMetC" },	// LI
    {   0,   10, 1028,  o(curr.S.nShVentH),       "S.nShVentH" },	// LI
    {   0,   10, 1028,    o(curr.S.nSubhr),         "S.nSubhr" },	// LI
    {   0,   10, 1028,  o(curr.S.nSubhrLX),       "S.nSubhrLX" },	// LI
    {   0,   12, 1028,      o(curr.S.tAir),           "S.tAir" },	// FLOAT
    {   0,   12, 1028,      o(curr.S.tRad),           "S.tRad" },	// FLOAT
    {   0,   12, 1028,   o(curr.S.PMV7730),        "S.PMV7730" },	// FLOAT
    {   0,   12, 1028,   o(curr.S.PPD7730),        "S.PPD7730" },	// FLOAT
    {   0,   12, 1028,    o(curr.S.ivAirX),         "S.ivAirX" },	// FLOAT
    {   0,   12, 1028,       o(curr.S.pz0),            "S.pz0" },	// FLOAT
    {   0,   12, 1028,      o(curr.S.wAir),           "S.wAir" },	// FLOAT
    {   0,   12, 1028,     o(curr.S.qCond),          "S.qCond" },	// FLOAT
    {   0,   12, 1028,   o(curr.S.qsInfil),        "S.qsInfil" },	// FLOAT
    {   0,   12, 1028,      o(curr.S.qSlr),           "S.qSlr" },	// FLOAT
    {   0,   12, 1028,      o(curr.S.qsIg),           "S.qsIg" },	// FLOAT
    {   0,   12, 1028,     o(curr.S.qMass),          "S.qMass" },	// FLOAT
    {   0,   12, 1028,      o(curr.S.qsIz),           "S.qsIz" },	// FLOAT
    {   0,   12, 1028,    o(curr.S.qsMech),         "S.qsMech" },	// FLOAT
    {   0,   12, 1028, o(curr.S.eqfVentHr),      "S.eqfVentHr" },	// FLOAT
    {   0,   12, 1028,   o(curr.S.qlInfil),        "S.qlInfil" },	// FLOAT
    {   0,   12, 1028,      o(curr.S.qlIg),           "S.qlIg" },	// FLOAT
    {   0,   12, 1028,      o(curr.S.qlIz),           "S.qlIz" },	// FLOAT
    {   0,   12, 1028,     o(curr.S.qlAir),          "S.qlAir" },	// FLOAT
    {   0,   12, 1028,    o(curr.S.qlMech),         "S.qlMech" },	// FLOAT
    {   0,   12, 1028,     o(curr.S.qsBal),          "S.qsBal" },	// FLOAT
    {   0,   12, 1028,     o(curr.S.qlBal),          "S.qlBal" },	// FLOAT
    {   0,   12, 1028,       o(curr.S.qlX),            "S.qlX" },	// FLOAT
    {   0,   12, 1028,  o(curr.S.unMetHDH),       "S.unMetHDH" },	// FLOAT
    {   0,   12, 1028,  o(curr.S.unMetCDH),       "S.unMetCDH" },	// FLOAT
    {   0,   12, 1028,   o(curr.S.qscHvac),        "S.qscHvac" },	// FLOAT
    {   0,   12, 1028,   o(curr.S.qshHvac),        "S.qshHvac" },	// FLOAT
    {   0,   12, 1028,    o(curr.S.qcMech),         "S.qcMech" },	// FLOAT
    {   0,   12, 1028,    o(curr.S.qhMech),         "S.qhMech" },	// FLOAT
    {   0,   12, 1028,    o(curr.S.qvMech),         "S.qvMech" },	// FLOAT
    {   0,   12, 1028,    o(curr.S.litDmd),         "S.litDmd" },	// FLOAT
    {   0,   12, 1028,     o(curr.S.litEu),          "S.litEu" },	// FLOAT
    {   0,    1,   32,        o(prior.Y.n),        "prior.Y.n" },	// INT
    {   0,    3,   32,  o(prior.Y.nHrHeat),  "prior.Y.nHrHeat" },	// SI
    {   0,    3,   32,  o(prior.Y.nHrCool),  "prior.Y.nHrCool" },	// SI
    {   0,    3,   32,  o(prior.Y.nHrFanv),  "prior.Y.nHrFanv" },	// SI
    {   0,    3,   32,  o(prior.Y.nHrNatv),  "prior.Y.nHrNatv" },	// SI
    {   0,    3,   32,o(prior.Y.nHrCeilFan),"prior.Y.nHrCeilFan" },	// SI
    {   0,   10,   32,    o(prior.Y.nIter),    "prior.Y.nIter" },	// LI
    {   0,   10,   32,o(prior.Y.nHrUnMetH),"prior.Y.nHrUnMetH" },	// LI
    {   0,   10,   32,o(prior.Y.nHrUnMetC),"prior.Y.nHrUnMetC" },	// LI
    {   0,   10,   32, o(prior.Y.nShVentH), "prior.Y.nShVentH" },	// LI
    {   0,   10,   32,   o(prior.Y.nSubhr),   "prior.Y.nSubhr" },	// LI
    {   0,   10,   32, o(prior.Y.nSubhrLX), "prior.Y.nSubhrLX" },	// LI
    {   0,   12,   32,     o(prior.Y.tAir),     "prior.Y.tAir" },	// FLOAT
    {   0,   12,   32,     o(prior.Y.tRad),     "prior.Y.tRad" },	// FLOAT
    {   0,   12,   32,  o(prior.Y.PMV7730),  "prior.Y.PMV7730" },	// FLOAT
    {   0,   12,   32,  o(prior.Y.PPD7730),  "prior.Y.PPD7730" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.ivAirX),   "prior.Y.ivAirX" },	// FLOAT
    {   0,   12,   32,      o(prior.Y.pz0),      "prior.Y.pz0" },	// FLOAT
    {   0,   12,   32,     o(prior.Y.wAir),     "prior.Y.wAir" },	// FLOAT
    {   0,   12,   32,    o(prior.Y.qCond),    "prior.Y.qCond" },	// FLOAT
    {   0,   12,   32,  o(prior.Y.qsInfil),  "prior.Y.qsInfil" },	// FLOAT
    {   0,   12,   32,     o(prior.Y.qSlr),     "prior.Y.qSlr" },	// FLOAT
    {   0,   12,   32,     o(prior.Y.qsIg),     "prior.Y.qsIg" },	// FLOAT
    {   0,   12,   32,    o(prior.Y.qMass),    "prior.Y.qMass" },	// FLOAT
    {   0,   12,   32,     o(prior.Y.qsIz),     "prior.Y.qsIz" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.qsMech),   "prior.Y.qsMech" },	// FLOAT
    {   0,   12,   32,o(prior.Y.eqfVentHr),"prior.Y.eqfVentHr" },	// FLOAT
    {   0,   12,   32,  o(prior.Y.qlInfil),  "prior.Y.qlInfil" },	// FLOAT
    {   0,   12,   32,     o(prior.Y.qlIg),     "prior.Y.qlIg" },	// FLOAT
    {   0,   12,   32,     o(prior.Y.qlIz),     "prior.Y.qlIz" },	// FLOAT
    {   0,   12,   32,    o(prior.Y.qlAir),    "prior.Y.qlAir" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.qlMech),   "prior.Y.qlMech" },	// FLOAT
    {   0,   12,   32,    o(prior.Y.qsBal),    "prior.Y.qsBal" },	// FLOAT
    {   0,   12,   32,    o(prior.Y.qlBal),    "prior.Y.qlBal" },	// FLOAT
    {   0,   12,   32,      o(prior.Y.qlX),      "prior.Y.qlX" },	// FLOAT
    {   0,   12,   32, o(prior.Y.unMetHDH), "prior.Y.unMetHDH" },	// FLOAT
    {   0,   12,   32, o(prior.Y.unMetCDH), "prior.Y.unMetCDH" },	// FLOAT
    {   0,   12,   32,  o(prior.Y.qscHvac),  "prior.Y.qscHvac" },	// FLOAT
    {   0,   12,   32,  o(prior.Y.qshHvac),  "prior.Y.qshHvac" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.qcMech),   "prior.Y.qcMech" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.qhMech),   "prior.Y.qhMech" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.qvMech),   "prior.Y.qvMech" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.litDmd),   "prior.Y.litDmd" },	// FLOAT
    {   0,   12,   32,    o(prior.Y.litEu),    "prior.Y.litEu" },	// FLOAT
    {   0,    1,   64,        o(prior.M.n),        "prior.M.n" },	// INT
    {   0,    3,   64,  o(prior.M.nHrHeat),  "prior.M.nHrHeat" },	// SI
    {   0,    3,   64,  o(prior.M.nHrCool),  "prior.M.nHrCool" },	// SI
    {   0,    3,   64,  o(prior.M.nHrFanv),  "prior.M.nHrFanv" },	// SI
    {   0,    3,   64,  o(prior.M.nHrNatv),  "prior.M.nHrNatv" },	// SI
    {   0,    3,   64,o(prior.M.nHrCeilFan),"prior.M.nHrCeilFan" },	// SI
    {   0,   10,   64,    o(prior.M.nIter),    "prior.M.nIter" },	// LI
    {   0,   10,   64,o(prior.M.nHrUnMetH),"prior.M.nHrUnMetH" },	// LI
    {   0,   10,   64,o(prior.M.nHrUnMetC),"prior.M.nHrUnMetC" },	// LI
    {   0,   10,   64, o(prior.M.nShVentH), "prior.M.nShVentH" },	// LI
    {   0,   10,   64,   o(prior.M.nSubhr),   "prior.M.nSubhr" },	// LI
    {   0,   10,   64, o(prior.M.nSubhrLX), "prior.M.nSubhrLX" },	// LI
    {   0,   12,   64,     o(prior.M.tAir),     "prior.M.tAir" },	// FLOAT
    {   0,   12,   64,     o(prior.M.tRad),     "prior.M.tRad" },	// FLOAT
    {   0,   12,   64,  o(prior.M.PMV7730),  "prior.M.PMV7730" },	// FLOAT
    {   0,   12,   64,  o(prior.M.PPD7730),  "prior.M.PPD7730" },	// FLOAT
    {   0,   12,   64,   o(prior.M.ivAirX),   "prior.M.ivAirX" },	// FLOAT
    {   0,   12,   64,      o(prior.M.pz0),      "prior.M.pz0" },	// FLOAT
    {   0,   12,   64,     o(prior.M.wAir),     "prior.M.wAir" },	// FLOAT
    {   0,   12,   64,    o(prior.M.qCond),    "prior.M.qCond" },	// FLOAT
    {   0,   12,   64,  o(prior.M.qsInfil),  "prior.M.qsInfil" },	// FLOAT
    {   0,   12,   64,     o(prior.M.qSlr),     "prior.M.qSlr" },	// FLOAT
    {   0,   12,   64,     o(prior.M.qsIg),     "prior.M.qsIg" },	// FLOAT
    {   0,   12,   64,    o(prior.M.qMass),    "prior.M.qMass" },	// FLOAT
    {   0,   12,   64,     o(prior.M.qsIz),     "prior.M.qsIz" },	// FLOAT
    {   0,   12,   64,   o(prior.M.qsMech),   "prior.M.qsMech" },	// FLOAT
    {   0,   12,   64,o(prior.M.eqfVentHr),"prior.M.eqfVentHr" },	// FLOAT
    {   0,   12,   64,  o(prior.M.qlInfil),  "prior.M.qlInfil" },	// FLOAT
    {   0,   12,   64,     o(prior.M.qlIg),     "prior.M.qlIg" },	// FLOAT
    {   0,   12,   64,     o(prior.M.qlIz),     "prior.M.qlIz" },	// FLOAT
    {   0,   12,   64,    o(prior.M.qlAir),    "prior.M.qlAir" },	// FLOAT
    {   0,   12,   64,   o(prior.M.qlMech),   "prior.M.qlMech" },	// FLOAT
    {   0,   12,   64,    o(prior.M.qsBal),    "prior.M.qsBal" },	// FLOAT
    {   0,   12,   64,    o(prior.M.qlBal),    "prior.M.qlBal" },	// FLOAT
    {   0,   12,   64,      o(prior.M.qlX),      "prior.M.qlX" },	// FLOAT
    {   0,   12,   64, o(prior.M.unMetHDH), "prior.M.unMetHDH" },	// FLOAT
    {   0,   12,   64, o(prior.M.unMetCDH), "prior.M.unMetCDH" },	// FLOAT
    {   0,   12,   64,  o(prior.M.qscHvac),  "prior.M.qscHvac" },	// FLOAT
    {   0,   12,   64,  o(prior.M.qshHvac),  "prior.M.qshHvac" },	// FLOAT
    {   0,   12,   64,   o(prior.M.qcMech),   "prior.M.qcMech" },	// FLOAT
    {   0,   12,   64,   o(prior.M.qhMech),   "prior.M.qhMech" },	// FLOAT
    {   0,   12,   64,   o(prior.M.qvMech),   "prior.M.qvMech" },	// FLOAT
    {   0,   12,   64,   o(prior.M.litDmd),   "prior.M.litDmd" },	// FLOAT
    {   0,   12,   64,    o(prior.M.litEu),    "prior.M.litEu" },	// FLOAT
    {   0,    1,  128,        o(prior.D.n),        "prior.D.n" },	// INT
    {   0,    3,  128,  o(prior.D.nHrHeat),  "prior.D.nHrHeat" },	// SI
    {   0,    3,  128,  o(prior.D.nHrCool),  "prior.D.nHrCool" },	// SI
    {   0,    3,  128,  o(prior.D.nHrFanv),  "prior.D.nHrFanv" },	// SI
    {   0,    3,  128,  o(prior.D.nHrNatv),  "prior.D.nHrNatv" },	// SI
    {   0,    3,  128,o(prior.D.nHrCeilFan),"prior.D.nHrCeilFan" },	// SI
    {   0,   10,  128,    o(prior.D.nIter),    "prior.D.nIter" },	// LI
    {   0,   10,  128,o(prior.D.nHrUnMetH),"prior.D.nHrUnMetH" },	// LI
    {   0,   10,  128,o(prior.D.nHrUnMetC),"prior.D.nHrUnMetC" },	// LI
    {   0,   10,  128, o(prior.D.nShVentH), "prior.D.nShVentH" },	// LI
    {   0,   10,  128,   o(prior.D.nSubhr),   "prior.D.nSubhr" },	// LI
    {   0,   10,  128, o(prior.D.nSubhrLX), "prior.D.nSubhrLX" },	// LI
    {   0,   12,  128,     o(prior.D.tAir),     "prior.D.tAir" },	// FLOAT
    {   0,   12,  128,     o(prior.D.tRad),     "prior.D.tRad" },	// FLOAT
    {   0,   12,  128,  o(prior.D.PMV7730),  "prior.D.PMV7730" },	// FLOAT
    {   0,   12,  128,  o(prior.D.PPD7730),  "prior.D.PPD7730" },	// FLOAT
    {   0,   12,  128,   o(prior.D.ivAirX),   "prior.D.ivAirX" },	// FLOAT
    {   0,   12,  128,      o(prior.D.pz0),      "prior.D.pz0" },	// FLOAT
    {   0,   12,  128,     o(prior.D.wAir),     "prior.D.wAir" },	// FLOAT
    {   0,   12,  128,    o(prior.D.qCond),    "prior.D.qCond" },	// FLOAT
    {   0,   12,  128,  o(prior.D.qsInfil),  "prior.D.qsInfil" },	// FLOAT
    {   0,   12,  128,     o(prior.D.qSlr),     "prior.D.qSlr" },	// FLOAT
    {   0,   12,  128,     o(prior.D.qsIg),     "prior.D.qsIg" },	// FLOAT
    {   0,   12,  128,    o(prior.D.qMass),    "prior.D.qMass" },	// FLOAT
    {   0,   12,  128,     o(prior.D.qsIz),     "prior.D.qsIz" },	// FLOAT
    {   0,   12,  128,   o(prior.D.qsMech),   "prior.D.qsMech" },	// FLOAT
    {   0,   12,  128,o(prior.D.eqfVentHr),"prior.D.eqfVentHr" },	// FLOAT
    {   0,   12,  128,  o(prior.D.qlInfil),  "prior.D.qlInfil" },	// FLOAT
    {   0,   12,  128,     o(prior.D.qlIg),     "prior.D.qlIg" },	// FLOAT
    {   0,   12,  128,     o(prior.D.qlIz),     "prior.D.qlIz" },	// FLOAT
    {   0,   12,  128,    o(prior.D.qlAir),    "prior.D.qlAir" },	// FLOAT
    {   0,   12,  128,   o(prior.D.qlMech),   "prior.D.qlMech" },	// FLOAT
    {   0,   12,  128,    o(prior.D.qsBal),    "prior.D.qsBal" },	// FLOAT
    {   0,   12,  128,    o(prior.D.qlBal),    "prior.D.qlBal" },	// FLOAT
    {   0,   12,  128,      o(prior.D.qlX),      "prior.D.qlX" },	// FLOAT
    {   0,   12,  128, o(prior.D.unMetHDH), "prior.D.unMetHDH" },	// FLOAT
    {   0,   12,  128, o(prior.D.unMetCDH), "prior.D.unMetCDH" },	// FLOAT
    {   0,   12,  128,  o(prior.D.qscHvac),  "prior.D.qscHvac" },	// FLOAT
    {   0,   12,  128,  o(prior.D.qshHvac),  "prior.D.qshHvac" },	// FLOAT
    {   0,   12,  128,   o(prior.D.qcMech),   "prior.D.qcMech" },	// FLOAT
    {   0,   12,  128,   o(prior.D.qhMech),   "prior.D.qhMech" },	// FLOAT
    {   0,   12,  128,   o(prior.D.qvMech),   "prior.D.qvMech" },	// FLOAT
    {   0,   12,  128,   o(prior.D.litDmd),   "prior.D.litDmd" },	// FLOAT
    {   0,   12,  128,    o(prior.D.litEu),    "prior.D.litEu" },	// FLOAT
    {   0,    1,  512,        o(prior.H.n),        "prior.H.n" },	// INT
    {   0,    3,  512,  o(prior.H.nHrHeat),  "prior.H.nHrHeat" },	// SI
    {   0,    3,  512,  o(prior.H.nHrCool),  "prior.H.nHrCool" },	// SI
    {   0,    3,  512,  o(prior.H.nHrFanv),  "prior.H.nHrFanv" },	// SI
    {   0,    3,  512,  o(prior.H.nHrNatv),  "prior.H.nHrNatv" },	// SI
    {   0,    3,  512,o(prior.H.nHrCeilFan),"prior.H.nHrCeilFan" },	// SI
    {   0,   10,  512,    o(prior.H.nIter),    "prior.H.nIter" },	// LI
    {   0,   10,  512,o(prior.H.nHrUnMetH),"prior.H.nHrUnMetH" },	// LI
    {   0,   10,  512,o(prior.H.nHrUnMetC),"prior.H.nHrUnMetC" },	// LI
    {   0,   10,  512, o(prior.H.nShVentH), "prior.H.nShVentH" },	// LI
    {   0,   10,  512,   o(prior.H.nSubhr),   "prior.H.nSubhr" },	// LI
    {   0,   10,  512, o(prior.H.nSubhrLX), "prior.H.nSubhrLX" },	// LI
    {   0,   12,  512,     o(prior.H.tAir),     "prior.H.tAir" },	// FLOAT
    {   0,   12,  512,     o(prior.H.tRad),     "prior.H.tRad" },	// FLOAT
    {   0,   12,  512,  o(prior.H.PMV7730),  "prior.H.PMV7730" },	// FLOAT
    {   0,   12,  512,  o(prior.H.PPD7730),  "prior.H.PPD7730" },	// FLOAT
    {   0,   12,  512,   o(prior.H.ivAirX),   "prior.H.ivAirX" },	// FLOAT
    {   0,   12,  512,      o(prior.H.pz0),      "prior.H.pz0" },	// FLOAT
    {   0,   12,  512,     o(prior.H.wAir),     "prior.H.wAir" },	// FLOAT
    {   0,   12,  512,    o(prior.H.qCond),    "prior.H.qCond" },	// FLOAT
    {   0,   12,  512,  o(prior.H.qsInfil),  "prior.H.qsInfil" },	// FLOAT
    {   0,   12,  512,     o(prior.H.qSlr),     "prior.H.qSlr" },	// FLOAT
    {   0,   12,  512,     o(prior.H.qsIg),     "prior.H.qsIg" },	// FLOAT
    {   0,   12,  512,    o(prior.H.qMass),    "prior.H.qMass" },	// FLOAT
    {   0,   12,  512,     o(prior.H.qsIz),     "prior.H.qsIz" },	// FLOAT
    {   0,   12,  512,   o(prior.H.qsMech),   "prior.H.qsMech" },	// FLOAT
    {   0,   12,  512,o(prior.H.eqfVentHr),"prior.H.eqfVentHr" },	// FLOAT
    {   0,   12,  512,  o(prior.H.qlInfil),  "prior.H.qlInfil" },	// FLOAT
    {   0,   12,  512,     o(prior.H.qlIg),     "prior.H.qlIg" },	// FLOAT
    {   0,   12,  512,     o(prior.H.qlIz),     "prior.H.qlIz" },	// FLOAT
    {   0,   12,  512,    o(prior.H.qlAir),    "prior.H.qlAir" },	// FLOAT
    {   0,   12,  512,   o(prior.H.qlMech),   "prior.H.qlMech" },	// FLOAT
    {   0,   12,  512,    o(prior.H.qsBal),    "prior.H.qsBal" },	// FLOAT
    {   0,   12,  512,    o(prior.H.qlBal),    "prior.H.qlBal" },	// FLOAT
    {   0,   12,  512,      o(prior.H.qlX),      "prior.H.qlX" },	// FLOAT
    {   0,   12,  512, o(prior.H.unMetHDH), "prior.H.unMetHDH" },	// FLOAT
    {   0,   12,  512, o(prior.H.unMetCDH), "prior.H.unMetCDH" },	// FLOAT
    {   0,   12,  512,  o(prior.H.qscHvac),  "prior.H.qscHvac" },	// FLOAT
    {   0,   12,  512,  o(prior.H.qshHvac),  "prior.H.qshHvac" },	// FLOAT
    {   0,   12,  512,   o(prior.H.qcMech),   "prior.H.qcMech" },	// FLOAT
    {   0,   12,  512,   o(prior.H.qhMech),   "prior.H.qhMech" },	// FLOAT
    {   0,   12,  512,   o(prior.H.qvMech),   "prior.H.qvMech" },	// FLOAT
    {   0,   12,  512,   o(prior.H.litDmd),   "prior.H.litDmd" },	// FLOAT
    {   0,   12,  512,    o(prior.H.litEu),    "prior.H.litEu" },	// FLOAT
    {   0,    1, 1024,        o(prior.S.n),        "prior.S.n" },	// INT
    {   0,    3, 1024,  o(prior.S.nHrHeat),  "prior.S.nHrHeat" },	// SI
    {   0,    3, 1024,  o(prior.S.nHrCool),  "prior.S.nHrCool" },	// SI
    {   0,    3, 1024,  o(prior.S.nHrFanv),  "prior.S.nHrFanv" },	// SI
    {   0,    3, 1024,  o(prior.S.nHrNatv),  "prior.S.nHrNatv" },	// SI
    {   0,    3, 1024,o(prior.S.nHrCeilFan),"prior.S.nHrCeilFan" },	// SI
    {   0,   10, 1024,    o(prior.S.nIter),    "prior.S.nIter" },	// LI
    {   0,   10, 1024,o(prior.S.nHrUnMetH),"prior.S.nHrUnMetH" },	// LI
    {   0,   10, 1024,o(prior.S.nHrUnMetC),"prior.S.nHrUnMetC" },	// LI
    {   0,   10, 1024, o(prior.S.nShVentH), "prior.S.nShVentH" },	// LI
    {   0,   10, 1024,   o(prior.S.nSubhr),   "prior.S.nSubhr" },	// LI
    {   0,   10, 1024, o(prior.S.nSubhrLX), "prior.S.nSubhrLX" },	// LI
    {   0,   12, 1024,     o(prior.S.tAir),     "prior.S.tAir" },	// FLOAT
    {   0,   12, 1024,     o(prior.S.tRad),     "prior.S.tRad" },	// FLOAT
    {   0,   12, 1024,  o(prior.S.PMV7730),  "prior.S.PMV7730" },	// FLOAT
    {   0,   12, 1024,  o(prior.S.PPD7730),  "prior.S.PPD7730" },	// FLOAT
    {   0,   12, 1024,   o(prior.S.ivAirX),   "prior.S.ivAirX" },	// FLOAT
    {   0,   12, 1024,      o(prior.S.pz0),      "prior.S.pz0" },	// FLOAT
    {   0,   12, 1024,     o(prior.S.wAir),     "prior.S.wAir" },	// FLOAT
    {   0,   12, 1024,    o(prior.S.qCond),    "prior.S.qCond" },	// FLOAT
    {   0,   12, 1024,  o(prior.S.qsInfil),  "prior.S.qsInfil" },	// FLOAT
    {   0,   12, 1024,     o(prior.S.qSlr),     "prior.S.qSlr" },	// FLOAT
    {   0,   12, 1024,     o(prior.S.qsIg),     "prior.S.qsIg" },	// FLOAT
    {   0,   12, 1024,    o(prior.S.qMass),    "prior.S.qMass" },	// FLOAT
    {   0,   12, 1024,     o(prior.S.qsIz),     "prior.S.qsIz" },	// FLOAT
    {   0,   12, 1024,   o(prior.S.qsMech),   "prior.S.qsMech" },	// FLOAT
    {   0,   12, 1024,o(prior.S.eqfVentHr),"prior.S.eqfVentHr" },	// FLOAT
    {   0,   12, 1024,  o(prior.S.qlInfil),  "prior.S.qlInfil" },	// FLOAT
    {   0,   12, 1024,     o(prior.S.qlIg),     "prior.S.qlIg" },	// FLOAT
    {   0,   12, 1024,     o(prior.S.qlIz),     "prior.S.qlIz" },	// FLOAT
    {   0,   12, 1024,    o(prior.S.qlAir),    "prior.S.qlAir" },	// FLOAT
    {   0,   12, 1024,   o(prior.S.qlMech),   "prior.S.qlMech" },	// FLOAT
    {   0,   12, 1024,    o(prior.S.qsBal),    "prior.S.qsBal" },	// FLOAT
    {   0,   12, 1024,    o(prior.S.qlBal),    "prior.S.qlBal" },	// FLOAT
    {   0,   12, 1024,      o(prior.S.qlX),      "prior.S.qlX" },	// FLOAT
    {   0,   12, 1024, o(prior.S.unMetHDH), "prior.S.unMetHDH" },	// FLOAT
    {   0,   12, 1024, o(prior.S.unMetCDH), "prior.S.unMetCDH" },	// FLOAT
    {   0,   12, 1024,  o(prior.S.qscHvac),  "prior.S.qscHvac" },	// FLOAT
    {   0,   12, 1024,  o(prior.S.qshHvac),  "prior.S.qshHvac" },	// FLOAT
    {   0,   12, 1024,   o(prior.S.qcMech),   "prior.S.qcMech" },	// FLOAT
    {   0,   12, 1024,   o(prior.S.qhMech),   "prior.S.qhMech" },	// FLOAT
    {   0,   12, 1024,   o(prior.S.qvMech),   "prior.S.qvMech" },	// FLOAT
    {   0,   12, 1024,   o(prior.S.litDmd),   "prior.S.litDmd" },	// FLOAT
    {   0,   12, 1024,    o(prior.S.litEu),    "prior.S.litEu" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirZNRES

struct SFIR sfirANDAT[] =	// fields info for RTANDAT
{
 #define o(m) offsetof(ANDAT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   1,   70,   32,       o(ad_pIZXRAT),          "pIZXRAT" },	// IZXRATP
    {   0,   29,  512,            o(ad_Ae),               "Ae" },	// AREA_GEZ
    {   0,   29,  512,         o(ad_AeLin),            "AeLin" },	// AREA_GEZ
    {   0,   19, 1028,          o(ad_delP),             "delP" },	// DBL
    {   0,   19, 1028,         o(ad_mdotP),            "mdotP" },	// DBL
    {   0,   19, 1028,          o(ad_dmdp),             "dmdp" },	// DBL
    {   0,   19, 1028,         o(ad_mdotB),            "mdotB" },	// DBL
    {   0,   19, 1028,         o(ad_mdotX),            "mdotX" },	// DBL
    {   0,   19, 1028,        o(ad_xDelpF),           "xDelpF" },	// DBL
    {   0,   19, 1028,          o(ad_xMbm),             "xMbm" },	// DBL
    {   0,   19, 1028,         o(ad_tdFan),            "tdFan" },	// DBL
    {   0,   19, 1028,          o(ad_pFan),             "pFan" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirANDAT

struct SFIR sfirIZXRAT[] =	// fields info for RTIZXRAT
{
 #define o(m) offsetof(IZXRAT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,   32,           o(iz_zi1),              "zi1" },	// TI
    {   0,   24,   32,           o(iz_zi2),              "zi2" },	// TI
    {   0,   59,  512,            o(iz_ua),               "ua" },	// UA
    {   0,   99,    1,       o(iz_nvcntrl),          "nvcntrl" },	// IZNVTYCH
    {   0,  137,   32,        o(iz_afCatI),           "afCatI" },	// AFCAT
    {   0,    3,   32,     o(iz_afMtrCat1),        "afMtrCat1" },	// SI
    {   0,    3,   32,     o(iz_afMtrCat2),        "afMtrCat2" },	// SI
    {   0,   29,  512,            o(iz_a1),               "a1" },	// AREA_GEZ
    {   0,   29,  512,            o(iz_a2),               "a2" },	// AREA_GEZ
    {   0,   26,    1,            o(iz_L1),               "L1" },	// LEN_GZ
    {   0,   26,    1,            o(iz_L2),               "L2" },	// LEN_GZ
    {   0,   12,    1,            o(iz_hz),               "hz" },	// FLOAT
    {   0,   13,    1,    o(iz_stairAngle),       "stairAngle" },	// FLOAT_GEZ
    {   0,   18,    1,            o(iz_cd),               "cd" },	// FRAC_GZ
    {   0,   12,   32,           o(iz_exp),              "exp" },	// FLOAT
    {   0,   12,    1,           o(iz_cpr),              "cpr" },	// FLOAT
    {   0,   32, 1024,         o(iz_vfMin),            "vfMin" },	// AFLOW
    {   0,   32, 1024,         o(iz_vfMax),            "vfMax" },	// AFLOW
    {   0,   17, 1024,          o(iz_ASEF),             "ASEF" },	// FRAC
    {   0,   17, 1024,           o(iz_LEF),              "LEF" },	// FRAC
    {   0,   17, 1024,           o(iz_SRE),              "SRE" },	// FRAC
    {   0,   17, 1024,          o(iz_ASRE),             "ASRE" },	// FRAC
    {   0,   17, 1024,    o(iz_RVFanHeatF),       "RVFanHeatF" },	// FRAC
    {   0,   12, 1024,      o(iz_vfExhRat),         "vfExhRat" },	// FLOAT
    {   0,   17, 1024,          o(iz_EATR),             "EATR" },	// FRAC
    {   0,  140,    3,     o(iz_fan.fanTy),        "fan.fanTy" },	// FANTYCH
    {   0,   33, 1029,      o(iz_fan.vfDs),         "fan.vfDs" },	// AFLOW_GZ
    {   0,   32,    3,   o(iz_fan.vfDs_As),      "fan.vfDs_As" },	// AFLOW
    {   0,   32,    3,o(iz_fan.vfDs_AsNov),   "fan.vfDs_AsNov" },	// AFLOW
    {   0,   12,    3,     o(iz_fan.vfMxF),        "fan.vfMxF" },	// FLOAT
    {   0,   37,   33,     o(iz_fan.press),        "fan.press" },	// PRESAIR_GEZ
    {   0,   18,   33,       o(iz_fan.eff),          "fan.eff" },	// FRAC_GZ
    {   0,   53,   33,  o(iz_fan.shaftPwr),     "fan.shaftPwr" },	// BHP_GZ
    {   0,   14,   33,   o(iz_fan.elecPwr),      "fan.elecPwr" },	// FLOAT_GZ
    {   0,  142,   33,  o(iz_fan.fn_motTy),        "fan.motTy" },	// MOTTYCH
    {   0,   18,    3,    o(iz_fan.motEff),       "fan.motEff" },	// FRAC_GZ
    {   0,  143,    3,    o(iz_fan.motPos),       "fan.motPos" },	// MOTPOSCH
    {   0,   12,    3,o(iz_fan.curvePy.k[0]), "fan.curvePy.k[0]" },	// FLOAT
    {   0,   12,    3,o(iz_fan.curvePy.k[1]), "fan.curvePy.k[1]" },	// FLOAT
    {   0,   12,    3,o(iz_fan.curvePy.k[2]), "fan.curvePy.k[2]" },	// FLOAT
    {   0,   12,    3,o(iz_fan.curvePy.k[3]), "fan.curvePy.k[3]" },	// FLOAT
    {   0,   12,    3,o(iz_fan.curvePy.k[4]), "fan.curvePy.k[4]" },	// FLOAT
    {   0,   12,    3,o(iz_fan.curvePy.k[5]), "fan.curvePy.k[5]" },	// FLOAT
    {   0,   24,    1,   o(iz_fan.fn_mtri),         "fan.mtri" },	// TI
    {   0,  136,    3, o(iz_fan.fn_endUse),       "fan.endUse" },	// ENDUSECH
    {   0,    6,   33,      o(iz_fan.ausz),         "fan.ausz" },	// BOO
    {   0,   48, 1025,  o(iz_fan.outPower),     "fan.outPower" },	// POWER
    {   0,   48, 1025,  o(iz_fan.airPower),     "fan.airPower" },	// POWER
    {   0,   35, 1029,       o(iz_fan.cMx),          "fan.cMx" },	// CFLOW
    {   0,   35, 1029,         o(iz_fan.c),            "fan.c" },	// CFLOW
    {   0,   42, 1029,         o(iz_fan.t),            "fan.t" },	// TEMP
    {   0,   17, 1029,      o(iz_fan.frOn),         "fan.frOn" },	// FRAC
    {   0,   48, 1029,         o(iz_fan.p),            "fan.p" },	// POWER
    {   0,   48, 1029,         o(iz_fan.q),            "fan.q" },	// POWER
    {   0,   44, 1029,        o(iz_fan.dT),           "fan.dT" },	// TEMPDIFF
    {   0,   48, 1029,   o(iz_fan.qAround),      "fan.qAround" },	// POWER
    {   0,   12,   32,       o(iz_nvcoeff),          "nvcoeff" },	// FLOAT
    {   0,   19, 1028,   o(iz_air1.as_tdb),         "air1.tdb" },	// DBL
    {   0,   19, 1028,     o(iz_air1.as_w),           "air1.w" },	// DBL
    {   0,   19, 1028,   o(iz_air2.as_tdb),         "air2.tdb" },	// DBL
    {   0,   19, 1028,     o(iz_air2.as_w),           "air2.w" },	// DBL
    {   0,   12, 1024,          o(iz_rho1),             "rho1" },	// FLOAT
    {   0,   12, 1024,          o(iz_rho2),             "rho2" },	// FLOAT
    {   1,   12, 1024,         o(iz_pres2),            "pres2" },	// FLOAT
    {   1,   70, 1060,o(iz_ad[0].ad_pIZXRAT),    "ad[0].pIZXRAT" },	// IZXRATP
    {   0,   29, 1540,   o(iz_ad[0].ad_Ae),         "ad[0].Ae" },	// AREA_GEZ
    {   0,   29, 1540,o(iz_ad[0].ad_AeLin),      "ad[0].AeLin" },	// AREA_GEZ
    {   0,   19, 1028, o(iz_ad[0].ad_delP),       "ad[0].delP" },	// DBL
    {   0,   19, 1028,o(iz_ad[0].ad_mdotP),      "ad[0].mdotP" },	// DBL
    {   0,   19, 1028, o(iz_ad[0].ad_dmdp),       "ad[0].dmdp" },	// DBL
    {   0,   19, 1028,o(iz_ad[0].ad_mdotB),      "ad[0].mdotB" },	// DBL
    {   0,   19, 1028,o(iz_ad[0].ad_mdotX),      "ad[0].mdotX" },	// DBL
    {   0,   19, 1028,o(iz_ad[0].ad_xDelpF),     "ad[0].xDelpF" },	// DBL
    {   0,   19, 1028, o(iz_ad[0].ad_xMbm),       "ad[0].xMbm" },	// DBL
    {   0,   19, 1028,o(iz_ad[0].ad_tdFan),      "ad[0].tdFan" },	// DBL
    {   0,   19, 1028, o(iz_ad[0].ad_pFan),       "ad[0].pFan" },	// DBL
    {   1,   70, 1060,o(iz_ad[1].ad_pIZXRAT),    "ad[1].pIZXRAT" },	// IZXRATP
    {   0,   29, 1540,   o(iz_ad[1].ad_Ae),         "ad[1].Ae" },	// AREA_GEZ
    {   0,   29, 1540,o(iz_ad[1].ad_AeLin),      "ad[1].AeLin" },	// AREA_GEZ
    {   0,   19, 1028, o(iz_ad[1].ad_delP),       "ad[1].delP" },	// DBL
    {   0,   19, 1028,o(iz_ad[1].ad_mdotP),      "ad[1].mdotP" },	// DBL
    {   0,   19, 1028, o(iz_ad[1].ad_dmdp),       "ad[1].dmdp" },	// DBL
    {   0,   19, 1028,o(iz_ad[1].ad_mdotB),      "ad[1].mdotB" },	// DBL
    {   0,   19, 1028,o(iz_ad[1].ad_mdotX),      "ad[1].mdotX" },	// DBL
    {   0,   19, 1028,o(iz_ad[1].ad_xDelpF),     "ad[1].xDelpF" },	// DBL
    {   0,   19, 1028, o(iz_ad[1].ad_xMbm),       "ad[1].xMbm" },	// DBL
    {   0,   19, 1028,o(iz_ad[1].ad_tdFan),      "ad[1].tdFan" },	// DBL
    {   0,   19, 1028, o(iz_ad[1].ad_pFan),       "ad[1].pFan" },	// DBL
    {   0,   12, 1028,        o(iz_amfNom),           "amfNom" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirIZXRAT

struct SFIR sfirAIRNET[] =	// fields info for RTAIRNET
{
 #define o(m) offsetof(AIRNET,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   21,   32,           o(an_jac),              "jac" },	// DBLP
    {   0,   21,   32,            o(an_V1),               "V1" },	// DBLP
    {   0,   21,   32,            o(an_V2),               "V2" },	// DBLP
    {   0,   21,   32,       o(an_mdotAbs),          "mdotAbs" },	// DBLP
    {   0,    2,   32,       o(an_didLast),          "didLast" },	// INTP
    {   0,    1,   32,            o(an_nz),               "nz" },	// INT
    {   0,    1,   32,o(an_resultsClear[0]),  "resultsClear[0]" },	// INT
    {   0,    1,   32,o(an_resultsClear[1]),  "resultsClear[1]" },	// INT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAIRNET

struct SFIR sfirDBC[] =	// fields info for RTDBC
{
 #define o(m) offsetof(DBC,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,   17,  256,        o(sb_absSlr),           "absSlr" },	// FRAC
    {   2,   19,  256,      o(sb_awAbsSlr),         "awAbsSlr" },	// DBL
    {   2,   17,   32,         o(sb_epsLW),            "epsLW" },	// FRAC
    {   2,   24,   32,            o(sb_zi),               "zi" },	// TI
    {   2,   19,   32,             o(sb_F),                "F" },	// DBL
    {   2,   19,   32,            o(sb_Fp),               "Fp" },	// DBL
    {   2,   19,   32,         o(sb_frRad),            "frRad" },	// DBL
    {   2,   19,   32,          o(sb_fSky),             "fSky" },	// DBL
    {   2,   19,   32,          o(sb_fAir),             "fAir" },	// DBL
    {   2,   12, 1028,         o(sb_hcNat),            "hcNat" },	// FLOAT
    {   2,   12, 1028,         o(sb_hcFrc),            "hcFrc" },	// FLOAT
    {   2,   12, 1028,        o(sb_hcMult),           "hcMult" },	// FLOAT
    {   2,   12, 1028,           o(sb_hxa),              "hxa" },	// FLOAT
    {   2,   12, 1028,           o(sb_hxr),              "hxr" },	// FLOAT
    {   2,   12, 1028,         o(sb_hxtot),            "hxtot" },	// FLOAT
    {   2,   19, 1028,          o(sb_uRat),             "uRat" },	// DBL
    {   2,   19, 1028,          o(sb_fRat),             "fRat" },	// DBL
    {   2,   19, 1028,            o(sb_cx),               "cx" },	// DBL
    {   2,   19, 1028,  o(sb_sgTarg.st_bm),        "sgTarg.bm" },	// DBL
    {   2,   19, 1028,  o(sb_sgTarg.st_df),        "sgTarg.df" },	// DBL
    {   2,   19, 1028, o(sb_sgTarg.st_tot),       "sgTarg.tot" },	// DBL
    {   2,   19, 1028,            o(sb_sg),               "sg" },	// DBL
    {   2,   12, 1028,          o(sb_tSrf),             "tSrf" },	// FLOAT
    {   2,   12, 1024,        o(sb_tSrfls),           "tSrfls" },	// FLOAT
    {   2,   19, 1028,         o(sb_qrAbs),            "qrAbs" },	// DBL
    {   2,   12, 1028,           o(sb_txa),              "txa" },	// FLOAT
    {   2,   12, 1028,           o(sb_txr),              "txr" },	// FLOAT
    {   2,   12, 1028,           o(sb_txe),              "txe" },	// FLOAT
    {   2,   19, 1028,             o(sb_w),                "w" },	// DBL
    {   2,   19, 1028,          o(sb_qSrf),             "qSrf" },	// DBL
    {   0,   87,    1,           o(sb_pDS),              "pDS" },	// DUCTSEGP
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDBC

struct SFIR sfirDUCTSEG[] =	// fields info for RTDUCTSEG
{
 #define o(m) offsetof(DUCTSEG,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  148,    1,            o(ds_ty),               "ty" },	// DUCTTYCH
    {   2,   17, 1280,o(ds_sbcO.sb_absSlr),           "absSlr" },	// FRAC
    {   2,   19, 1280,o(ds_sbcO.sb_awAbsSlr),         "awAbsSlr" },	// DBL
    {   2,   17, 1056, o(ds_sbcO.sb_epsLW),            "epsLW" },	// FRAC
    {   2,   24, 1056,    o(ds_sbcO.sb_zi),               "zi" },	// TI
    {   2,   19, 1056,     o(ds_sbcO.sb_F),                "F" },	// DBL
    {   2,   19, 1056,    o(ds_sbcO.sb_Fp),               "Fp" },	// DBL
    {   2,   19, 1056, o(ds_sbcO.sb_frRad),            "frRad" },	// DBL
    {   2,   19, 1056,  o(ds_sbcO.sb_fSky),             "fSky" },	// DBL
    {   2,   19, 1056,  o(ds_sbcO.sb_fAir),             "fAir" },	// DBL
    {   2,   12, 1028, o(ds_sbcO.sb_hcNat),            "hcNat" },	// FLOAT
    {   2,   12, 1028, o(ds_sbcO.sb_hcFrc),            "hcFrc" },	// FLOAT
    {   2,   12, 1028,o(ds_sbcO.sb_hcMult),           "hcMult" },	// FLOAT
    {   2,   12, 1028,   o(ds_sbcO.sb_hxa),              "hxa" },	// FLOAT
    {   2,   12, 1028,   o(ds_sbcO.sb_hxr),              "hxr" },	// FLOAT
    {   2,   12, 1028, o(ds_sbcO.sb_hxtot),            "hxtot" },	// FLOAT
    {   2,   19, 1028,  o(ds_sbcO.sb_uRat),             "uRat" },	// DBL
    {   2,   19, 1028,  o(ds_sbcO.sb_fRat),             "fRat" },	// DBL
    {   2,   19, 1028,    o(ds_sbcO.sb_cx),               "cx" },	// DBL
    {   2,   19, 1028,o(ds_sbcO.sb_sgTarg.st_bm),        "sgTarg.bm" },	// DBL
    {   2,   19, 1028,o(ds_sbcO.sb_sgTarg.st_df),        "sgTarg.df" },	// DBL
    {   2,   19, 1028,o(ds_sbcO.sb_sgTarg.st_tot),       "sgTarg.tot" },	// DBL
    {   2,   19, 1028,    o(ds_sbcO.sb_sg),               "sg" },	// DBL
    {   2,   12, 1028,  o(ds_sbcO.sb_tSrf),             "tSrf" },	// FLOAT
    {   2,   12, 1024,o(ds_sbcO.sb_tSrfls),           "tSrfls" },	// FLOAT
    {   2,   19, 1028, o(ds_sbcO.sb_qrAbs),            "qrAbs" },	// DBL
    {   2,   12, 1028,   o(ds_sbcO.sb_txa),              "txa" },	// FLOAT
    {   2,   12, 1028,   o(ds_sbcO.sb_txr),              "txr" },	// FLOAT
    {   2,   12, 1028,   o(ds_sbcO.sb_txe),              "txe" },	// FLOAT
    {   2,   19, 1028,     o(ds_sbcO.sb_w),                "w" },	// DBL
    {   2,   19, 1028,  o(ds_sbcO.sb_qSrf),             "qSrf" },	// DBL
    {   0,   87, 1025,   o(ds_sbcO.sb_pDS),              "pDS" },	// DUCTSEGP
    {   0,   13,    1,        o(ds_exArea),           "exArea" },	// FLOAT_GEZ
    {   0,   14,    1,          o(ds_diam),             "diam" },	// FLOAT_GZ
    {   0,   13,    1,           o(ds_len),              "len" },	// FLOAT_GEZ
    {   0,   14,   32,     o(ds_branchLen),        "branchLen" },	// FLOAT_GZ
    {   0,    5,    1,   o(ds_branchCount),      "branchCount" },	// SI_GZ
    {   0,   14,    1,     o(ds_branchCFA),        "branchCFA" },	// FLOAT_GZ
    {   0,   14,    1,      o(ds_airVelDs),         "airVelDs" },	// FLOAT_GZ
    {   0,   13,    1,        o(ds_inArea),           "inArea" },	// FLOAT_GEZ
    {   0,   13,    1,        o(ds_insulR),           "insulR" },	// FLOAT_GEZ
    {   0,   24,    1,     o(ds_insulMati),        "insulMati" },	// TI
    {   0,   19,   32,       o(ds_insulKA),          "insulKA" },	// DBL
    {   0,   19,   32,       o(ds_insulKB),          "insulKB" },	// DBL
    {   0,   13,   32,      o(ds_insulThk),         "insulThk" },	// FLOAT_GEZ
    {   0,   12,   32,   o(ds_insulThkEff),      "insulThkEff" },	// FLOAT
    {   0,   19,    2,       o(ds_RconvIn),          "RconvIn" },	// DBL
    {   0,   19,  516,         o(ds_Rduct),            "Rduct" },	// DBL
    {   0,   19,  516,         o(ds_Uduct),            "Uduct" },	// DBL
    {   0,   12,  516,     o(ds_insulREff),        "insulREff" },	// FLOAT
    {   0,  100,    1,         o(ds_exCnd),            "exCnd" },	// EXCNDCH
    {   0,   17,    1,         o(ds_leakF),            "leakF" },	// FRAC
    {   0,   19, 1028,         o(ds_uaTot),            "uaTot" },	// DBL
    {   0,   12, 1028,          o(ds_beta),             "beta" },	// FLOAT
    {   0,   19, 1060, o(ds_air[0].as_tdb),       "air[0].tdb" },	// DBL
    {   0,   19, 1060,   o(ds_air[0].as_w),         "air[0].w" },	// DBL
    {   0,   19, 1060, o(ds_air[1].as_tdb),       "air[1].tdb" },	// DBL
    {   0,   19, 1060,   o(ds_air[1].as_w),         "air[1].w" },	// DBL
    {   0,   19, 1060, o(ds_air[2].as_tdb),       "air[2].tdb" },	// DBL
    {   0,   19, 1060,   o(ds_air[2].as_w),         "air[2].w" },	// DBL
    {   0,   19, 1060, o(ds_air[3].as_tdb),       "air[3].tdb" },	// DBL
    {   0,   19, 1060,   o(ds_air[3].as_w),         "air[3].w" },	// DBL
    {   0,   19, 1028,         o(ds_amfFL),            "amfFL" },	// DBL
    {   0,   19, 1028,       o(ds_qCondFL),          "qCondFL" },	// DBL
    {   0,   19, 1028,         o(ds_qCond),            "qCond" },	// DBL
    {   0,   19, 1028,      o(ds_qCondAir),         "qCondAir" },	// DBL
    {   0,   19, 1028,      o(ds_qCondRad),         "qCondRad" },	// DBL
    {   0,   19, 1028,      o(ds_qLeakSen),         "qLeakSen" },	// DBL
    {   0,   19, 1028,      o(ds_qLeakLat),         "qLeakLat" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDUCTSEG

struct SFIR sfirDUCTSEGRES_IVL_SUB[] =	// fields info for RTDUCTSEGRES_IVL_SUB
{
 #define o(m) offsetof(DUCTSEGRES_IVL_SUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    1,    0,                o(n),                "n" },	// INT
    {   0,   47,    0,           o(qhCond),           "qhCond" },	// ENERGY
    {   0,   47,    0,        o(qhLeakSen),        "qhLeakSen" },	// ENERGY
    {   0,   47,    0,         o(qhTotSen),         "qhTotSen" },	// ENERGY
    {   0,   47,    0,           o(qcCond),           "qcCond" },	// ENERGY
    {   0,   47,    0,        o(qcLeakSen),        "qcLeakSen" },	// ENERGY
    {   0,   47,    0,         o(qcTotSen),         "qcTotSen" },	// ENERGY
    {   0,   47,    0,        o(qcLeakLat),        "qcLeakLat" },	// ENERGY
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDUCTSEGRES_IVL_SUB

struct SFIR sfirDUCTSEGRES_SUB[] =	// fields info for RTDUCTSEGRES_SUB
{
 #define o(m) offsetof(DUCTSEGRES_SUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    1,   32,              o(Y.n),              "Y.n" },	// INT
    {   0,   47,   32,         o(Y.qhCond),         "Y.qhCond" },	// ENERGY
    {   0,   47,   32,      o(Y.qhLeakSen),      "Y.qhLeakSen" },	// ENERGY
    {   0,   47,   32,       o(Y.qhTotSen),       "Y.qhTotSen" },	// ENERGY
    {   0,   47,   32,         o(Y.qcCond),         "Y.qcCond" },	// ENERGY
    {   0,   47,   32,      o(Y.qcLeakSen),      "Y.qcLeakSen" },	// ENERGY
    {   0,   47,   32,       o(Y.qcTotSen),       "Y.qcTotSen" },	// ENERGY
    {   0,   47,   32,      o(Y.qcLeakLat),      "Y.qcLeakLat" },	// ENERGY
    {   0,    1,   64,              o(M.n),              "M.n" },	// INT
    {   0,   47,   64,         o(M.qhCond),         "M.qhCond" },	// ENERGY
    {   0,   47,   64,      o(M.qhLeakSen),      "M.qhLeakSen" },	// ENERGY
    {   0,   47,   64,       o(M.qhTotSen),       "M.qhTotSen" },	// ENERGY
    {   0,   47,   64,         o(M.qcCond),         "M.qcCond" },	// ENERGY
    {   0,   47,   64,      o(M.qcLeakSen),      "M.qcLeakSen" },	// ENERGY
    {   0,   47,   64,       o(M.qcTotSen),       "M.qcTotSen" },	// ENERGY
    {   0,   47,   64,      o(M.qcLeakLat),      "M.qcLeakLat" },	// ENERGY
    {   0,    1,  128,              o(D.n),              "D.n" },	// INT
    {   0,   47,  128,         o(D.qhCond),         "D.qhCond" },	// ENERGY
    {   0,   47,  128,      o(D.qhLeakSen),      "D.qhLeakSen" },	// ENERGY
    {   0,   47,  128,       o(D.qhTotSen),       "D.qhTotSen" },	// ENERGY
    {   0,   47,  128,         o(D.qcCond),         "D.qcCond" },	// ENERGY
    {   0,   47,  128,      o(D.qcLeakSen),      "D.qcLeakSen" },	// ENERGY
    {   0,   47,  128,       o(D.qcTotSen),       "D.qcTotSen" },	// ENERGY
    {   0,   47,  128,      o(D.qcLeakLat),      "D.qcLeakLat" },	// ENERGY
    {   0,    1,  512,              o(H.n),              "H.n" },	// INT
    {   0,   47,  512,         o(H.qhCond),         "H.qhCond" },	// ENERGY
    {   0,   47,  512,      o(H.qhLeakSen),      "H.qhLeakSen" },	// ENERGY
    {   0,   47,  512,       o(H.qhTotSen),       "H.qhTotSen" },	// ENERGY
    {   0,   47,  512,         o(H.qcCond),         "H.qcCond" },	// ENERGY
    {   0,   47,  512,      o(H.qcLeakSen),      "H.qcLeakSen" },	// ENERGY
    {   0,   47,  512,       o(H.qcTotSen),       "H.qcTotSen" },	// ENERGY
    {   0,   47,  512,      o(H.qcLeakLat),      "H.qcLeakLat" },	// ENERGY
    {   0,    1, 1024,              o(S.n),              "S.n" },	// INT
    {   0,   47, 1024,         o(S.qhCond),         "S.qhCond" },	// ENERGY
    {   0,   47, 1024,      o(S.qhLeakSen),      "S.qhLeakSen" },	// ENERGY
    {   0,   47, 1024,       o(S.qhTotSen),       "S.qhTotSen" },	// ENERGY
    {   0,   47, 1024,         o(S.qcCond),         "S.qcCond" },	// ENERGY
    {   0,   47, 1024,      o(S.qcLeakSen),      "S.qcLeakSen" },	// ENERGY
    {   0,   47, 1024,       o(S.qcTotSen),       "S.qcTotSen" },	// ENERGY
    {   0,   47, 1024,      o(S.qcLeakLat),      "S.qcLeakLat" },	// ENERGY
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDUCTSEGRES_SUB

struct SFIR sfirDUCTSEGRES[] =	// fields info for RTDUCTSEGRES
{
 #define o(m) offsetof(DUCTSEGRES,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    1,   36,         o(curr.Y.n),              "Y.n" },	// INT
    {   0,   47,   36,    o(curr.Y.qhCond),         "Y.qhCond" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qhLeakSen),      "Y.qhLeakSen" },	// ENERGY
    {   0,   47,   36,  o(curr.Y.qhTotSen),       "Y.qhTotSen" },	// ENERGY
    {   0,   47,   36,    o(curr.Y.qcCond),         "Y.qcCond" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qcLeakSen),      "Y.qcLeakSen" },	// ENERGY
    {   0,   47,   36,  o(curr.Y.qcTotSen),       "Y.qcTotSen" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qcLeakLat),      "Y.qcLeakLat" },	// ENERGY
    {   0,    1,   68,         o(curr.M.n),              "M.n" },	// INT
    {   0,   47,   68,    o(curr.M.qhCond),         "M.qhCond" },	// ENERGY
    {   0,   47,   68, o(curr.M.qhLeakSen),      "M.qhLeakSen" },	// ENERGY
    {   0,   47,   68,  o(curr.M.qhTotSen),       "M.qhTotSen" },	// ENERGY
    {   0,   47,   68,    o(curr.M.qcCond),         "M.qcCond" },	// ENERGY
    {   0,   47,   68, o(curr.M.qcLeakSen),      "M.qcLeakSen" },	// ENERGY
    {   0,   47,   68,  o(curr.M.qcTotSen),       "M.qcTotSen" },	// ENERGY
    {   0,   47,   68, o(curr.M.qcLeakLat),      "M.qcLeakLat" },	// ENERGY
    {   0,    1,  132,         o(curr.D.n),              "D.n" },	// INT
    {   0,   47,  132,    o(curr.D.qhCond),         "D.qhCond" },	// ENERGY
    {   0,   47,  132, o(curr.D.qhLeakSen),      "D.qhLeakSen" },	// ENERGY
    {   0,   47,  132,  o(curr.D.qhTotSen),       "D.qhTotSen" },	// ENERGY
    {   0,   47,  132,    o(curr.D.qcCond),         "D.qcCond" },	// ENERGY
    {   0,   47,  132, o(curr.D.qcLeakSen),      "D.qcLeakSen" },	// ENERGY
    {   0,   47,  132,  o(curr.D.qcTotSen),       "D.qcTotSen" },	// ENERGY
    {   0,   47,  132, o(curr.D.qcLeakLat),      "D.qcLeakLat" },	// ENERGY
    {   0,    1,  516,         o(curr.H.n),              "H.n" },	// INT
    {   0,   47,  516,    o(curr.H.qhCond),         "H.qhCond" },	// ENERGY
    {   0,   47,  516, o(curr.H.qhLeakSen),      "H.qhLeakSen" },	// ENERGY
    {   0,   47,  516,  o(curr.H.qhTotSen),       "H.qhTotSen" },	// ENERGY
    {   0,   47,  516,    o(curr.H.qcCond),         "H.qcCond" },	// ENERGY
    {   0,   47,  516, o(curr.H.qcLeakSen),      "H.qcLeakSen" },	// ENERGY
    {   0,   47,  516,  o(curr.H.qcTotSen),       "H.qcTotSen" },	// ENERGY
    {   0,   47,  516, o(curr.H.qcLeakLat),      "H.qcLeakLat" },	// ENERGY
    {   0,    1, 1028,         o(curr.S.n),              "S.n" },	// INT
    {   0,   47, 1028,    o(curr.S.qhCond),         "S.qhCond" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qhLeakSen),      "S.qhLeakSen" },	// ENERGY
    {   0,   47, 1028,  o(curr.S.qhTotSen),       "S.qhTotSen" },	// ENERGY
    {   0,   47, 1028,    o(curr.S.qcCond),         "S.qcCond" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qcLeakSen),      "S.qcLeakSen" },	// ENERGY
    {   0,   47, 1028,  o(curr.S.qcTotSen),       "S.qcTotSen" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qcLeakLat),      "S.qcLeakLat" },	// ENERGY
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDUCTSEGRES

struct SFIR sfirRSYS[] =	// fields info for RTRSYS
{
 #define o(m) offsetof(RSYS,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  107,    1,          o(rs_type),             "type" },	// RSYSTYCH
    {   0,   11,    1,          o(rs_desc),             "desc" },	// CHP
    {   0,   89,    1,       o(rs_perfMap),          "perfMap" },	// NOYESCH
    {   0,   19,   32,    o(rs_areaServed),       "areaServed" },	// DBL
    {   0,    1,   32,   o(rs_zonesServed),      "zonesServed" },	// INT
    {   0,   24,    1,      o(rs_elecMtri),         "elecMtri" },	// TI
    {   0,   24,    1,      o(rs_fuelMtri),         "fuelMtri" },	// TI
    {   0,   12,  512,       o(rs_parElec),          "parElec" },	// FLOAT
    {   0,   12,  512,       o(rs_parFuel),          "parFuel" },	// FLOAT
    {   0,   12,  128,       o(rs_capNomH),          "capNomH" },	// FLOAT
    {   0,   12,  128,       o(rs_capNomC),          "capNomC" },	// FLOAT
    {   0,  140,   34,     o(rs_fan.fanTy),        "fan.fanTy" },	// FANTYCH
    {   0,   33, 1060,      o(rs_fan.vfDs),         "fan.vfDs" },	// AFLOW_GZ
    {   0,   32,   34,   o(rs_fan.vfDs_As),      "fan.vfDs_As" },	// AFLOW
    {   0,   32,   34,o(rs_fan.vfDs_AsNov),   "fan.vfDs_AsNov" },	// AFLOW
    {   0,   12,   34,     o(rs_fan.vfMxF),        "fan.vfMxF" },	// FLOAT
    {   0,   37,   32,     o(rs_fan.press),        "fan.press" },	// PRESAIR_GEZ
    {   0,   18,   32,       o(rs_fan.eff),          "fan.eff" },	// FRAC_GZ
    {   0,   53,   32,  o(rs_fan.shaftPwr),     "fan.shaftPwr" },	// BHP_GZ
    {   0,   14,   32,   o(rs_fan.elecPwr),      "fan.elecPwr" },	// FLOAT_GZ
    {   0,  142,   32,  o(rs_fan.fn_motTy),        "fan.motTy" },	// MOTTYCH
    {   0,   18,   34,    o(rs_fan.motEff),       "fan.motEff" },	// FRAC_GZ
    {   0,  143,   34,    o(rs_fan.motPos),       "fan.motPos" },	// MOTPOSCH
    {   0,   12,   34,o(rs_fan.curvePy.k[0]), "fan.curvePy.k[0]" },	// FLOAT
    {   0,   12,   34,o(rs_fan.curvePy.k[1]), "fan.curvePy.k[1]" },	// FLOAT
    {   0,   12,   34,o(rs_fan.curvePy.k[2]), "fan.curvePy.k[2]" },	// FLOAT
    {   0,   12,   34,o(rs_fan.curvePy.k[3]), "fan.curvePy.k[3]" },	// FLOAT
    {   0,   12,   34,o(rs_fan.curvePy.k[4]), "fan.curvePy.k[4]" },	// FLOAT
    {   0,   12,   34,o(rs_fan.curvePy.k[5]), "fan.curvePy.k[5]" },	// FLOAT
    {   0,   24,   33,   o(rs_fan.fn_mtri),         "fan.mtri" },	// TI
    {   0,  136,   34, o(rs_fan.fn_endUse),       "fan.endUse" },	// ENDUSECH
    {   0,    6,   32,      o(rs_fan.ausz),         "fan.ausz" },	// BOO
    {   0,   48, 1056,  o(rs_fan.outPower),     "fan.outPower" },	// POWER
    {   0,   48, 1056,  o(rs_fan.airPower),     "fan.airPower" },	// POWER
    {   0,   35, 1060,       o(rs_fan.cMx),          "fan.cMx" },	// CFLOW
    {   0,   35, 1060,         o(rs_fan.c),            "fan.c" },	// CFLOW
    {   0,   42, 1060,         o(rs_fan.t),            "fan.t" },	// TEMP
    {   0,   17, 1060,      o(rs_fan.frOn),         "fan.frOn" },	// FRAC
    {   0,   48, 1060,         o(rs_fan.p),            "fan.p" },	// POWER
    {   0,   48, 1060,         o(rs_fan.q),            "fan.q" },	// POWER
    {   0,   44, 1060,        o(rs_fan.dT),           "fan.dT" },	// TEMPDIFF
    {   0,   48, 1060,   o(rs_fan.qAround),      "fan.qAround" },	// POWER
    {   0,   89,   32,   o(rs_adjForFanHt),      "adjForFanHt" },	// NOYESCH
    {   0,   19, 1028,  o(rs_asRet.as_tdb),        "asRet.tdb" },	// DBL
    {   0,   19, 1028,    o(rs_asRet.as_w),          "asRet.w" },	// DBL
    {   0,   19, 1028,   o(rs_asIn.as_tdb),         "asIn.tdb" },	// DBL
    {   0,   19, 1028,     o(rs_asIn.as_w),           "asIn.w" },	// DBL
    {   0,   19, 1028,         o(rs_twbIn),            "twbIn" },	// DBL
    {   0,   19, 1028,  o(rs_asOut.as_tdb),        "asOut.tdb" },	// DBL
    {   0,   19, 1028,    o(rs_asOut.as_w),          "asOut.w" },	// DBL
    {   0,   19, 1028,o(rs_asOutAux.as_tdb),     "asOutAux.tdb" },	// DBL
    {   0,   19, 1028, o(rs_asOutAux.as_w),       "asOutAux.w" },	// DBL
    {   0,   19, 1028,  o(rs_asSup.as_tdb),        "asSup.tdb" },	// DBL
    {   0,   19, 1028,    o(rs_asSup.as_w),          "asSup.w" },	// DBL
    {   0,   19, 1028,o(rs_asSupAux.as_tdb),     "asSupAux.tdb" },	// DBL
    {   0,   19, 1028, o(rs_asSupAux.as_w),       "asSupAux.w" },	// DBL
    {   0,   12, 1024,        o(rs_tSupLs),           "tSupLs" },	// FLOAT
    {   0,   18,  512,          o(rs_DSEH),             "DSEH" },	// FRAC_GZ
    {   0,   18,  512,          o(rs_DSEC),             "DSEC" },	// FRAC_GZ
    {   0,    1,   32,       o(rs_isAuszH),          "isAuszH" },	// INT
    {   0,    1,   32,       o(rs_isAuszC),          "isAuszC" },	// INT
    {   0,   14,   32,        o(rs_tdDesH),           "tdDesH" },	// FLOAT_GZ
    {   0,   16,   32,        o(rs_tdDesC),           "tdDesC" },	// FLOAT_LZ
    {   0,   12, 1028,      o(rs_fxCap[0]),         "fxCap[0]" },	// FLOAT
    {   0,   12, 1028,      o(rs_fxCap[1]),         "fxCap[1]" },	// FLOAT
    {   0,   12,  516,     o(rs_fxCapCDay),        "fxCapCDay" },	// FLOAT
    {   0,   12,  516,     o(rs_fxCapHDay),        "fxCapHDay" },	// FLOAT
    {   0,   14,   32,    o(rs_fxCapHTarg),       "fxCapHTarg" },	// FLOAT_GZ
    {   0,   12,   32,     o(rs_fxCapHAsF),        "fxCapHAsF" },	// FLOAT
    {   0,   14,   32,    o(rs_fxCapCTarg),       "fxCapCTarg" },	// FLOAT_GZ
    {   0,   12,   32,     o(rs_fxCapCAsF),        "fxCapCAsF" },	// FLOAT
    {   0,   14,    2, o(rs_fxCapAuxHTarg),    "fxCapAuxHTarg" },	// FLOAT_GZ
    {   0,    6,   32,o(rs_auszH.az_active),  "auszH.az_active" },	// BOO
    {   1,   20,   36,   o(rs_auszH.az_px),      "auszH.az_px" },	// FLOATP
    {   1,    6,   36,   o(rs_auszH.isNeg),      "auszH.isNeg" },	// BOO
    {   0,   12, 1028,    o(rs_auszH.az_a),       "auszH.az_a" },	// FLOAT
    {   0,   12, 1028,    o(rs_auszH.az_b),       "auszH.az_b" },	// FLOAT
    {   0,   12, 1028,    o(rs_auszH.ldPk),       "auszH.ldPk" },	// FLOAT
    {   0,   12,  132,  o(rs_auszH.ldPkAs),     "auszH.ldPkAs" },	// FLOAT
    {   0,   12,  132, o(rs_auszH.ldPkAs1),    "auszH.ldPkAs1" },	// FLOAT
    {   0,   12, 1028,   o(rs_auszH.plrPk),      "auszH.plrPk" },	// FLOAT
    {   0,   12,  132, o(rs_auszH.plrPkAs),    "auszH.plrPkAs" },	// FLOAT
    {   0,   12, 1028,     o(rs_auszH.xPk),        "auszH.xPk" },	// FLOAT
    {   0,   12,  132,   o(rs_auszH.xPkAs),      "auszH.xPkAs" },	// FLOAT
    {   1,   11,  128,o(rs_auszH.az_doing),   "auszH.az_doing" },	// CHP
    {   1,   12, 1028,      o(rs_auszH.e1),         "auszH.e1" },	// FLOAT
    {   1,   12, 1028,      o(rs_auszH.e2),         "auszH.e2" },	// FLOAT
    {   1,   12, 1028,    o(rs_auszH.orig),       "auszH.orig" },	// FLOAT
    {   0,    6,   32,o(rs_auszC.az_active),  "auszC.az_active" },	// BOO
    {   1,   20,   36,   o(rs_auszC.az_px),      "auszC.az_px" },	// FLOATP
    {   1,    6,   36,   o(rs_auszC.isNeg),      "auszC.isNeg" },	// BOO
    {   0,   12, 1028,    o(rs_auszC.az_a),       "auszC.az_a" },	// FLOAT
    {   0,   12, 1028,    o(rs_auszC.az_b),       "auszC.az_b" },	// FLOAT
    {   0,   12, 1028,    o(rs_auszC.ldPk),       "auszC.ldPk" },	// FLOAT
    {   0,   12,  132,  o(rs_auszC.ldPkAs),     "auszC.ldPkAs" },	// FLOAT
    {   0,   12,  132, o(rs_auszC.ldPkAs1),    "auszC.ldPkAs1" },	// FLOAT
    {   0,   12, 1028,   o(rs_auszC.plrPk),      "auszC.plrPk" },	// FLOAT
    {   0,   12,  132, o(rs_auszC.plrPkAs),    "auszC.plrPkAs" },	// FLOAT
    {   0,   12, 1028,     o(rs_auszC.xPk),        "auszC.xPk" },	// FLOAT
    {   0,   12,  132,   o(rs_auszC.xPkAs),      "auszC.xPkAs" },	// FLOAT
    {   1,   11,  128,o(rs_auszC.az_doing),   "auszC.az_doing" },	// CHP
    {   1,   12, 1028,      o(rs_auszC.e1),         "auszC.e1" },	// FLOAT
    {   1,   12, 1028,      o(rs_auszC.e2),         "auszC.e2" },	// FLOAT
    {   1,   12, 1028,    o(rs_auszC.orig),       "auszC.orig" },	// FLOAT
    {   0,   14,   32,          o(rs_HSPF),             "HSPF" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_cap47),            "cap47" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_COP47),            "COP47" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_cap35),            "cap35" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_COP35),            "COP35" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_cap17),            "cap17" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_COP17),            "COP17" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_cap05),            "cap05" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_COP05),            "COP05" },	// FLOAT_GZ
    {   0,   14,   32,    o(rs_capRat1747),       "capRat1747" },	// FLOAT_GZ
    {   0,   14,   32,    o(rs_capRat0547),       "capRat0547" },	// FLOAT_GZ
    {   0,   14,   32,    o(rs_capRat9547),       "capRat9547" },	// FLOAT_GZ
    {   0,   18,    6,    o(rs_loadFMin47),       "loadFMin47" },	// FRAC_GZ
    {   0,   18,    6,    o(rs_loadFMin17),       "loadFMin17" },	// FRAC_GZ
    {   0,   18,    6,    o(rs_loadFMin05),       "loadFMin05" },	// FRAC_GZ
    {   0,   14,    6,      o(rs_COPMin47),         "COPMin47" },	// FLOAT_GZ
    {   0,   14,    6,      o(rs_COPMin35),         "COPMin35" },	// FLOAT_GZ
    {   0,   14,    6,      o(rs_COPMin17),         "COPMin17" },	// FLOAT_GZ
    {   0,   14,    6,      o(rs_COPMin05),         "COPMin05" },	// FLOAT_GZ
    {   0,   17,    6,           o(rs_CdH),              "CdH" },	// FRAC
    {   0,   14,    6,         o(rs_inp47),            "inp47" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_inp35),            "inp35" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_inp17),            "inp17" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_inp05),            "inp05" },	// FLOAT_GZ
    {   0,   12,   32,   o(rs_ASHPCapF[0]),      "ASHPCapF[0]" },	// FLOAT
    {   0,   12,   32,   o(rs_ASHPCapF[1]),      "ASHPCapF[1]" },	// FLOAT
    {   0,   12,   32,   o(rs_ASHPInpF[0]),      "ASHPInpF[0]" },	// FLOAT
    {   0,   12,   32,   o(rs_ASHPInpF[1]),      "ASHPInpF[1]" },	// FLOAT
    {   0,  110,   32,      o(rs_typeAuxH),         "typeAuxH" },	// AUXHEATTY
    {   0,  111,   32,      o(rs_ctrlAuxH),         "ctrlAuxH" },	// AUXHEATCTRL
    {   0,   13,    6,       o(rs_capAuxH),          "capAuxH" },	// FLOAT_GEZ
    {   0,   12,    6,    o(rs_capAuxHInp),       "capAuxHInp" },	// FLOAT
    {   0,   14,    2,      o(rs_AFUEAuxH),         "AFUEAuxH" },	// FLOAT_GZ
    {   0,   14,    2,       o(rs_effAuxH),          "effAuxH" },	// FLOAT_GZ
    {   0,    1,   36,o(rs_underSizedAuxCount),"underSizedAuxCount" },	// INT
    {   0,   12,  512,  o(rs_ASHPLockOutT),     "ASHPLockOutT" },	// FLOAT
    {   0,  109,   32,  o(rs_defrostModel),     "defrostModel" },	// RSYSDEFROSTMODELCH
    {   0,   18,    2,          o(rs_AFUE),             "AFUE" },	// FRAC_GZ
    {   0,   13,    6,          o(rs_capH),             "capH" },	// FLOAT_GEZ
    {   0,   13,    6,       o(rs_capH_As),          "capH_As" },	// FLOAT_GEZ
    {   0,   13,    6,    o(rs_capH_AsNov),       "capH_AsNov" },	// FLOAT_GEZ
    {   0,   12,    2,      o(rs_fanHRtdH),         "fanHRtdH" },	// FLOAT
    {   0,   13,   32,       o(rs_fanPwrH),          "fanPwrH" },	// FLOAT_GEZ
    {   0,   12,    6,      o(rs_fanHeatH),         "fanHeatH" },	// FLOAT
    {   0,   12,    6,          o(rs_amfH),             "amfH" },	// FLOAT
    {   0,   12, 1028,         o(rs_effHt),            "effHt" },	// FLOAT
    {   0,   12, 1028,         o(rs_capHt),            "capHt" },	// FLOAT
    {   0,   12, 1028,         o(rs_inpHt),            "inpHt" },	// FLOAT
    {   0,   12, 1028,       o(rs_capDfHt),          "capDfHt" },	// FLOAT
    {   0,   12, 1028,      o(rs_capHtMin),         "capHtMin" },	// FLOAT
    {   0,   12, 1028,      o(rs_inpHtMin),         "inpHtMin" },	// FLOAT
    {   0,   12, 1028,    o(rs_capDfHtMin),       "capDfHtMin" },	// FLOAT
    {   0,   12, 1028,      o(rs_COPHtAdj),         "COPHtAdj" },	// FLOAT
    {   0,   13,    6,         o(rs_cap95),            "cap95" },	// FLOAT_GEZ
    {   0,   13,    6,      o(rs_cap95_As),         "cap95_As" },	// FLOAT_GEZ
    {   0,   13,    6,   o(rs_cap95_AsNov),      "cap95_AsNov" },	// FLOAT_GEZ
    {   0,   14,    6,         o(rs_COP95),            "COP95" },	// FLOAT_GZ
    {   0,   14,    6,         o(rs_EER95),            "EER95" },	// FLOAT_GZ
    {   0,   14,    6,          o(rs_SEER),             "SEER" },	// FLOAT_GZ
    {   0,   13,    6,        o(rs_cap115),           "cap115" },	// FLOAT_GEZ
    {   0,   14,    6,        o(rs_COP115),           "COP115" },	// FLOAT_GZ
    {   0,   14,   32,   o(rs_capRat11595),      "capRat11595" },	// FLOAT_GZ
    {   0,   13,    6,         o(rs_cap82),            "cap82" },	// FLOAT_GEZ
    {   0,   14,    6,         o(rs_COP82),            "COP82" },	// FLOAT_GZ
    {   0,   14,   32,    o(rs_capRat8295),       "capRat8295" },	// FLOAT_GZ
    {   0,   18,    6,   o(rs_loadFMin115),      "loadFMin115" },	// FRAC_GZ
    {   0,   18,    6,    o(rs_loadFMin95),       "loadFMin95" },	// FRAC_GZ
    {   0,   18,    6,    o(rs_loadFMin82),       "loadFMin82" },	// FRAC_GZ
    {   0,   14,    6,     o(rs_COPMin115),        "COPMin115" },	// FLOAT_GZ
    {   0,   14,    6,      o(rs_COPMin95),         "COPMin95" },	// FLOAT_GZ
    {   0,   14,    6,      o(rs_COPMin82),         "COPMin82" },	// FLOAT_GZ
    {   0,   14,    2,      o(rs_vfPerTon),         "vfPerTon" },	// FLOAT_GZ
    {   0,   13,    2,       o(rs_fanPwrC),          "fanPwrC" },	// FLOAT_GEZ
    {   0,   12,    6,      o(rs_fanHeatC),         "fanHeatC" },	// FLOAT
    {   0,   12,    6,    o(rs_fanDeltaTC),       "fanDeltaTC" },	// FLOAT
    {   0,   12,    6,          o(rs_amfC),             "amfC" },	// FLOAT
    {   0,   17,    6,           o(rs_CdC),              "CdC" },	// FRAC
    {   0,   17,  516,      o(rs_rhInTest),         "rhInTest" },	// FRAC
    {   0,   17, 1028,          o(rs_rhIn),             "rhIn" },	// FRAC
    {   0,   12, 1028,     o(rs_twbCoilIn),        "twbCoilIn" },	// FLOAT
    {   0,   12, 1028,     o(rs_tdbCoilIn),        "tdbCoilIn" },	// FLOAT
    {   0,    1, 1028,       o(rs_wetCoil),          "wetCoil" },	// INT
    {   0,   12, 1028,           o(rs_SHR),              "SHR" },	// FLOAT
    {   0,   17,    2,          o(rs_fChg),             "fChg" },	// FRAC
    {   0,   17,    2,         o(rs_fSize),            "fSize" },	// FRAC
    {   0,   12,    2,      o(rs_fanHRtdC),         "fanHRtdC" },	// FLOAT
    {   0,   12,    2,        o(rs_capnfX),           "capnfX" },	// FLOAT
    {   0,   12,    2,       o(rs_capAdjF),          "capAdjF" },	// FLOAT
    {   0,   12,    6,       o(rs_SEERnfX),          "SEERnfX" },	// FLOAT
    {   0,   12,    6,        o(rs_EERnfX),           "EERnfX" },	// FLOAT
    {   0,   12, 1028,      o(rs_fCondCap),         "fCondCap" },	// FLOAT
    {   0,   12, 1028,     o(rs_fCondSEER),        "fCondSEER" },	// FLOAT
    {   0,   12, 1028,      o(rs_fCondEER),         "fCondEER" },	// FLOAT
    {   0,   12, 1028,        o(rs_SEERnf),           "SEERnf" },	// FLOAT
    {   0,   12, 1028,         o(rs_EERnf),            "EERnf" },	// FLOAT
    {   0,   12, 1028,          o(rs_EERt),             "EERt" },	// FLOAT
    {   0,   12, 1028,         o(rs_effCt),            "effCt" },	// FLOAT
    {   0,   12, 1028,      o(rs_capTotCt),         "capTotCt" },	// FLOAT
    {   0,   12, 1028,      o(rs_capLatCt),         "capLatCt" },	// FLOAT
    {   0,   12, 1028,      o(rs_capSenCt),         "capSenCt" },	// FLOAT
    {   0,  108,    1,       o(rs_OAVType),          "OAVType" },	// RSYSOAVTYCH
    {   0,   24,    1,   o(rs_OAVReliefZi),      "OAVReliefZi" },	// TI
    {   0,   12, 1024,   o(rs_OAVTdbInlet),      "OAVTdbInlet" },	// FLOAT
    {   0,   14,  512,      o(rs_OAVTdiff),         "OAVTdiff" },	// FLOAT_GZ
    {   0,   13,    1,      o(rs_OAVAvfDs),         "OAVAvfDs" },	// FLOAT_GEZ
    {   0,   13,    1,     o(rs_OAVFanPwr),        "OAVFanPwr" },	// FLOAT_GEZ
    {   0,   17,    1,    o(rs_OAVAvfMinF),       "OAVAvfMinF" },	// FRAC
    {   0,   12,  128,        o(rs_avfOAV),           "avfOAV" },	// FLOAT
    {   0,   12,  128,    o(rs_fanHeatOAV),       "fanHeatOAV" },	// FLOAT
    {   0,   12,  128,        o(rs_amfOAV),           "amfOAV" },	// FLOAT
    {   0,   14, 1024,         o(rs_fEffH),            "fEffH" },	// FLOAT_GZ
    {   0,   14, 1024,         o(rs_fEffC),            "fEffC" },	// FLOAT_GZ
    {   0,   12, 1024,        o(rs_tdbOut),           "tdbOut" },	// FLOAT
    {   0,  106,  512,      o(rs_modeCtrl),         "modeCtrl" },	// RSYSMODECTRLCH
    {   0,    1, 1028,          o(rs_mode),             "mode" },	// INT
    {   0,    1, 1024,        o(rs_modeLs),           "modeLs" },	// INT
    {   0,    1, 1024,o(rs_modeLastActive),   "modeLastActive" },	// INT
    {   0,   19, 1028,     o(rs_amfReq[0]),        "amfReq[0]" },	// DBL
    {   0,   19, 1028,     o(rs_amfReq[1]),        "amfReq[1]" },	// DBL
    {   0,   12, 1028,     o(rs_znLoad[0]),        "znLoad[0]" },	// FLOAT
    {   0,   12, 1028,     o(rs_znLoad[1]),        "znLoad[1]" },	// FLOAT
    {   0,   12, 1028,   o(rs_capSenNetFS),      "capSenNetFS" },	// FLOAT
    {   0,   19, 1028,           o(rs_amf),              "amf" },	// DBL
    {   0,   12, 1028,           o(rs_PLF),              "PLF" },	// FLOAT
    {   0,   12, 1028,           o(rs_PLR),              "PLR" },	// FLOAT
    {   0,   12, 1028,         o(rs_loadF),            "loadF" },	// FLOAT
    {   0,   12, 1024,       o(rs_loadFLs),          "loadFLs" },	// FLOAT
    {   0,   12, 1028,          o(rs_runF),             "runF" },	// FLOAT
    {   0,   12, 1028,        o(rs_speedF),           "speedF" },	// FLOAT
    {   0,   12, 1028,     o(rs_speedFMin),        "speedFMin" },	// FLOAT
    {   0,   12, 1028,       o(rs_runFAux),          "runFAux" },	// FLOAT
    {   0,   19, 1028,        o(rs_outSen),           "outSen" },	// DBL
    {   0,   19, 1028,        o(rs_outLat),           "outLat" },	// DBL
    {   0,   19, 1028,        o(rs_outFan),           "outFan" },	// DBL
    {   0,   19, 1028,    o(rs_outDefrost),       "outDefrost" },	// DBL
    {   0,   19, 1028,        o(rs_outAux),           "outAux" },	// DBL
    {   0,   19, 1028,     o(rs_outSenTot),        "outSenTot" },	// DBL
    {   0,   10,   36,  o(rs_calcCount[0]),     "calcCount[0]" },	// LI
    {   0,   10,   36,  o(rs_calcCount[1]),     "calcCount[1]" },	// LI
    {   0,   19, 1028,     o(rs_inPrimary),        "inPrimary" },	// DBL
    {   0,   19, 1028,         o(rs_inFan),            "inFan" },	// DBL
    {   0,   19, 1028,     o(rs_inDefrost),        "inDefrost" },	// DBL
    {   0,   19, 1028,         o(rs_inAux),            "inAux" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirRSYS

struct SFIR sfirRSYSRES_IVL_SUB[] =	// fields info for RTRSYSRES_IVL_SUB
{
 #define o(m) offsetof(RSYSRES_IVL_SUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    1,    0,                o(n),                "n" },	// INT
    {   0,   66,    0,            o(hrsOn),            "hrsOn" },	// HOURS
    {   0,   66,    0,         o(hrsOnAux),         "hrsOnAux" },	// HOURS
    {   0,   47,    0,        o(qhPrimary),        "qhPrimary" },	// ENERGY
    {   0,   47,    0,        o(qhDefrost),        "qhDefrost" },	// ENERGY
    {   0,   47,    0,            o(qhAux),            "qhAux" },	// ENERGY
    {   0,   47,    0,            o(qhFan),            "qhFan" },	// ENERGY
    {   0,   47,    0,            o(qhNet),            "qhNet" },	// ENERGY
    {   0,   47,    0,            o(qcSen),            "qcSen" },	// ENERGY
    {   0,   47,    0,            o(qcLat),            "qcLat" },	// ENERGY
    {   0,   47,    0,            o(qcFan),            "qcFan" },	// ENERGY
    {   0,   47,    0,         o(qcSenNet),         "qcSenNet" },	// ENERGY
    {   0,   47,    0,            o(qvFan),            "qvFan" },	// ENERGY
    {   0,   47,    0,        o(fhPrimary),        "fhPrimary" },	// ENERGY
    {   0,   47,    0,        o(fhDefrost),        "fhDefrost" },	// ENERGY
    {   0,   47,    0,            o(fhAux),            "fhAux" },	// ENERGY
    {   0,   47,    0,      o(fhParasitic),      "fhParasitic" },	// ENERGY
    {   0,   47,    0,            o(fhTot),            "fhTot" },	// ENERGY
    {   0,   47,    0,        o(ehPrimary),        "ehPrimary" },	// ENERGY
    {   0,   47,    0,        o(ehDefrost),        "ehDefrost" },	// ENERGY
    {   0,   47,    0,            o(ehAux),            "ehAux" },	// ENERGY
    {   0,   47,    0,            o(ehFan),            "ehFan" },	// ENERGY
    {   0,   47,    0,      o(ehParasitic),      "ehParasitic" },	// ENERGY
    {   0,   47,    0,            o(ehTot),            "ehTot" },	// ENERGY
    {   0,   47,    0,        o(ecPrimary),        "ecPrimary" },	// ENERGY
    {   0,   47,    0,            o(ecFan),            "ecFan" },	// ENERGY
    {   0,   47,    0,      o(ecParasitic),      "ecParasitic" },	// ENERGY
    {   0,   47,    0,            o(ecTot),            "ecTot" },	// ENERGY
    {   0,   47,    0,            o(evFan),            "evFan" },	// ENERGY
    {   0,   47,    0,      o(evParasitic),      "evParasitic" },	// ENERGY
    {   0,   47,    0,            o(evTot),            "evTot" },	// ENERGY
    {   0,   47,    0,        o(qhZoneSen),        "qhZoneSen" },	// ENERGY
    {   0,   47,    0,        o(qhZoneLat),        "qhZoneLat" },	// ENERGY
    {   0,   47,    0,        o(qcZoneSen),        "qcZoneSen" },	// ENERGY
    {   0,   47,    0,        o(qcZoneLat),        "qcZoneLat" },	// ENERGY
    {   0,   47,    0,        o(qvZoneSen),        "qvZoneSen" },	// ENERGY
    {   0,   47,    0,        o(qvZoneLat),        "qvZoneLat" },	// ENERGY
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirRSYSRES_IVL_SUB

struct SFIR sfirRSYSRES_SUB[] =	// fields info for RTRSYSRES_SUB
{
 #define o(m) offsetof(RSYSRES_SUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    1,   32,              o(Y.n),              "Y.n" },	// INT
    {   0,   66,   32,          o(Y.hrsOn),          "Y.hrsOn" },	// HOURS
    {   0,   66,   32,       o(Y.hrsOnAux),       "Y.hrsOnAux" },	// HOURS
    {   0,   47,   32,      o(Y.qhPrimary),      "Y.qhPrimary" },	// ENERGY
    {   0,   47,   32,      o(Y.qhDefrost),      "Y.qhDefrost" },	// ENERGY
    {   0,   47,   32,          o(Y.qhAux),          "Y.qhAux" },	// ENERGY
    {   0,   47,   32,          o(Y.qhFan),          "Y.qhFan" },	// ENERGY
    {   0,   47,   32,          o(Y.qhNet),          "Y.qhNet" },	// ENERGY
    {   0,   47,   32,          o(Y.qcSen),          "Y.qcSen" },	// ENERGY
    {   0,   47,   32,          o(Y.qcLat),          "Y.qcLat" },	// ENERGY
    {   0,   47,   32,          o(Y.qcFan),          "Y.qcFan" },	// ENERGY
    {   0,   47,   32,       o(Y.qcSenNet),       "Y.qcSenNet" },	// ENERGY
    {   0,   47,   32,          o(Y.qvFan),          "Y.qvFan" },	// ENERGY
    {   0,   47,   32,      o(Y.fhPrimary),      "Y.fhPrimary" },	// ENERGY
    {   0,   47,   32,      o(Y.fhDefrost),      "Y.fhDefrost" },	// ENERGY
    {   0,   47,   32,          o(Y.fhAux),          "Y.fhAux" },	// ENERGY
    {   0,   47,   32,    o(Y.fhParasitic),    "Y.fhParasitic" },	// ENERGY
    {   0,   47,   32,          o(Y.fhTot),          "Y.fhTot" },	// ENERGY
    {   0,   47,   32,      o(Y.ehPrimary),      "Y.ehPrimary" },	// ENERGY
    {   0,   47,   32,      o(Y.ehDefrost),      "Y.ehDefrost" },	// ENERGY
    {   0,   47,   32,          o(Y.ehAux),          "Y.ehAux" },	// ENERGY
    {   0,   47,   32,          o(Y.ehFan),          "Y.ehFan" },	// ENERGY
    {   0,   47,   32,    o(Y.ehParasitic),    "Y.ehParasitic" },	// ENERGY
    {   0,   47,   32,          o(Y.ehTot),          "Y.ehTot" },	// ENERGY
    {   0,   47,   32,      o(Y.ecPrimary),      "Y.ecPrimary" },	// ENERGY
    {   0,   47,   32,          o(Y.ecFan),          "Y.ecFan" },	// ENERGY
    {   0,   47,   32,    o(Y.ecParasitic),    "Y.ecParasitic" },	// ENERGY
    {   0,   47,   32,          o(Y.ecTot),          "Y.ecTot" },	// ENERGY
    {   0,   47,   32,          o(Y.evFan),          "Y.evFan" },	// ENERGY
    {   0,   47,   32,    o(Y.evParasitic),    "Y.evParasitic" },	// ENERGY
    {   0,   47,   32,          o(Y.evTot),          "Y.evTot" },	// ENERGY
    {   0,   47,   32,      o(Y.qhZoneSen),      "Y.qhZoneSen" },	// ENERGY
    {   0,   47,   32,      o(Y.qhZoneLat),      "Y.qhZoneLat" },	// ENERGY
    {   0,   47,   32,      o(Y.qcZoneSen),      "Y.qcZoneSen" },	// ENERGY
    {   0,   47,   32,      o(Y.qcZoneLat),      "Y.qcZoneLat" },	// ENERGY
    {   0,   47,   32,      o(Y.qvZoneSen),      "Y.qvZoneSen" },	// ENERGY
    {   0,   47,   32,      o(Y.qvZoneLat),      "Y.qvZoneLat" },	// ENERGY
    {   0,    1,   64,              o(M.n),              "M.n" },	// INT
    {   0,   66,   64,          o(M.hrsOn),          "M.hrsOn" },	// HOURS
    {   0,   66,   64,       o(M.hrsOnAux),       "M.hrsOnAux" },	// HOURS
    {   0,   47,   64,      o(M.qhPrimary),      "M.qhPrimary" },	// ENERGY
    {   0,   47,   64,      o(M.qhDefrost),      "M.qhDefrost" },	// ENERGY
    {   0,   47,   64,          o(M.qhAux),          "M.qhAux" },	// ENERGY
    {   0,   47,   64,          o(M.qhFan),          "M.qhFan" },	// ENERGY
    {   0,   47,   64,          o(M.qhNet),          "M.qhNet" },	// ENERGY
    {   0,   47,   64,          o(M.qcSen),          "M.qcSen" },	// ENERGY
    {   0,   47,   64,          o(M.qcLat),          "M.qcLat" },	// ENERGY
    {   0,   47,   64,          o(M.qcFan),          "M.qcFan" },	// ENERGY
    {   0,   47,   64,       o(M.qcSenNet),       "M.qcSenNet" },	// ENERGY
    {   0,   47,   64,          o(M.qvFan),          "M.qvFan" },	// ENERGY
    {   0,   47,   64,      o(M.fhPrimary),      "M.fhPrimary" },	// ENERGY
    {   0,   47,   64,      o(M.fhDefrost),      "M.fhDefrost" },	// ENERGY
    {   0,   47,   64,          o(M.fhAux),          "M.fhAux" },	// ENERGY
    {   0,   47,   64,    o(M.fhParasitic),    "M.fhParasitic" },	// ENERGY
    {   0,   47,   64,          o(M.fhTot),          "M.fhTot" },	// ENERGY
    {   0,   47,   64,      o(M.ehPrimary),      "M.ehPrimary" },	// ENERGY
    {   0,   47,   64,      o(M.ehDefrost),      "M.ehDefrost" },	// ENERGY
    {   0,   47,   64,          o(M.ehAux),          "M.ehAux" },	// ENERGY
    {   0,   47,   64,          o(M.ehFan),          "M.ehFan" },	// ENERGY
    {   0,   47,   64,    o(M.ehParasitic),    "M.ehParasitic" },	// ENERGY
    {   0,   47,   64,          o(M.ehTot),          "M.ehTot" },	// ENERGY
    {   0,   47,   64,      o(M.ecPrimary),      "M.ecPrimary" },	// ENERGY
    {   0,   47,   64,          o(M.ecFan),          "M.ecFan" },	// ENERGY
    {   0,   47,   64,    o(M.ecParasitic),    "M.ecParasitic" },	// ENERGY
    {   0,   47,   64,          o(M.ecTot),          "M.ecTot" },	// ENERGY
    {   0,   47,   64,          o(M.evFan),          "M.evFan" },	// ENERGY
    {   0,   47,   64,    o(M.evParasitic),    "M.evParasitic" },	// ENERGY
    {   0,   47,   64,          o(M.evTot),          "M.evTot" },	// ENERGY
    {   0,   47,   64,      o(M.qhZoneSen),      "M.qhZoneSen" },	// ENERGY
    {   0,   47,   64,      o(M.qhZoneLat),      "M.qhZoneLat" },	// ENERGY
    {   0,   47,   64,      o(M.qcZoneSen),      "M.qcZoneSen" },	// ENERGY
    {   0,   47,   64,      o(M.qcZoneLat),      "M.qcZoneLat" },	// ENERGY
    {   0,   47,   64,      o(M.qvZoneSen),      "M.qvZoneSen" },	// ENERGY
    {   0,   47,   64,      o(M.qvZoneLat),      "M.qvZoneLat" },	// ENERGY
    {   0,    1,  128,              o(D.n),              "D.n" },	// INT
    {   0,   66,  128,          o(D.hrsOn),          "D.hrsOn" },	// HOURS
    {   0,   66,  128,       o(D.hrsOnAux),       "D.hrsOnAux" },	// HOURS
    {   0,   47,  128,      o(D.qhPrimary),      "D.qhPrimary" },	// ENERGY
    {   0,   47,  128,      o(D.qhDefrost),      "D.qhDefrost" },	// ENERGY
    {   0,   47,  128,          o(D.qhAux),          "D.qhAux" },	// ENERGY
    {   0,   47,  128,          o(D.qhFan),          "D.qhFan" },	// ENERGY
    {   0,   47,  128,          o(D.qhNet),          "D.qhNet" },	// ENERGY
    {   0,   47,  128,          o(D.qcSen),          "D.qcSen" },	// ENERGY
    {   0,   47,  128,          o(D.qcLat),          "D.qcLat" },	// ENERGY
    {   0,   47,  128,          o(D.qcFan),          "D.qcFan" },	// ENERGY
    {   0,   47,  128,       o(D.qcSenNet),       "D.qcSenNet" },	// ENERGY
    {   0,   47,  128,          o(D.qvFan),          "D.qvFan" },	// ENERGY
    {   0,   47,  128,      o(D.fhPrimary),      "D.fhPrimary" },	// ENERGY
    {   0,   47,  128,      o(D.fhDefrost),      "D.fhDefrost" },	// ENERGY
    {   0,   47,  128,          o(D.fhAux),          "D.fhAux" },	// ENERGY
    {   0,   47,  128,    o(D.fhParasitic),    "D.fhParasitic" },	// ENERGY
    {   0,   47,  128,          o(D.fhTot),          "D.fhTot" },	// ENERGY
    {   0,   47,  128,      o(D.ehPrimary),      "D.ehPrimary" },	// ENERGY
    {   0,   47,  128,      o(D.ehDefrost),      "D.ehDefrost" },	// ENERGY
    {   0,   47,  128,          o(D.ehAux),          "D.ehAux" },	// ENERGY
    {   0,   47,  128,          o(D.ehFan),          "D.ehFan" },	// ENERGY
    {   0,   47,  128,    o(D.ehParasitic),    "D.ehParasitic" },	// ENERGY
    {   0,   47,  128,          o(D.ehTot),          "D.ehTot" },	// ENERGY
    {   0,   47,  128,      o(D.ecPrimary),      "D.ecPrimary" },	// ENERGY
    {   0,   47,  128,          o(D.ecFan),          "D.ecFan" },	// ENERGY
    {   0,   47,  128,    o(D.ecParasitic),    "D.ecParasitic" },	// ENERGY
    {   0,   47,  128,          o(D.ecTot),          "D.ecTot" },	// ENERGY
    {   0,   47,  128,          o(D.evFan),          "D.evFan" },	// ENERGY
    {   0,   47,  128,    o(D.evParasitic),    "D.evParasitic" },	// ENERGY
    {   0,   47,  128,          o(D.evTot),          "D.evTot" },	// ENERGY
    {   0,   47,  128,      o(D.qhZoneSen),      "D.qhZoneSen" },	// ENERGY
    {   0,   47,  128,      o(D.qhZoneLat),      "D.qhZoneLat" },	// ENERGY
    {   0,   47,  128,      o(D.qcZoneSen),      "D.qcZoneSen" },	// ENERGY
    {   0,   47,  128,      o(D.qcZoneLat),      "D.qcZoneLat" },	// ENERGY
    {   0,   47,  128,      o(D.qvZoneSen),      "D.qvZoneSen" },	// ENERGY
    {   0,   47,  128,      o(D.qvZoneLat),      "D.qvZoneLat" },	// ENERGY
    {   0,    1,  512,              o(H.n),              "H.n" },	// INT
    {   0,   66,  512,          o(H.hrsOn),          "H.hrsOn" },	// HOURS
    {   0,   66,  512,       o(H.hrsOnAux),       "H.hrsOnAux" },	// HOURS
    {   0,   47,  512,      o(H.qhPrimary),      "H.qhPrimary" },	// ENERGY
    {   0,   47,  512,      o(H.qhDefrost),      "H.qhDefrost" },	// ENERGY
    {   0,   47,  512,          o(H.qhAux),          "H.qhAux" },	// ENERGY
    {   0,   47,  512,          o(H.qhFan),          "H.qhFan" },	// ENERGY
    {   0,   47,  512,          o(H.qhNet),          "H.qhNet" },	// ENERGY
    {   0,   47,  512,          o(H.qcSen),          "H.qcSen" },	// ENERGY
    {   0,   47,  512,          o(H.qcLat),          "H.qcLat" },	// ENERGY
    {   0,   47,  512,          o(H.qcFan),          "H.qcFan" },	// ENERGY
    {   0,   47,  512,       o(H.qcSenNet),       "H.qcSenNet" },	// ENERGY
    {   0,   47,  512,          o(H.qvFan),          "H.qvFan" },	// ENERGY
    {   0,   47,  512,      o(H.fhPrimary),      "H.fhPrimary" },	// ENERGY
    {   0,   47,  512,      o(H.fhDefrost),      "H.fhDefrost" },	// ENERGY
    {   0,   47,  512,          o(H.fhAux),          "H.fhAux" },	// ENERGY
    {   0,   47,  512,    o(H.fhParasitic),    "H.fhParasitic" },	// ENERGY
    {   0,   47,  512,          o(H.fhTot),          "H.fhTot" },	// ENERGY
    {   0,   47,  512,      o(H.ehPrimary),      "H.ehPrimary" },	// ENERGY
    {   0,   47,  512,      o(H.ehDefrost),      "H.ehDefrost" },	// ENERGY
    {   0,   47,  512,          o(H.ehAux),          "H.ehAux" },	// ENERGY
    {   0,   47,  512,          o(H.ehFan),          "H.ehFan" },	// ENERGY
    {   0,   47,  512,    o(H.ehParasitic),    "H.ehParasitic" },	// ENERGY
    {   0,   47,  512,          o(H.ehTot),          "H.ehTot" },	// ENERGY
    {   0,   47,  512,      o(H.ecPrimary),      "H.ecPrimary" },	// ENERGY
    {   0,   47,  512,          o(H.ecFan),          "H.ecFan" },	// ENERGY
    {   0,   47,  512,    o(H.ecParasitic),    "H.ecParasitic" },	// ENERGY
    {   0,   47,  512,          o(H.ecTot),          "H.ecTot" },	// ENERGY
    {   0,   47,  512,          o(H.evFan),          "H.evFan" },	// ENERGY
    {   0,   47,  512,    o(H.evParasitic),    "H.evParasitic" },	// ENERGY
    {   0,   47,  512,          o(H.evTot),          "H.evTot" },	// ENERGY
    {   0,   47,  512,      o(H.qhZoneSen),      "H.qhZoneSen" },	// ENERGY
    {   0,   47,  512,      o(H.qhZoneLat),      "H.qhZoneLat" },	// ENERGY
    {   0,   47,  512,      o(H.qcZoneSen),      "H.qcZoneSen" },	// ENERGY
    {   0,   47,  512,      o(H.qcZoneLat),      "H.qcZoneLat" },	// ENERGY
    {   0,   47,  512,      o(H.qvZoneSen),      "H.qvZoneSen" },	// ENERGY
    {   0,   47,  512,      o(H.qvZoneLat),      "H.qvZoneLat" },	// ENERGY
    {   0,    1, 1024,              o(S.n),              "S.n" },	// INT
    {   0,   66, 1024,          o(S.hrsOn),          "S.hrsOn" },	// HOURS
    {   0,   66, 1024,       o(S.hrsOnAux),       "S.hrsOnAux" },	// HOURS
    {   0,   47, 1024,      o(S.qhPrimary),      "S.qhPrimary" },	// ENERGY
    {   0,   47, 1024,      o(S.qhDefrost),      "S.qhDefrost" },	// ENERGY
    {   0,   47, 1024,          o(S.qhAux),          "S.qhAux" },	// ENERGY
    {   0,   47, 1024,          o(S.qhFan),          "S.qhFan" },	// ENERGY
    {   0,   47, 1024,          o(S.qhNet),          "S.qhNet" },	// ENERGY
    {   0,   47, 1024,          o(S.qcSen),          "S.qcSen" },	// ENERGY
    {   0,   47, 1024,          o(S.qcLat),          "S.qcLat" },	// ENERGY
    {   0,   47, 1024,          o(S.qcFan),          "S.qcFan" },	// ENERGY
    {   0,   47, 1024,       o(S.qcSenNet),       "S.qcSenNet" },	// ENERGY
    {   0,   47, 1024,          o(S.qvFan),          "S.qvFan" },	// ENERGY
    {   0,   47, 1024,      o(S.fhPrimary),      "S.fhPrimary" },	// ENERGY
    {   0,   47, 1024,      o(S.fhDefrost),      "S.fhDefrost" },	// ENERGY
    {   0,   47, 1024,          o(S.fhAux),          "S.fhAux" },	// ENERGY
    {   0,   47, 1024,    o(S.fhParasitic),    "S.fhParasitic" },	// ENERGY
    {   0,   47, 1024,          o(S.fhTot),          "S.fhTot" },	// ENERGY
    {   0,   47, 1024,      o(S.ehPrimary),      "S.ehPrimary" },	// ENERGY
    {   0,   47, 1024,      o(S.ehDefrost),      "S.ehDefrost" },	// ENERGY
    {   0,   47, 1024,          o(S.ehAux),          "S.ehAux" },	// ENERGY
    {   0,   47, 1024,          o(S.ehFan),          "S.ehFan" },	// ENERGY
    {   0,   47, 1024,    o(S.ehParasitic),    "S.ehParasitic" },	// ENERGY
    {   0,   47, 1024,          o(S.ehTot),          "S.ehTot" },	// ENERGY
    {   0,   47, 1024,      o(S.ecPrimary),      "S.ecPrimary" },	// ENERGY
    {   0,   47, 1024,          o(S.ecFan),          "S.ecFan" },	// ENERGY
    {   0,   47, 1024,    o(S.ecParasitic),    "S.ecParasitic" },	// ENERGY
    {   0,   47, 1024,          o(S.ecTot),          "S.ecTot" },	// ENERGY
    {   0,   47, 1024,          o(S.evFan),          "S.evFan" },	// ENERGY
    {   0,   47, 1024,    o(S.evParasitic),    "S.evParasitic" },	// ENERGY
    {   0,   47, 1024,          o(S.evTot),          "S.evTot" },	// ENERGY
    {   0,   47, 1024,      o(S.qhZoneSen),      "S.qhZoneSen" },	// ENERGY
    {   0,   47, 1024,      o(S.qhZoneLat),      "S.qhZoneLat" },	// ENERGY
    {   0,   47, 1024,      o(S.qcZoneSen),      "S.qcZoneSen" },	// ENERGY
    {   0,   47, 1024,      o(S.qcZoneLat),      "S.qcZoneLat" },	// ENERGY
    {   0,   47, 1024,      o(S.qvZoneSen),      "S.qvZoneSen" },	// ENERGY
    {   0,   47, 1024,      o(S.qvZoneLat),      "S.qvZoneLat" },	// ENERGY
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirRSYSRES_SUB

struct SFIR sfirRSYSRES[] =	// fields info for RTRSYSRES
{
 #define o(m) offsetof(RSYSRES,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    1,   36,         o(curr.Y.n),              "Y.n" },	// INT
    {   0,   66,   36,     o(curr.Y.hrsOn),          "Y.hrsOn" },	// HOURS
    {   0,   66,   36,  o(curr.Y.hrsOnAux),       "Y.hrsOnAux" },	// HOURS
    {   0,   47,   36, o(curr.Y.qhPrimary),      "Y.qhPrimary" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qhDefrost),      "Y.qhDefrost" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.qhAux),          "Y.qhAux" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.qhFan),          "Y.qhFan" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.qhNet),          "Y.qhNet" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.qcSen),          "Y.qcSen" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.qcLat),          "Y.qcLat" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.qcFan),          "Y.qcFan" },	// ENERGY
    {   0,   47,   36,  o(curr.Y.qcSenNet),       "Y.qcSenNet" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.qvFan),          "Y.qvFan" },	// ENERGY
    {   0,   47,   36, o(curr.Y.fhPrimary),      "Y.fhPrimary" },	// ENERGY
    {   0,   47,   36, o(curr.Y.fhDefrost),      "Y.fhDefrost" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.fhAux),          "Y.fhAux" },	// ENERGY
    {   0,   47,   36,o(curr.Y.fhParasitic),    "Y.fhParasitic" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.fhTot),          "Y.fhTot" },	// ENERGY
    {   0,   47,   36, o(curr.Y.ehPrimary),      "Y.ehPrimary" },	// ENERGY
    {   0,   47,   36, o(curr.Y.ehDefrost),      "Y.ehDefrost" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.ehAux),          "Y.ehAux" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.ehFan),          "Y.ehFan" },	// ENERGY
    {   0,   47,   36,o(curr.Y.ehParasitic),    "Y.ehParasitic" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.ehTot),          "Y.ehTot" },	// ENERGY
    {   0,   47,   36, o(curr.Y.ecPrimary),      "Y.ecPrimary" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.ecFan),          "Y.ecFan" },	// ENERGY
    {   0,   47,   36,o(curr.Y.ecParasitic),    "Y.ecParasitic" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.ecTot),          "Y.ecTot" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.evFan),          "Y.evFan" },	// ENERGY
    {   0,   47,   36,o(curr.Y.evParasitic),    "Y.evParasitic" },	// ENERGY
    {   0,   47,   36,     o(curr.Y.evTot),          "Y.evTot" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qhZoneSen),      "Y.qhZoneSen" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qhZoneLat),      "Y.qhZoneLat" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qcZoneSen),      "Y.qcZoneSen" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qcZoneLat),      "Y.qcZoneLat" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qvZoneSen),      "Y.qvZoneSen" },	// ENERGY
    {   0,   47,   36, o(curr.Y.qvZoneLat),      "Y.qvZoneLat" },	// ENERGY
    {   0,    1,   68,         o(curr.M.n),              "M.n" },	// INT
    {   0,   66,   68,     o(curr.M.hrsOn),          "M.hrsOn" },	// HOURS
    {   0,   66,   68,  o(curr.M.hrsOnAux),       "M.hrsOnAux" },	// HOURS
    {   0,   47,   68, o(curr.M.qhPrimary),      "M.qhPrimary" },	// ENERGY
    {   0,   47,   68, o(curr.M.qhDefrost),      "M.qhDefrost" },	// ENERGY
    {   0,   47,   68,     o(curr.M.qhAux),          "M.qhAux" },	// ENERGY
    {   0,   47,   68,     o(curr.M.qhFan),          "M.qhFan" },	// ENERGY
    {   0,   47,   68,     o(curr.M.qhNet),          "M.qhNet" },	// ENERGY
    {   0,   47,   68,     o(curr.M.qcSen),          "M.qcSen" },	// ENERGY
    {   0,   47,   68,     o(curr.M.qcLat),          "M.qcLat" },	// ENERGY
    {   0,   47,   68,     o(curr.M.qcFan),          "M.qcFan" },	// ENERGY
    {   0,   47,   68,  o(curr.M.qcSenNet),       "M.qcSenNet" },	// ENERGY
    {   0,   47,   68,     o(curr.M.qvFan),          "M.qvFan" },	// ENERGY
    {   0,   47,   68, o(curr.M.fhPrimary),      "M.fhPrimary" },	// ENERGY
    {   0,   47,   68, o(curr.M.fhDefrost),      "M.fhDefrost" },	// ENERGY
    {   0,   47,   68,     o(curr.M.fhAux),          "M.fhAux" },	// ENERGY
    {   0,   47,   68,o(curr.M.fhParasitic),    "M.fhParasitic" },	// ENERGY
    {   0,   47,   68,     o(curr.M.fhTot),          "M.fhTot" },	// ENERGY
    {   0,   47,   68, o(curr.M.ehPrimary),      "M.ehPrimary" },	// ENERGY
    {   0,   47,   68, o(curr.M.ehDefrost),      "M.ehDefrost" },	// ENERGY
    {   0,   47,   68,     o(curr.M.ehAux),          "M.ehAux" },	// ENERGY
    {   0,   47,   68,     o(curr.M.ehFan),          "M.ehFan" },	// ENERGY
    {   0,   47,   68,o(curr.M.ehParasitic),    "M.ehParasitic" },	// ENERGY
    {   0,   47,   68,     o(curr.M.ehTot),          "M.ehTot" },	// ENERGY
    {   0,   47,   68, o(curr.M.ecPrimary),      "M.ecPrimary" },	// ENERGY
    {   0,   47,   68,     o(curr.M.ecFan),          "M.ecFan" },	// ENERGY
    {   0,   47,   68,o(curr.M.ecParasitic),    "M.ecParasitic" },	// ENERGY
    {   0,   47,   68,     o(curr.M.ecTot),          "M.ecTot" },	// ENERGY
    {   0,   47,   68,     o(curr.M.evFan),          "M.evFan" },	// ENERGY
    {   0,   47,   68,o(curr.M.evParasitic),    "M.evParasitic" },	// ENERGY
    {   0,   47,   68,     o(curr.M.evTot),          "M.evTot" },	// ENERGY
    {   0,   47,   68, o(curr.M.qhZoneSen),      "M.qhZoneSen" },	// ENERGY
    {   0,   47,   68, o(curr.M.qhZoneLat),      "M.qhZoneLat" },	// ENERGY
    {   0,   47,   68, o(curr.M.qcZoneSen),      "M.qcZoneSen" },	// ENERGY
    {   0,   47,   68, o(curr.M.qcZoneLat),      "M.qcZoneLat" },	// ENERGY
    {   0,   47,   68, o(curr.M.qvZoneSen),      "M.qvZoneSen" },	// ENERGY
    {   0,   47,   68, o(curr.M.qvZoneLat),      "M.qvZoneLat" },	// ENERGY
    {   0,    1,  132,         o(curr.D.n),              "D.n" },	// INT
    {   0,   66,  132,     o(curr.D.hrsOn),          "D.hrsOn" },	// HOURS
    {   0,   66,  132,  o(curr.D.hrsOnAux),       "D.hrsOnAux" },	// HOURS
    {   0,   47,  132, o(curr.D.qhPrimary),      "D.qhPrimary" },	// ENERGY
    {   0,   47,  132, o(curr.D.qhDefrost),      "D.qhDefrost" },	// ENERGY
    {   0,   47,  132,     o(curr.D.qhAux),          "D.qhAux" },	// ENERGY
    {   0,   47,  132,     o(curr.D.qhFan),          "D.qhFan" },	// ENERGY
    {   0,   47,  132,     o(curr.D.qhNet),          "D.qhNet" },	// ENERGY
    {   0,   47,  132,     o(curr.D.qcSen),          "D.qcSen" },	// ENERGY
    {   0,   47,  132,     o(curr.D.qcLat),          "D.qcLat" },	// ENERGY
    {   0,   47,  132,     o(curr.D.qcFan),          "D.qcFan" },	// ENERGY
    {   0,   47,  132,  o(curr.D.qcSenNet),       "D.qcSenNet" },	// ENERGY
    {   0,   47,  132,     o(curr.D.qvFan),          "D.qvFan" },	// ENERGY
    {   0,   47,  132, o(curr.D.fhPrimary),      "D.fhPrimary" },	// ENERGY
    {   0,   47,  132, o(curr.D.fhDefrost),      "D.fhDefrost" },	// ENERGY
    {   0,   47,  132,     o(curr.D.fhAux),          "D.fhAux" },	// ENERGY
    {   0,   47,  132,o(curr.D.fhParasitic),    "D.fhParasitic" },	// ENERGY
    {   0,   47,  132,     o(curr.D.fhTot),          "D.fhTot" },	// ENERGY
    {   0,   47,  132, o(curr.D.ehPrimary),      "D.ehPrimary" },	// ENERGY
    {   0,   47,  132, o(curr.D.ehDefrost),      "D.ehDefrost" },	// ENERGY
    {   0,   47,  132,     o(curr.D.ehAux),          "D.ehAux" },	// ENERGY
    {   0,   47,  132,     o(curr.D.ehFan),          "D.ehFan" },	// ENERGY
    {   0,   47,  132,o(curr.D.ehParasitic),    "D.ehParasitic" },	// ENERGY
    {   0,   47,  132,     o(curr.D.ehTot),          "D.ehTot" },	// ENERGY
    {   0,   47,  132, o(curr.D.ecPrimary),      "D.ecPrimary" },	// ENERGY
    {   0,   47,  132,     o(curr.D.ecFan),          "D.ecFan" },	// ENERGY
    {   0,   47,  132,o(curr.D.ecParasitic),    "D.ecParasitic" },	// ENERGY
    {   0,   47,  132,     o(curr.D.ecTot),          "D.ecTot" },	// ENERGY
    {   0,   47,  132,     o(curr.D.evFan),          "D.evFan" },	// ENERGY
    {   0,   47,  132,o(curr.D.evParasitic),    "D.evParasitic" },	// ENERGY
    {   0,   47,  132,     o(curr.D.evTot),          "D.evTot" },	// ENERGY
    {   0,   47,  132, o(curr.D.qhZoneSen),      "D.qhZoneSen" },	// ENERGY
    {   0,   47,  132, o(curr.D.qhZoneLat),      "D.qhZoneLat" },	// ENERGY
    {   0,   47,  132, o(curr.D.qcZoneSen),      "D.qcZoneSen" },	// ENERGY
    {   0,   47,  132, o(curr.D.qcZoneLat),      "D.qcZoneLat" },	// ENERGY
    {   0,   47,  132, o(curr.D.qvZoneSen),      "D.qvZoneSen" },	// ENERGY
    {   0,   47,  132, o(curr.D.qvZoneLat),      "D.qvZoneLat" },	// ENERGY
    {   0,    1,  516,         o(curr.H.n),              "H.n" },	// INT
    {   0,   66,  516,     o(curr.H.hrsOn),          "H.hrsOn" },	// HOURS
    {   0,   66,  516,  o(curr.H.hrsOnAux),       "H.hrsOnAux" },	// HOURS
    {   0,   47,  516, o(curr.H.qhPrimary),      "H.qhPrimary" },	// ENERGY
    {   0,   47,  516, o(curr.H.qhDefrost),      "H.qhDefrost" },	// ENERGY
    {   0,   47,  516,     o(curr.H.qhAux),          "H.qhAux" },	// ENERGY
    {   0,   47,  516,     o(curr.H.qhFan),          "H.qhFan" },	// ENERGY
    {   0,   47,  516,     o(curr.H.qhNet),          "H.qhNet" },	// ENERGY
    {   0,   47,  516,     o(curr.H.qcSen),          "H.qcSen" },	// ENERGY
    {   0,   47,  516,     o(curr.H.qcLat),          "H.qcLat" },	// ENERGY
    {   0,   47,  516,     o(curr.H.qcFan),          "H.qcFan" },	// ENERGY
    {   0,   47,  516,  o(curr.H.qcSenNet),       "H.qcSenNet" },	// ENERGY
    {   0,   47,  516,     o(curr.H.qvFan),          "H.qvFan" },	// ENERGY
    {   0,   47,  516, o(curr.H.fhPrimary),      "H.fhPrimary" },	// ENERGY
    {   0,   47,  516, o(curr.H.fhDefrost),      "H.fhDefrost" },	// ENERGY
    {   0,   47,  516,     o(curr.H.fhAux),          "H.fhAux" },	// ENERGY
    {   0,   47,  516,o(curr.H.fhParasitic),    "H.fhParasitic" },	// ENERGY
    {   0,   47,  516,     o(curr.H.fhTot),          "H.fhTot" },	// ENERGY
    {   0,   47,  516, o(curr.H.ehPrimary),      "H.ehPrimary" },	// ENERGY
    {   0,   47,  516, o(curr.H.ehDefrost),      "H.ehDefrost" },	// ENERGY
    {   0,   47,  516,     o(curr.H.ehAux),          "H.ehAux" },	// ENERGY
    {   0,   47,  516,     o(curr.H.ehFan),          "H.ehFan" },	// ENERGY
    {   0,   47,  516,o(curr.H.ehParasitic),    "H.ehParasitic" },	// ENERGY
    {   0,   47,  516,     o(curr.H.ehTot),          "H.ehTot" },	// ENERGY
    {   0,   47,  516, o(curr.H.ecPrimary),      "H.ecPrimary" },	// ENERGY
    {   0,   47,  516,     o(curr.H.ecFan),          "H.ecFan" },	// ENERGY
    {   0,   47,  516,o(curr.H.ecParasitic),    "H.ecParasitic" },	// ENERGY
    {   0,   47,  516,     o(curr.H.ecTot),          "H.ecTot" },	// ENERGY
    {   0,   47,  516,     o(curr.H.evFan),          "H.evFan" },	// ENERGY
    {   0,   47,  516,o(curr.H.evParasitic),    "H.evParasitic" },	// ENERGY
    {   0,   47,  516,     o(curr.H.evTot),          "H.evTot" },	// ENERGY
    {   0,   47,  516, o(curr.H.qhZoneSen),      "H.qhZoneSen" },	// ENERGY
    {   0,   47,  516, o(curr.H.qhZoneLat),      "H.qhZoneLat" },	// ENERGY
    {   0,   47,  516, o(curr.H.qcZoneSen),      "H.qcZoneSen" },	// ENERGY
    {   0,   47,  516, o(curr.H.qcZoneLat),      "H.qcZoneLat" },	// ENERGY
    {   0,   47,  516, o(curr.H.qvZoneSen),      "H.qvZoneSen" },	// ENERGY
    {   0,   47,  516, o(curr.H.qvZoneLat),      "H.qvZoneLat" },	// ENERGY
    {   0,    1, 1028,         o(curr.S.n),              "S.n" },	// INT
    {   0,   66, 1028,     o(curr.S.hrsOn),          "S.hrsOn" },	// HOURS
    {   0,   66, 1028,  o(curr.S.hrsOnAux),       "S.hrsOnAux" },	// HOURS
    {   0,   47, 1028, o(curr.S.qhPrimary),      "S.qhPrimary" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qhDefrost),      "S.qhDefrost" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.qhAux),          "S.qhAux" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.qhFan),          "S.qhFan" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.qhNet),          "S.qhNet" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.qcSen),          "S.qcSen" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.qcLat),          "S.qcLat" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.qcFan),          "S.qcFan" },	// ENERGY
    {   0,   47, 1028,  o(curr.S.qcSenNet),       "S.qcSenNet" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.qvFan),          "S.qvFan" },	// ENERGY
    {   0,   47, 1028, o(curr.S.fhPrimary),      "S.fhPrimary" },	// ENERGY
    {   0,   47, 1028, o(curr.S.fhDefrost),      "S.fhDefrost" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.fhAux),          "S.fhAux" },	// ENERGY
    {   0,   47, 1028,o(curr.S.fhParasitic),    "S.fhParasitic" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.fhTot),          "S.fhTot" },	// ENERGY
    {   0,   47, 1028, o(curr.S.ehPrimary),      "S.ehPrimary" },	// ENERGY
    {   0,   47, 1028, o(curr.S.ehDefrost),      "S.ehDefrost" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.ehAux),          "S.ehAux" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.ehFan),          "S.ehFan" },	// ENERGY
    {   0,   47, 1028,o(curr.S.ehParasitic),    "S.ehParasitic" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.ehTot),          "S.ehTot" },	// ENERGY
    {   0,   47, 1028, o(curr.S.ecPrimary),      "S.ecPrimary" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.ecFan),          "S.ecFan" },	// ENERGY
    {   0,   47, 1028,o(curr.S.ecParasitic),    "S.ecParasitic" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.ecTot),          "S.ecTot" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.evFan),          "S.evFan" },	// ENERGY
    {   0,   47, 1028,o(curr.S.evParasitic),    "S.evParasitic" },	// ENERGY
    {   0,   47, 1028,     o(curr.S.evTot),          "S.evTot" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qhZoneSen),      "S.qhZoneSen" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qhZoneLat),      "S.qhZoneLat" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qcZoneSen),      "S.qcZoneSen" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qcZoneLat),      "S.qcZoneLat" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qvZoneSen),      "S.qvZoneSen" },	// ENERGY
    {   0,   47, 1028, o(curr.S.qvZoneLat),      "S.qvZoneLat" },	// ENERGY
    {   0,    1,   32,        o(prior.Y.n),        "prior.Y.n" },	// INT
    {   0,   66,   32,    o(prior.Y.hrsOn),    "prior.Y.hrsOn" },	// HOURS
    {   0,   66,   32, o(prior.Y.hrsOnAux), "prior.Y.hrsOnAux" },	// HOURS
    {   0,   47,   32,o(prior.Y.qhPrimary),"prior.Y.qhPrimary" },	// ENERGY
    {   0,   47,   32,o(prior.Y.qhDefrost),"prior.Y.qhDefrost" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.qhAux),    "prior.Y.qhAux" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.qhFan),    "prior.Y.qhFan" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.qhNet),    "prior.Y.qhNet" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.qcSen),    "prior.Y.qcSen" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.qcLat),    "prior.Y.qcLat" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.qcFan),    "prior.Y.qcFan" },	// ENERGY
    {   0,   47,   32, o(prior.Y.qcSenNet), "prior.Y.qcSenNet" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.qvFan),    "prior.Y.qvFan" },	// ENERGY
    {   0,   47,   32,o(prior.Y.fhPrimary),"prior.Y.fhPrimary" },	// ENERGY
    {   0,   47,   32,o(prior.Y.fhDefrost),"prior.Y.fhDefrost" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.fhAux),    "prior.Y.fhAux" },	// ENERGY
    {   0,   47,   32,o(prior.Y.fhParasitic),"prior.Y.fhParasitic" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.fhTot),    "prior.Y.fhTot" },	// ENERGY
    {   0,   47,   32,o(prior.Y.ehPrimary),"prior.Y.ehPrimary" },	// ENERGY
    {   0,   47,   32,o(prior.Y.ehDefrost),"prior.Y.ehDefrost" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.ehAux),    "prior.Y.ehAux" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.ehFan),    "prior.Y.ehFan" },	// ENERGY
    {   0,   47,   32,o(prior.Y.ehParasitic),"prior.Y.ehParasitic" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.ehTot),    "prior.Y.ehTot" },	// ENERGY
    {   0,   47,   32,o(prior.Y.ecPrimary),"prior.Y.ecPrimary" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.ecFan),    "prior.Y.ecFan" },	// ENERGY
    {   0,   47,   32,o(prior.Y.ecParasitic),"prior.Y.ecParasitic" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.ecTot),    "prior.Y.ecTot" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.evFan),    "prior.Y.evFan" },	// ENERGY
    {   0,   47,   32,o(prior.Y.evParasitic),"prior.Y.evParasitic" },	// ENERGY
    {   0,   47,   32,    o(prior.Y.evTot),    "prior.Y.evTot" },	// ENERGY
    {   0,   47,   32,o(prior.Y.qhZoneSen),"prior.Y.qhZoneSen" },	// ENERGY
    {   0,   47,   32,o(prior.Y.qhZoneLat),"prior.Y.qhZoneLat" },	// ENERGY
    {   0,   47,   32,o(prior.Y.qcZoneSen),"prior.Y.qcZoneSen" },	// ENERGY
    {   0,   47,   32,o(prior.Y.qcZoneLat),"prior.Y.qcZoneLat" },	// ENERGY
    {   0,   47,   32,o(prior.Y.qvZoneSen),"prior.Y.qvZoneSen" },	// ENERGY
    {   0,   47,   32,o(prior.Y.qvZoneLat),"prior.Y.qvZoneLat" },	// ENERGY
    {   0,    1,   64,        o(prior.M.n),        "prior.M.n" },	// INT
    {   0,   66,   64,    o(prior.M.hrsOn),    "prior.M.hrsOn" },	// HOURS
    {   0,   66,   64, o(prior.M.hrsOnAux), "prior.M.hrsOnAux" },	// HOURS
    {   0,   47,   64,o(prior.M.qhPrimary),"prior.M.qhPrimary" },	// ENERGY
    {   0,   47,   64,o(prior.M.qhDefrost),"prior.M.qhDefrost" },	// ENERGY
    {   0,   47,   64,    o(prior.M.qhAux),    "prior.M.qhAux" },	// ENERGY
    {   0,   47,   64,    o(prior.M.qhFan),    "prior.M.qhFan" },	// ENERGY
    {   0,   47,   64,    o(prior.M.qhNet),    "prior.M.qhNet" },	// ENERGY
    {   0,   47,   64,    o(prior.M.qcSen),    "prior.M.qcSen" },	// ENERGY
    {   0,   47,   64,    o(prior.M.qcLat),    "prior.M.qcLat" },	// ENERGY
    {   0,   47,   64,    o(prior.M.qcFan),    "prior.M.qcFan" },	// ENERGY
    {   0,   47,   64, o(prior.M.qcSenNet), "prior.M.qcSenNet" },	// ENERGY
    {   0,   47,   64,    o(prior.M.qvFan),    "prior.M.qvFan" },	// ENERGY
    {   0,   47,   64,o(prior.M.fhPrimary),"prior.M.fhPrimary" },	// ENERGY
    {   0,   47,   64,o(prior.M.fhDefrost),"prior.M.fhDefrost" },	// ENERGY
    {   0,   47,   64,    o(prior.M.fhAux),    "prior.M.fhAux" },	// ENERGY
    {   0,   47,   64,o(prior.M.fhParasitic),"prior.M.fhParasitic" },	// ENERGY
    {   0,   47,   64,    o(prior.M.fhTot),    "prior.M.fhTot" },	// ENERGY
    {   0,   47,   64,o(prior.M.ehPrimary),"prior.M.ehPrimary" },	// ENERGY
    {   0,   47,   64,o(prior.M.ehDefrost),"prior.M.ehDefrost" },	// ENERGY
    {   0,   47,   64,    o(prior.M.ehAux),    "prior.M.ehAux" },	// ENERGY
    {   0,   47,   64,    o(prior.M.ehFan),    "prior.M.ehFan" },	// ENERGY
    {   0,   47,   64,o(prior.M.ehParasitic),"prior.M.ehParasitic" },	// ENERGY
    {   0,   47,   64,    o(prior.M.ehTot),    "prior.M.ehTot" },	// ENERGY
    {   0,   47,   64,o(prior.M.ecPrimary),"prior.M.ecPrimary" },	// ENERGY
    {   0,   47,   64,    o(prior.M.ecFan),    "prior.M.ecFan" },	// ENERGY
    {   0,   47,   64,o(prior.M.ecParasitic),"prior.M.ecParasitic" },	// ENERGY
    {   0,   47,   64,    o(prior.M.ecTot),    "prior.M.ecTot" },	// ENERGY
    {   0,   47,   64,    o(prior.M.evFan),    "prior.M.evFan" },	// ENERGY
    {   0,   47,   64,o(prior.M.evParasitic),"prior.M.evParasitic" },	// ENERGY
    {   0,   47,   64,    o(prior.M.evTot),    "prior.M.evTot" },	// ENERGY
    {   0,   47,   64,o(prior.M.qhZoneSen),"prior.M.qhZoneSen" },	// ENERGY
    {   0,   47,   64,o(prior.M.qhZoneLat),"prior.M.qhZoneLat" },	// ENERGY
    {   0,   47,   64,o(prior.M.qcZoneSen),"prior.M.qcZoneSen" },	// ENERGY
    {   0,   47,   64,o(prior.M.qcZoneLat),"prior.M.qcZoneLat" },	// ENERGY
    {   0,   47,   64,o(prior.M.qvZoneSen),"prior.M.qvZoneSen" },	// ENERGY
    {   0,   47,   64,o(prior.M.qvZoneLat),"prior.M.qvZoneLat" },	// ENERGY
    {   0,    1,  128,        o(prior.D.n),        "prior.D.n" },	// INT
    {   0,   66,  128,    o(prior.D.hrsOn),    "prior.D.hrsOn" },	// HOURS
    {   0,   66,  128, o(prior.D.hrsOnAux), "prior.D.hrsOnAux" },	// HOURS
    {   0,   47,  128,o(prior.D.qhPrimary),"prior.D.qhPrimary" },	// ENERGY
    {   0,   47,  128,o(prior.D.qhDefrost),"prior.D.qhDefrost" },	// ENERGY
    {   0,   47,  128,    o(prior.D.qhAux),    "prior.D.qhAux" },	// ENERGY
    {   0,   47,  128,    o(prior.D.qhFan),    "prior.D.qhFan" },	// ENERGY
    {   0,   47,  128,    o(prior.D.qhNet),    "prior.D.qhNet" },	// ENERGY
    {   0,   47,  128,    o(prior.D.qcSen),    "prior.D.qcSen" },	// ENERGY
    {   0,   47,  128,    o(prior.D.qcLat),    "prior.D.qcLat" },	// ENERGY
    {   0,   47,  128,    o(prior.D.qcFan),    "prior.D.qcFan" },	// ENERGY
    {   0,   47,  128, o(prior.D.qcSenNet), "prior.D.qcSenNet" },	// ENERGY
    {   0,   47,  128,    o(prior.D.qvFan),    "prior.D.qvFan" },	// ENERGY
    {   0,   47,  128,o(prior.D.fhPrimary),"prior.D.fhPrimary" },	// ENERGY
    {   0,   47,  128,o(prior.D.fhDefrost),"prior.D.fhDefrost" },	// ENERGY
    {   0,   47,  128,    o(prior.D.fhAux),    "prior.D.fhAux" },	// ENERGY
    {   0,   47,  128,o(prior.D.fhParasitic),"prior.D.fhParasitic" },	// ENERGY
    {   0,   47,  128,    o(prior.D.fhTot),    "prior.D.fhTot" },	// ENERGY
    {   0,   47,  128,o(prior.D.ehPrimary),"prior.D.ehPrimary" },	// ENERGY
    {   0,   47,  128,o(prior.D.ehDefrost),"prior.D.ehDefrost" },	// ENERGY
    {   0,   47,  128,    o(prior.D.ehAux),    "prior.D.ehAux" },	// ENERGY
    {   0,   47,  128,    o(prior.D.ehFan),    "prior.D.ehFan" },	// ENERGY
    {   0,   47,  128,o(prior.D.ehParasitic),"prior.D.ehParasitic" },	// ENERGY
    {   0,   47,  128,    o(prior.D.ehTot),    "prior.D.ehTot" },	// ENERGY
    {   0,   47,  128,o(prior.D.ecPrimary),"prior.D.ecPrimary" },	// ENERGY
    {   0,   47,  128,    o(prior.D.ecFan),    "prior.D.ecFan" },	// ENERGY
    {   0,   47,  128,o(prior.D.ecParasitic),"prior.D.ecParasitic" },	// ENERGY
    {   0,   47,  128,    o(prior.D.ecTot),    "prior.D.ecTot" },	// ENERGY
    {   0,   47,  128,    o(prior.D.evFan),    "prior.D.evFan" },	// ENERGY
    {   0,   47,  128,o(prior.D.evParasitic),"prior.D.evParasitic" },	// ENERGY
    {   0,   47,  128,    o(prior.D.evTot),    "prior.D.evTot" },	// ENERGY
    {   0,   47,  128,o(prior.D.qhZoneSen),"prior.D.qhZoneSen" },	// ENERGY
    {   0,   47,  128,o(prior.D.qhZoneLat),"prior.D.qhZoneLat" },	// ENERGY
    {   0,   47,  128,o(prior.D.qcZoneSen),"prior.D.qcZoneSen" },	// ENERGY
    {   0,   47,  128,o(prior.D.qcZoneLat),"prior.D.qcZoneLat" },	// ENERGY
    {   0,   47,  128,o(prior.D.qvZoneSen),"prior.D.qvZoneSen" },	// ENERGY
    {   0,   47,  128,o(prior.D.qvZoneLat),"prior.D.qvZoneLat" },	// ENERGY
    {   0,    1,  512,        o(prior.H.n),        "prior.H.n" },	// INT
    {   0,   66,  512,    o(prior.H.hrsOn),    "prior.H.hrsOn" },	// HOURS
    {   0,   66,  512, o(prior.H.hrsOnAux), "prior.H.hrsOnAux" },	// HOURS
    {   0,   47,  512,o(prior.H.qhPrimary),"prior.H.qhPrimary" },	// ENERGY
    {   0,   47,  512,o(prior.H.qhDefrost),"prior.H.qhDefrost" },	// ENERGY
    {   0,   47,  512,    o(prior.H.qhAux),    "prior.H.qhAux" },	// ENERGY
    {   0,   47,  512,    o(prior.H.qhFan),    "prior.H.qhFan" },	// ENERGY
    {   0,   47,  512,    o(prior.H.qhNet),    "prior.H.qhNet" },	// ENERGY
    {   0,   47,  512,    o(prior.H.qcSen),    "prior.H.qcSen" },	// ENERGY
    {   0,   47,  512,    o(prior.H.qcLat),    "prior.H.qcLat" },	// ENERGY
    {   0,   47,  512,    o(prior.H.qcFan),    "prior.H.qcFan" },	// ENERGY
    {   0,   47,  512, o(prior.H.qcSenNet), "prior.H.qcSenNet" },	// ENERGY
    {   0,   47,  512,    o(prior.H.qvFan),    "prior.H.qvFan" },	// ENERGY
    {   0,   47,  512,o(prior.H.fhPrimary),"prior.H.fhPrimary" },	// ENERGY
    {   0,   47,  512,o(prior.H.fhDefrost),"prior.H.fhDefrost" },	// ENERGY
    {   0,   47,  512,    o(prior.H.fhAux),    "prior.H.fhAux" },	// ENERGY
    {   0,   47,  512,o(prior.H.fhParasitic),"prior.H.fhParasitic" },	// ENERGY
    {   0,   47,  512,    o(prior.H.fhTot),    "prior.H.fhTot" },	// ENERGY
    {   0,   47,  512,o(prior.H.ehPrimary),"prior.H.ehPrimary" },	// ENERGY
    {   0,   47,  512,o(prior.H.ehDefrost),"prior.H.ehDefrost" },	// ENERGY
    {   0,   47,  512,    o(prior.H.ehAux),    "prior.H.ehAux" },	// ENERGY
    {   0,   47,  512,    o(prior.H.ehFan),    "prior.H.ehFan" },	// ENERGY
    {   0,   47,  512,o(prior.H.ehParasitic),"prior.H.ehParasitic" },	// ENERGY
    {   0,   47,  512,    o(prior.H.ehTot),    "prior.H.ehTot" },	// ENERGY
    {   0,   47,  512,o(prior.H.ecPrimary),"prior.H.ecPrimary" },	// ENERGY
    {   0,   47,  512,    o(prior.H.ecFan),    "prior.H.ecFan" },	// ENERGY
    {   0,   47,  512,o(prior.H.ecParasitic),"prior.H.ecParasitic" },	// ENERGY
    {   0,   47,  512,    o(prior.H.ecTot),    "prior.H.ecTot" },	// ENERGY
    {   0,   47,  512,    o(prior.H.evFan),    "prior.H.evFan" },	// ENERGY
    {   0,   47,  512,o(prior.H.evParasitic),"prior.H.evParasitic" },	// ENERGY
    {   0,   47,  512,    o(prior.H.evTot),    "prior.H.evTot" },	// ENERGY
    {   0,   47,  512,o(prior.H.qhZoneSen),"prior.H.qhZoneSen" },	// ENERGY
    {   0,   47,  512,o(prior.H.qhZoneLat),"prior.H.qhZoneLat" },	// ENERGY
    {   0,   47,  512,o(prior.H.qcZoneSen),"prior.H.qcZoneSen" },	// ENERGY
    {   0,   47,  512,o(prior.H.qcZoneLat),"prior.H.qcZoneLat" },	// ENERGY
    {   0,   47,  512,o(prior.H.qvZoneSen),"prior.H.qvZoneSen" },	// ENERGY
    {   0,   47,  512,o(prior.H.qvZoneLat),"prior.H.qvZoneLat" },	// ENERGY
    {   0,    1, 1024,        o(prior.S.n),        "prior.S.n" },	// INT
    {   0,   66, 1024,    o(prior.S.hrsOn),    "prior.S.hrsOn" },	// HOURS
    {   0,   66, 1024, o(prior.S.hrsOnAux), "prior.S.hrsOnAux" },	// HOURS
    {   0,   47, 1024,o(prior.S.qhPrimary),"prior.S.qhPrimary" },	// ENERGY
    {   0,   47, 1024,o(prior.S.qhDefrost),"prior.S.qhDefrost" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.qhAux),    "prior.S.qhAux" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.qhFan),    "prior.S.qhFan" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.qhNet),    "prior.S.qhNet" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.qcSen),    "prior.S.qcSen" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.qcLat),    "prior.S.qcLat" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.qcFan),    "prior.S.qcFan" },	// ENERGY
    {   0,   47, 1024, o(prior.S.qcSenNet), "prior.S.qcSenNet" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.qvFan),    "prior.S.qvFan" },	// ENERGY
    {   0,   47, 1024,o(prior.S.fhPrimary),"prior.S.fhPrimary" },	// ENERGY
    {   0,   47, 1024,o(prior.S.fhDefrost),"prior.S.fhDefrost" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.fhAux),    "prior.S.fhAux" },	// ENERGY
    {   0,   47, 1024,o(prior.S.fhParasitic),"prior.S.fhParasitic" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.fhTot),    "prior.S.fhTot" },	// ENERGY
    {   0,   47, 1024,o(prior.S.ehPrimary),"prior.S.ehPrimary" },	// ENERGY
    {   0,   47, 1024,o(prior.S.ehDefrost),"prior.S.ehDefrost" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.ehAux),    "prior.S.ehAux" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.ehFan),    "prior.S.ehFan" },	// ENERGY
    {   0,   47, 1024,o(prior.S.ehParasitic),"prior.S.ehParasitic" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.ehTot),    "prior.S.ehTot" },	// ENERGY
    {   0,   47, 1024,o(prior.S.ecPrimary),"prior.S.ecPrimary" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.ecFan),    "prior.S.ecFan" },	// ENERGY
    {   0,   47, 1024,o(prior.S.ecParasitic),"prior.S.ecParasitic" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.ecTot),    "prior.S.ecTot" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.evFan),    "prior.S.evFan" },	// ENERGY
    {   0,   47, 1024,o(prior.S.evParasitic),"prior.S.evParasitic" },	// ENERGY
    {   0,   47, 1024,    o(prior.S.evTot),    "prior.S.evTot" },	// ENERGY
    {   0,   47, 1024,o(prior.S.qhZoneSen),"prior.S.qhZoneSen" },	// ENERGY
    {   0,   47, 1024,o(prior.S.qhZoneLat),"prior.S.qhZoneLat" },	// ENERGY
    {   0,   47, 1024,o(prior.S.qcZoneSen),"prior.S.qcZoneSen" },	// ENERGY
    {   0,   47, 1024,o(prior.S.qcZoneLat),"prior.S.qcZoneLat" },	// ENERGY
    {   0,   47, 1024,o(prior.S.qvZoneSen),"prior.S.qvZoneSen" },	// ENERGY
    {   0,   47, 1024,o(prior.S.qvZoneLat),"prior.S.qvZoneLat" },	// ENERGY
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirRSYSRES

struct SFIR sfirAFMTR_IVL[] =	// fields info for RTAFMTR_IVL
{
 #define o(m) offsetof(AFMTR_IVL,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    1,    0,        o(amt_count),            "count" },	// INT
    {   0,   12,    0,        o(amt_total),            "total" },	// FLOAT
    {   0,   12,    0,      o(amt_unknown),          "unknown" },	// FLOAT
    {   0,   12,    0,        o(amt_infEx),            "infEx" },	// FLOAT
    {   0,   12,    0,        o(amt_vntEx),            "vntEx" },	// FLOAT
    {   0,   12,    0,        o(amt_fanEx),            "fanEx" },	// FLOAT
    {   0,   12,    0,        o(amt_infUz),            "infUz" },	// FLOAT
    {   0,   12,    0,        o(amt_vntUz),            "vntUz" },	// FLOAT
    {   0,   12,    0,        o(amt_fanUz),            "fanUz" },	// FLOAT
    {   0,   12,    0,        o(amt_infCz),            "infCz" },	// FLOAT
    {   0,   12,    0,        o(amt_vntCz),            "vntCz" },	// FLOAT
    {   0,   12,    0,        o(amt_fanCz),            "fanCz" },	// FLOAT
    {   0,   12,    0,       o(amt_ductLk),           "ductLk" },	// FLOAT
    {   0,   12,    0,         o(amt_hvac),             "hvac" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAFMTR_IVL

struct SFIR sfirAFMTR[] =	// fields info for RTAFMTR
{
 #define o(m) offsetof(AFMTR,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    1,   36,   o(Y[0].amt_count),       "Y[0].count" },	// INT
    {   0,   12,   36,   o(Y[0].amt_total),       "Y[0].total" },	// FLOAT
    {   0,   12,   36, o(Y[0].amt_unknown),     "Y[0].unknown" },	// FLOAT
    {   0,   12,   36,   o(Y[0].amt_infEx),       "Y[0].infEx" },	// FLOAT
    {   0,   12,   36,   o(Y[0].amt_vntEx),       "Y[0].vntEx" },	// FLOAT
    {   0,   12,   36,   o(Y[0].amt_fanEx),       "Y[0].fanEx" },	// FLOAT
    {   0,   12,   36,   o(Y[0].amt_infUz),       "Y[0].infUz" },	// FLOAT
    {   0,   12,   36,   o(Y[0].amt_vntUz),       "Y[0].vntUz" },	// FLOAT
    {   0,   12,   36,   o(Y[0].amt_fanUz),       "Y[0].fanUz" },	// FLOAT
    {   0,   12,   36,   o(Y[0].amt_infCz),       "Y[0].infCz" },	// FLOAT
    {   0,   12,   36,   o(Y[0].amt_vntCz),       "Y[0].vntCz" },	// FLOAT
    {   0,   12,   36,   o(Y[0].amt_fanCz),       "Y[0].fanCz" },	// FLOAT
    {   0,   12,   36,  o(Y[0].amt_ductLk),      "Y[0].ductLk" },	// FLOAT
    {   0,   12,   36,    o(Y[0].amt_hvac),        "Y[0].hvac" },	// FLOAT
    {   0,    1,   36,   o(Y[1].amt_count),       "Y[1].count" },	// INT
    {   0,   12,   36,   o(Y[1].amt_total),       "Y[1].total" },	// FLOAT
    {   0,   12,   36, o(Y[1].amt_unknown),     "Y[1].unknown" },	// FLOAT
    {   0,   12,   36,   o(Y[1].amt_infEx),       "Y[1].infEx" },	// FLOAT
    {   0,   12,   36,   o(Y[1].amt_vntEx),       "Y[1].vntEx" },	// FLOAT
    {   0,   12,   36,   o(Y[1].amt_fanEx),       "Y[1].fanEx" },	// FLOAT
    {   0,   12,   36,   o(Y[1].amt_infUz),       "Y[1].infUz" },	// FLOAT
    {   0,   12,   36,   o(Y[1].amt_vntUz),       "Y[1].vntUz" },	// FLOAT
    {   0,   12,   36,   o(Y[1].amt_fanUz),       "Y[1].fanUz" },	// FLOAT
    {   0,   12,   36,   o(Y[1].amt_infCz),       "Y[1].infCz" },	// FLOAT
    {   0,   12,   36,   o(Y[1].amt_vntCz),       "Y[1].vntCz" },	// FLOAT
    {   0,   12,   36,   o(Y[1].amt_fanCz),       "Y[1].fanCz" },	// FLOAT
    {   0,   12,   36,  o(Y[1].amt_ductLk),      "Y[1].ductLk" },	// FLOAT
    {   0,   12,   36,    o(Y[1].amt_hvac),        "Y[1].hvac" },	// FLOAT
    {   0,    1,   68,   o(M[0].amt_count),       "M[0].count" },	// INT
    {   0,   12,   68,   o(M[0].amt_total),       "M[0].total" },	// FLOAT
    {   0,   12,   68, o(M[0].amt_unknown),     "M[0].unknown" },	// FLOAT
    {   0,   12,   68,   o(M[0].amt_infEx),       "M[0].infEx" },	// FLOAT
    {   0,   12,   68,   o(M[0].amt_vntEx),       "M[0].vntEx" },	// FLOAT
    {   0,   12,   68,   o(M[0].amt_fanEx),       "M[0].fanEx" },	// FLOAT
    {   0,   12,   68,   o(M[0].amt_infUz),       "M[0].infUz" },	// FLOAT
    {   0,   12,   68,   o(M[0].amt_vntUz),       "M[0].vntUz" },	// FLOAT
    {   0,   12,   68,   o(M[0].amt_fanUz),       "M[0].fanUz" },	// FLOAT
    {   0,   12,   68,   o(M[0].amt_infCz),       "M[0].infCz" },	// FLOAT
    {   0,   12,   68,   o(M[0].amt_vntCz),       "M[0].vntCz" },	// FLOAT
    {   0,   12,   68,   o(M[0].amt_fanCz),       "M[0].fanCz" },	// FLOAT
    {   0,   12,   68,  o(M[0].amt_ductLk),      "M[0].ductLk" },	// FLOAT
    {   0,   12,   68,    o(M[0].amt_hvac),        "M[0].hvac" },	// FLOAT
    {   0,    1,   68,   o(M[1].amt_count),       "M[1].count" },	// INT
    {   0,   12,   68,   o(M[1].amt_total),       "M[1].total" },	// FLOAT
    {   0,   12,   68, o(M[1].amt_unknown),     "M[1].unknown" },	// FLOAT
    {   0,   12,   68,   o(M[1].amt_infEx),       "M[1].infEx" },	// FLOAT
    {   0,   12,   68,   o(M[1].amt_vntEx),       "M[1].vntEx" },	// FLOAT
    {   0,   12,   68,   o(M[1].amt_fanEx),       "M[1].fanEx" },	// FLOAT
    {   0,   12,   68,   o(M[1].amt_infUz),       "M[1].infUz" },	// FLOAT
    {   0,   12,   68,   o(M[1].amt_vntUz),       "M[1].vntUz" },	// FLOAT
    {   0,   12,   68,   o(M[1].amt_fanUz),       "M[1].fanUz" },	// FLOAT
    {   0,   12,   68,   o(M[1].amt_infCz),       "M[1].infCz" },	// FLOAT
    {   0,   12,   68,   o(M[1].amt_vntCz),       "M[1].vntCz" },	// FLOAT
    {   0,   12,   68,   o(M[1].amt_fanCz),       "M[1].fanCz" },	// FLOAT
    {   0,   12,   68,  o(M[1].amt_ductLk),      "M[1].ductLk" },	// FLOAT
    {   0,   12,   68,    o(M[1].amt_hvac),        "M[1].hvac" },	// FLOAT
    {   0,    1,  132,   o(D[0].amt_count),       "D[0].count" },	// INT
    {   0,   12,  132,   o(D[0].amt_total),       "D[0].total" },	// FLOAT
    {   0,   12,  132, o(D[0].amt_unknown),     "D[0].unknown" },	// FLOAT
    {   0,   12,  132,   o(D[0].amt_infEx),       "D[0].infEx" },	// FLOAT
    {   0,   12,  132,   o(D[0].amt_vntEx),       "D[0].vntEx" },	// FLOAT
    {   0,   12,  132,   o(D[0].amt_fanEx),       "D[0].fanEx" },	// FLOAT
    {   0,   12,  132,   o(D[0].amt_infUz),       "D[0].infUz" },	// FLOAT
    {   0,   12,  132,   o(D[0].amt_vntUz),       "D[0].vntUz" },	// FLOAT
    {   0,   12,  132,   o(D[0].amt_fanUz),       "D[0].fanUz" },	// FLOAT
    {   0,   12,  132,   o(D[0].amt_infCz),       "D[0].infCz" },	// FLOAT
    {   0,   12,  132,   o(D[0].amt_vntCz),       "D[0].vntCz" },	// FLOAT
    {   0,   12,  132,   o(D[0].amt_fanCz),       "D[0].fanCz" },	// FLOAT
    {   0,   12,  132,  o(D[0].amt_ductLk),      "D[0].ductLk" },	// FLOAT
    {   0,   12,  132,    o(D[0].amt_hvac),        "D[0].hvac" },	// FLOAT
    {   0,    1,  132,   o(D[1].amt_count),       "D[1].count" },	// INT
    {   0,   12,  132,   o(D[1].amt_total),       "D[1].total" },	// FLOAT
    {   0,   12,  132, o(D[1].amt_unknown),     "D[1].unknown" },	// FLOAT
    {   0,   12,  132,   o(D[1].amt_infEx),       "D[1].infEx" },	// FLOAT
    {   0,   12,  132,   o(D[1].amt_vntEx),       "D[1].vntEx" },	// FLOAT
    {   0,   12,  132,   o(D[1].amt_fanEx),       "D[1].fanEx" },	// FLOAT
    {   0,   12,  132,   o(D[1].amt_infUz),       "D[1].infUz" },	// FLOAT
    {   0,   12,  132,   o(D[1].amt_vntUz),       "D[1].vntUz" },	// FLOAT
    {   0,   12,  132,   o(D[1].amt_fanUz),       "D[1].fanUz" },	// FLOAT
    {   0,   12,  132,   o(D[1].amt_infCz),       "D[1].infCz" },	// FLOAT
    {   0,   12,  132,   o(D[1].amt_vntCz),       "D[1].vntCz" },	// FLOAT
    {   0,   12,  132,   o(D[1].amt_fanCz),       "D[1].fanCz" },	// FLOAT
    {   0,   12,  132,  o(D[1].amt_ductLk),      "D[1].ductLk" },	// FLOAT
    {   0,   12,  132,    o(D[1].amt_hvac),        "D[1].hvac" },	// FLOAT
    {   0,    1,  516,   o(H[0].amt_count),       "H[0].count" },	// INT
    {   0,   12,  516,   o(H[0].amt_total),       "H[0].total" },	// FLOAT
    {   0,   12,  516, o(H[0].amt_unknown),     "H[0].unknown" },	// FLOAT
    {   0,   12,  516,   o(H[0].amt_infEx),       "H[0].infEx" },	// FLOAT
    {   0,   12,  516,   o(H[0].amt_vntEx),       "H[0].vntEx" },	// FLOAT
    {   0,   12,  516,   o(H[0].amt_fanEx),       "H[0].fanEx" },	// FLOAT
    {   0,   12,  516,   o(H[0].amt_infUz),       "H[0].infUz" },	// FLOAT
    {   0,   12,  516,   o(H[0].amt_vntUz),       "H[0].vntUz" },	// FLOAT
    {   0,   12,  516,   o(H[0].amt_fanUz),       "H[0].fanUz" },	// FLOAT
    {   0,   12,  516,   o(H[0].amt_infCz),       "H[0].infCz" },	// FLOAT
    {   0,   12,  516,   o(H[0].amt_vntCz),       "H[0].vntCz" },	// FLOAT
    {   0,   12,  516,   o(H[0].amt_fanCz),       "H[0].fanCz" },	// FLOAT
    {   0,   12,  516,  o(H[0].amt_ductLk),      "H[0].ductLk" },	// FLOAT
    {   0,   12,  516,    o(H[0].amt_hvac),        "H[0].hvac" },	// FLOAT
    {   0,    1,  516,   o(H[1].amt_count),       "H[1].count" },	// INT
    {   0,   12,  516,   o(H[1].amt_total),       "H[1].total" },	// FLOAT
    {   0,   12,  516, o(H[1].amt_unknown),     "H[1].unknown" },	// FLOAT
    {   0,   12,  516,   o(H[1].amt_infEx),       "H[1].infEx" },	// FLOAT
    {   0,   12,  516,   o(H[1].amt_vntEx),       "H[1].vntEx" },	// FLOAT
    {   0,   12,  516,   o(H[1].amt_fanEx),       "H[1].fanEx" },	// FLOAT
    {   0,   12,  516,   o(H[1].amt_infUz),       "H[1].infUz" },	// FLOAT
    {   0,   12,  516,   o(H[1].amt_vntUz),       "H[1].vntUz" },	// FLOAT
    {   0,   12,  516,   o(H[1].amt_fanUz),       "H[1].fanUz" },	// FLOAT
    {   0,   12,  516,   o(H[1].amt_infCz),       "H[1].infCz" },	// FLOAT
    {   0,   12,  516,   o(H[1].amt_vntCz),       "H[1].vntCz" },	// FLOAT
    {   0,   12,  516,   o(H[1].amt_fanCz),       "H[1].fanCz" },	// FLOAT
    {   0,   12,  516,  o(H[1].amt_ductLk),      "H[1].ductLk" },	// FLOAT
    {   0,   12,  516,    o(H[1].amt_hvac),        "H[1].hvac" },	// FLOAT
    {   0,    1, 1028,   o(S[0].amt_count),       "S[0].count" },	// INT
    {   0,   12, 1028,   o(S[0].amt_total),       "S[0].total" },	// FLOAT
    {   0,   12, 1028, o(S[0].amt_unknown),     "S[0].unknown" },	// FLOAT
    {   0,   12, 1028,   o(S[0].amt_infEx),       "S[0].infEx" },	// FLOAT
    {   0,   12, 1028,   o(S[0].amt_vntEx),       "S[0].vntEx" },	// FLOAT
    {   0,   12, 1028,   o(S[0].amt_fanEx),       "S[0].fanEx" },	// FLOAT
    {   0,   12, 1028,   o(S[0].amt_infUz),       "S[0].infUz" },	// FLOAT
    {   0,   12, 1028,   o(S[0].amt_vntUz),       "S[0].vntUz" },	// FLOAT
    {   0,   12, 1028,   o(S[0].amt_fanUz),       "S[0].fanUz" },	// FLOAT
    {   0,   12, 1028,   o(S[0].amt_infCz),       "S[0].infCz" },	// FLOAT
    {   0,   12, 1028,   o(S[0].amt_vntCz),       "S[0].vntCz" },	// FLOAT
    {   0,   12, 1028,   o(S[0].amt_fanCz),       "S[0].fanCz" },	// FLOAT
    {   0,   12, 1028,  o(S[0].amt_ductLk),      "S[0].ductLk" },	// FLOAT
    {   0,   12, 1028,    o(S[0].amt_hvac),        "S[0].hvac" },	// FLOAT
    {   0,    1, 1028,   o(S[1].amt_count),       "S[1].count" },	// INT
    {   0,   12, 1028,   o(S[1].amt_total),       "S[1].total" },	// FLOAT
    {   0,   12, 1028, o(S[1].amt_unknown),     "S[1].unknown" },	// FLOAT
    {   0,   12, 1028,   o(S[1].amt_infEx),       "S[1].infEx" },	// FLOAT
    {   0,   12, 1028,   o(S[1].amt_vntEx),       "S[1].vntEx" },	// FLOAT
    {   0,   12, 1028,   o(S[1].amt_fanEx),       "S[1].fanEx" },	// FLOAT
    {   0,   12, 1028,   o(S[1].amt_infUz),       "S[1].infUz" },	// FLOAT
    {   0,   12, 1028,   o(S[1].amt_vntUz),       "S[1].vntUz" },	// FLOAT
    {   0,   12, 1028,   o(S[1].amt_fanUz),       "S[1].fanUz" },	// FLOAT
    {   0,   12, 1028,   o(S[1].amt_infCz),       "S[1].infCz" },	// FLOAT
    {   0,   12, 1028,   o(S[1].amt_vntCz),       "S[1].vntCz" },	// FLOAT
    {   0,   12, 1028,   o(S[1].amt_fanCz),       "S[1].fanCz" },	// FLOAT
    {   0,   12, 1028,  o(S[1].amt_ductLk),      "S[1].ductLk" },	// FLOAT
    {   0,   12, 1028,    o(S[1].amt_hvac),        "S[1].hvac" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAFMTR

struct SFIR sfirDHWMTR_IVL[] =	// fields info for RTDHWMTR_IVL
{
 #define o(m) offsetof(DHWMTR_IVL,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,    0,            o(total),            "total" },	// FLOAT
    {   0,   12,    0,          o(unknown),          "unknown" },	// FLOAT
    {   0,   12,    0,           o(faucet),           "faucet" },	// FLOAT
    {   0,   12,    0,           o(shower),           "shower" },	// FLOAT
    {   0,   12,    0,             o(bath),             "bath" },	// FLOAT
    {   0,   12,    0,           o(cwashr),           "cwashr" },	// FLOAT
    {   0,   12,    0,           o(dwashr),           "dwashr" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWMTR_IVL

struct SFIR sfirDHWMTR_SUB[] =	// fields info for RTDHWMTR_SUB
{
 #define o(m) offsetof(DHWMTR_SUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,   32,          o(Y.total),          "Y.total" },	// FLOAT
    {   0,   12,   32,        o(Y.unknown),        "Y.unknown" },	// FLOAT
    {   0,   12,   32,         o(Y.faucet),         "Y.faucet" },	// FLOAT
    {   0,   12,   32,         o(Y.shower),         "Y.shower" },	// FLOAT
    {   0,   12,   32,           o(Y.bath),           "Y.bath" },	// FLOAT
    {   0,   12,   32,         o(Y.cwashr),         "Y.cwashr" },	// FLOAT
    {   0,   12,   32,         o(Y.dwashr),         "Y.dwashr" },	// FLOAT
    {   0,   12,   64,          o(M.total),          "M.total" },	// FLOAT
    {   0,   12,   64,        o(M.unknown),        "M.unknown" },	// FLOAT
    {   0,   12,   64,         o(M.faucet),         "M.faucet" },	// FLOAT
    {   0,   12,   64,         o(M.shower),         "M.shower" },	// FLOAT
    {   0,   12,   64,           o(M.bath),           "M.bath" },	// FLOAT
    {   0,   12,   64,         o(M.cwashr),         "M.cwashr" },	// FLOAT
    {   0,   12,   64,         o(M.dwashr),         "M.dwashr" },	// FLOAT
    {   0,   12,  128,          o(D.total),          "D.total" },	// FLOAT
    {   0,   12,  128,        o(D.unknown),        "D.unknown" },	// FLOAT
    {   0,   12,  128,         o(D.faucet),         "D.faucet" },	// FLOAT
    {   0,   12,  128,         o(D.shower),         "D.shower" },	// FLOAT
    {   0,   12,  128,           o(D.bath),           "D.bath" },	// FLOAT
    {   0,   12,  128,         o(D.cwashr),         "D.cwashr" },	// FLOAT
    {   0,   12,  128,         o(D.dwashr),         "D.dwashr" },	// FLOAT
    {   0,   12,  512,          o(H.total),          "H.total" },	// FLOAT
    {   0,   12,  512,        o(H.unknown),        "H.unknown" },	// FLOAT
    {   0,   12,  512,         o(H.faucet),         "H.faucet" },	// FLOAT
    {   0,   12,  512,         o(H.shower),         "H.shower" },	// FLOAT
    {   0,   12,  512,           o(H.bath),           "H.bath" },	// FLOAT
    {   0,   12,  512,         o(H.cwashr),         "H.cwashr" },	// FLOAT
    {   0,   12,  512,         o(H.dwashr),         "H.dwashr" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWMTR_SUB

struct SFIR sfirDHWMTR[] =	// fields info for RTDHWMTR
{
 #define o(m) offsetof(DHWMTR,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   12,   36,     o(curr.Y.total),          "Y.total" },	// FLOAT
    {   0,   12,   36,   o(curr.Y.unknown),        "Y.unknown" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.faucet),         "Y.faucet" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.shower),         "Y.shower" },	// FLOAT
    {   0,   12,   36,      o(curr.Y.bath),           "Y.bath" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.cwashr),         "Y.cwashr" },	// FLOAT
    {   0,   12,   36,    o(curr.Y.dwashr),         "Y.dwashr" },	// FLOAT
    {   0,   12,   68,     o(curr.M.total),          "M.total" },	// FLOAT
    {   0,   12,   68,   o(curr.M.unknown),        "M.unknown" },	// FLOAT
    {   0,   12,   68,    o(curr.M.faucet),         "M.faucet" },	// FLOAT
    {   0,   12,   68,    o(curr.M.shower),         "M.shower" },	// FLOAT
    {   0,   12,   68,      o(curr.M.bath),           "M.bath" },	// FLOAT
    {   0,   12,   68,    o(curr.M.cwashr),         "M.cwashr" },	// FLOAT
    {   0,   12,   68,    o(curr.M.dwashr),         "M.dwashr" },	// FLOAT
    {   0,   12,  132,     o(curr.D.total),          "D.total" },	// FLOAT
    {   0,   12,  132,   o(curr.D.unknown),        "D.unknown" },	// FLOAT
    {   0,   12,  132,    o(curr.D.faucet),         "D.faucet" },	// FLOAT
    {   0,   12,  132,    o(curr.D.shower),         "D.shower" },	// FLOAT
    {   0,   12,  132,      o(curr.D.bath),           "D.bath" },	// FLOAT
    {   0,   12,  132,    o(curr.D.cwashr),         "D.cwashr" },	// FLOAT
    {   0,   12,  132,    o(curr.D.dwashr),         "D.dwashr" },	// FLOAT
    {   0,   12,  516,     o(curr.H.total),          "H.total" },	// FLOAT
    {   0,   12,  516,   o(curr.H.unknown),        "H.unknown" },	// FLOAT
    {   0,   12,  516,    o(curr.H.faucet),         "H.faucet" },	// FLOAT
    {   0,   12,  516,    o(curr.H.shower),         "H.shower" },	// FLOAT
    {   0,   12,  516,      o(curr.H.bath),           "H.bath" },	// FLOAT
    {   0,   12,  516,    o(curr.H.cwashr),         "H.cwashr" },	// FLOAT
    {   0,   12,  516,    o(curr.H.dwashr),         "H.dwashr" },	// FLOAT
    {   0,   12,   32,    o(prior.Y.total),    "prior.Y.total" },	// FLOAT
    {   0,   12,   32,  o(prior.Y.unknown),  "prior.Y.unknown" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.faucet),   "prior.Y.faucet" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.shower),   "prior.Y.shower" },	// FLOAT
    {   0,   12,   32,     o(prior.Y.bath),     "prior.Y.bath" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.cwashr),   "prior.Y.cwashr" },	// FLOAT
    {   0,   12,   32,   o(prior.Y.dwashr),   "prior.Y.dwashr" },	// FLOAT
    {   0,   12,   64,    o(prior.M.total),    "prior.M.total" },	// FLOAT
    {   0,   12,   64,  o(prior.M.unknown),  "prior.M.unknown" },	// FLOAT
    {   0,   12,   64,   o(prior.M.faucet),   "prior.M.faucet" },	// FLOAT
    {   0,   12,   64,   o(prior.M.shower),   "prior.M.shower" },	// FLOAT
    {   0,   12,   64,     o(prior.M.bath),     "prior.M.bath" },	// FLOAT
    {   0,   12,   64,   o(prior.M.cwashr),   "prior.M.cwashr" },	// FLOAT
    {   0,   12,   64,   o(prior.M.dwashr),   "prior.M.dwashr" },	// FLOAT
    {   0,   12,  128,    o(prior.D.total),    "prior.D.total" },	// FLOAT
    {   0,   12,  128,  o(prior.D.unknown),  "prior.D.unknown" },	// FLOAT
    {   0,   12,  128,   o(prior.D.faucet),   "prior.D.faucet" },	// FLOAT
    {   0,   12,  128,   o(prior.D.shower),   "prior.D.shower" },	// FLOAT
    {   0,   12,  128,     o(prior.D.bath),     "prior.D.bath" },	// FLOAT
    {   0,   12,  128,   o(prior.D.cwashr),   "prior.D.cwashr" },	// FLOAT
    {   0,   12,  128,   o(prior.D.dwashr),   "prior.D.dwashr" },	// FLOAT
    {   0,   12,  512,    o(prior.H.total),    "prior.H.total" },	// FLOAT
    {   0,   12,  512,  o(prior.H.unknown),  "prior.H.unknown" },	// FLOAT
    {   0,   12,  512,   o(prior.H.faucet),   "prior.H.faucet" },	// FLOAT
    {   0,   12,  512,   o(prior.H.shower),   "prior.H.shower" },	// FLOAT
    {   0,   12,  512,     o(prior.H.bath),     "prior.H.bath" },	// FLOAT
    {   0,   12,  512,   o(prior.H.cwashr),   "prior.H.cwashr" },	// FLOAT
    {   0,   12,  512,   o(prior.H.dwashr),   "prior.H.dwashr" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWMTR

struct SFIR sfirDHWSYSRES_IVL[] =	// fields info for RTDHWSYSRES_IVL
{
 #define o(m) offsetof(DHWSYSRES_IVL,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,    4,            o(qLoad),            "qLoad" },	// FLOAT
    {   0,   12,    4,            o(qLoss),            "qLoss" },	// FLOAT
    {   0,   12,    4,            o(qLoop),            "qLoop" },	// FLOAT
    {   0,   12,    4,            o(qDWHR),            "qDWHR" },	// FLOAT
    {   0,   12,    4,             o(qSSF),             "qSSF" },	// FLOAT
    {   0,   12,    4,           o(qSolar),           "qSolar" },	// FLOAT
    {   0,   12,    4,              o(qWH),              "qWH" },	// FLOAT
    {   0,   12,    4,              o(qLH),              "qLH" },	// FLOAT
    {   0,   12,    4,             o(qXBU),             "qXBU" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWSYSRES_IVL

struct SFIR sfirDHWSYSRES[] =	// fields info for RTDHWSYSRES
{
 #define o(m) offsetof(DHWSYSRES,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   12,   36,          o(Y.qLoad),          "Y.qLoad" },	// FLOAT
    {   0,   12,   36,          o(Y.qLoss),          "Y.qLoss" },	// FLOAT
    {   0,   12,   36,          o(Y.qLoop),          "Y.qLoop" },	// FLOAT
    {   0,   12,   36,          o(Y.qDWHR),          "Y.qDWHR" },	// FLOAT
    {   0,   12,   36,           o(Y.qSSF),           "Y.qSSF" },	// FLOAT
    {   0,   12,   36,         o(Y.qSolar),         "Y.qSolar" },	// FLOAT
    {   0,   12,   36,            o(Y.qWH),            "Y.qWH" },	// FLOAT
    {   0,   12,   36,            o(Y.qLH),            "Y.qLH" },	// FLOAT
    {   0,   12,   36,           o(Y.qXBU),           "Y.qXBU" },	// FLOAT
    {   0,   12,   68,          o(M.qLoad),          "M.qLoad" },	// FLOAT
    {   0,   12,   68,          o(M.qLoss),          "M.qLoss" },	// FLOAT
    {   0,   12,   68,          o(M.qLoop),          "M.qLoop" },	// FLOAT
    {   0,   12,   68,          o(M.qDWHR),          "M.qDWHR" },	// FLOAT
    {   0,   12,   68,           o(M.qSSF),           "M.qSSF" },	// FLOAT
    {   0,   12,   68,         o(M.qSolar),         "M.qSolar" },	// FLOAT
    {   0,   12,   68,            o(M.qWH),            "M.qWH" },	// FLOAT
    {   0,   12,   68,            o(M.qLH),            "M.qLH" },	// FLOAT
    {   0,   12,   68,           o(M.qXBU),           "M.qXBU" },	// FLOAT
    {   0,   12,  132,          o(D.qLoad),          "D.qLoad" },	// FLOAT
    {   0,   12,  132,          o(D.qLoss),          "D.qLoss" },	// FLOAT
    {   0,   12,  132,          o(D.qLoop),          "D.qLoop" },	// FLOAT
    {   0,   12,  132,          o(D.qDWHR),          "D.qDWHR" },	// FLOAT
    {   0,   12,  132,           o(D.qSSF),           "D.qSSF" },	// FLOAT
    {   0,   12,  132,         o(D.qSolar),         "D.qSolar" },	// FLOAT
    {   0,   12,  132,            o(D.qWH),            "D.qWH" },	// FLOAT
    {   0,   12,  132,            o(D.qLH),            "D.qLH" },	// FLOAT
    {   0,   12,  132,           o(D.qXBU),           "D.qXBU" },	// FLOAT
    {   0,   12,  516,          o(H.qLoad),          "H.qLoad" },	// FLOAT
    {   0,   12,  516,          o(H.qLoss),          "H.qLoss" },	// FLOAT
    {   0,   12,  516,          o(H.qLoop),          "H.qLoop" },	// FLOAT
    {   0,   12,  516,          o(H.qDWHR),          "H.qDWHR" },	// FLOAT
    {   0,   12,  516,           o(H.qSSF),           "H.qSSF" },	// FLOAT
    {   0,   12,  516,         o(H.qSolar),         "H.qSolar" },	// FLOAT
    {   0,   12,  516,            o(H.qWH),            "H.qWH" },	// FLOAT
    {   0,   12,  516,            o(H.qLH),            "H.qLH" },	// FLOAT
    {   0,   12,  516,           o(H.qXBU),           "H.qXBU" },	// FLOAT
    {   0,   12, 1028,          o(S.qLoad),          "S.qLoad" },	// FLOAT
    {   0,   12, 1028,          o(S.qLoss),          "S.qLoss" },	// FLOAT
    {   0,   12, 1028,          o(S.qLoop),          "S.qLoop" },	// FLOAT
    {   0,   12, 1028,          o(S.qDWHR),          "S.qDWHR" },	// FLOAT
    {   0,   12, 1028,           o(S.qSSF),           "S.qSSF" },	// FLOAT
    {   0,   12, 1028,         o(S.qSolar),         "S.qSolar" },	// FLOAT
    {   0,   12, 1028,            o(S.qWH),            "S.qWH" },	// FLOAT
    {   0,   12, 1028,            o(S.qLH),            "S.qLH" },	// FLOAT
    {   0,   12, 1028,           o(S.qXBU),           "S.qXBU" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWSYSRES

struct SFIR sfirSEGTOTS[] =	// fields info for RTSEGTOTS
{
 #define o(m) offsetof(SEGTOTS,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   19,   32,         o(st_count),            "count" },	// DBL
    {   0,   19,   32,           o(st_len),              "len" },	// DBL
    {   0,   19,   32,           o(st_vol),              "vol" },	// DBL
    {   0,   19,   32,        o(st_exArea),           "exArea" },	// DBL
    {   0,   19,   32,            o(st_UA),               "UA" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirSEGTOTS

struct SFIR sfirDHWSYS[] =	// fields info for RTDHWSYS
{
 #define o(m) offsetof(DHWSYS,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  114,    1,      o(ws_calcMode),         "calcMode" },	// WSCALCMODECH
    {   0,   24,    1,o(ws_centralDHWSYSi),   "centralDHWSYSi" },	// TI
    {   0,   13,    1,          o(ws_mult),             "mult" },	// FLOAT_GEZ
    {   0,   24,    1,      o(ws_elecMtri),         "elecMtri" },	// TI
    {   0,   24,    1,      o(ws_fuelMtri),         "fuelMtri" },	// TI
    {   0,   12,  516,        o(ws_inElec),           "inElec" },	// FLOAT
    {   0,   12,  516,        o(ws_inFuel),           "inFuel" },	// FLOAT
    {   0,   24,    1,          o(ws_swTi),             "swTi" },	// TI
    {   0,   12,  516,          o(ws_qSlr),             "qSlr" },	// FLOAT
    {   0,   19,   36,o(ws_SSFAnnualSolar),   "SSFAnnualSolar" },	// DBL
    {   0,   19,   36,  o(ws_SSFAnnualReq),     "SSFAnnualReq" },	// DBL
    {   0,   12,   36,     o(ws_SSFAnnual),        "SSFAnnual" },	// FLOAT
    {   0,   12,  516,        o(ws_tInlet),           "tInlet" },	// FLOAT
    {   0,   12,  516,       o(ws_tInletX),          "tInletX" },	// FLOAT
    {   0,   12,  512,         o(ws_hwUse),            "hwUse" },	// FLOAT
    {   0,    1,  516,      o(ws_iTk0DWHR),         "iTk0DWHR" },	// INT
    {   0,    1,  516,      o(ws_iTkNDWHR),         "iTkNDWHR" },	// INT
    {   0,   12,  516,         o(ws_qDWHR),            "qDWHR" },	// FLOAT
    {   0,   12,  516,       o(ws_qDWHRWH),          "qDWHRWH" },	// FLOAT
    {   0,   24,    1,      o(ws_WHhwMtri),         "WHhwMtri" },	// TI
    {   0,   24,    1,      o(ws_FXhwMtri),         "FXhwMtri" },	// TI
    {   0,   12,  516,     o(ws_whUseNoHR),        "whUseNoHR" },	// FLOAT
    {   0,   12,  516,o(ws_fxUseMix.total),   "fxUseMix.total" },	// FLOAT
    {   0,   12,  516,o(ws_fxUseMix.unknown), "fxUseMix.unknown" },	// FLOAT
    {   0,   12,  516,o(ws_fxUseMix.faucet),  "fxUseMix.faucet" },	// FLOAT
    {   0,   12,  516,o(ws_fxUseMix.shower),  "fxUseMix.shower" },	// FLOAT
    {   0,   12,  516, o(ws_fxUseMix.bath),    "fxUseMix.bath" },	// FLOAT
    {   0,   12,  516,o(ws_fxUseMix.cwashr),  "fxUseMix.cwashr" },	// FLOAT
    {   0,   12,  516,o(ws_fxUseMix.dwashr),  "fxUseMix.dwashr" },	// FLOAT
    {   0,   19,   36,o(ws_fxUseMixTot[0]),   "fxUseMixTot[0]" },	// DBL
    {   0,   19,   36,o(ws_fxUseMixTot[1]),   "fxUseMixTot[1]" },	// DBL
    {   0,   19,   36,o(ws_fxUseMixTot[2]),   "fxUseMixTot[2]" },	// DBL
    {   0,   19,   36,o(ws_fxUseMixTot[3]),   "fxUseMixTot[3]" },	// DBL
    {   0,   19,   36,o(ws_fxUseMixTot[4]),   "fxUseMixTot[4]" },	// DBL
    {   0,   19,   36,o(ws_fxUseMixTot[5]),   "fxUseMixTot[5]" },	// DBL
    {   0,   19,   36,o(ws_fxUseMixTot[6]),   "fxUseMixTot[6]" },	// DBL
    {   0,   19,   36,o(ws_fxUseMixTot[7]),   "fxUseMixTot[7]" },	// DBL
    {   0,   12,  512,o(ws_fxUseMixLH.total), "fxUseMixLH.total" },	// FLOAT
    {   0,   12,  512,o(ws_fxUseMixLH.unknown),"fxUseMixLH.unknown" },	// FLOAT
    {   0,   12,  512,o(ws_fxUseMixLH.faucet),"fxUseMixLH.faucet" },	// FLOAT
    {   0,   12,  512,o(ws_fxUseMixLH.shower),"fxUseMixLH.shower" },	// FLOAT
    {   0,   12,  512,o(ws_fxUseMixLH.bath),  "fxUseMixLH.bath" },	// FLOAT
    {   0,   12,  512,o(ws_fxUseMixLH.cwashr),"fxUseMixLH.cwashr" },	// FLOAT
    {   0,   12,  512,o(ws_fxUseMixLH.dwashr),"fxUseMixLH.dwashr" },	// FLOAT
    {   0,   12,  516,   o(ws_whUse.total),      "whUse.total" },	// FLOAT
    {   0,   12,  516, o(ws_whUse.unknown),    "whUse.unknown" },	// FLOAT
    {   0,   12,  516,  o(ws_whUse.faucet),     "whUse.faucet" },	// FLOAT
    {   0,   12,  516,  o(ws_whUse.shower),     "whUse.shower" },	// FLOAT
    {   0,   12,  516,    o(ws_whUse.bath),       "whUse.bath" },	// FLOAT
    {   0,   12,  516,  o(ws_whUse.cwashr),     "whUse.cwashr" },	// FLOAT
    {   0,   12,  516,  o(ws_whUse.dwashr),     "whUse.dwashr" },	// FLOAT
    {   0,   19,   36,   o(ws_whUseTot[0]),      "whUseTot[0]" },	// DBL
    {   0,   19,   36,   o(ws_whUseTot[1]),      "whUseTot[1]" },	// DBL
    {   0,   19,   36,   o(ws_whUseTot[2]),      "whUseTot[2]" },	// DBL
    {   0,   19,   36,   o(ws_whUseTot[3]),      "whUseTot[3]" },	// DBL
    {   0,   19,   36,   o(ws_whUseTot[4]),      "whUseTot[4]" },	// DBL
    {   0,   19,   36,   o(ws_whUseTot[5]),      "whUseTot[5]" },	// DBL
    {   0,   19,   36,   o(ws_whUseTot[6]),      "whUseTot[6]" },	// DBL
    {   0,   19,   36,   o(ws_whUseTot[7]),      "whUseTot[7]" },	// DBL
    {   0,    3,    1,    o(ws_drawMaxDur),       "drawMaxDur" },	// SI
    {   0,   12,    1,       o(ws_drawMax),          "drawMax" },	// FLOAT
    {   0,    3,    1,    o(ws_loadMaxDur),       "loadMaxDur" },	// SI
    {   0,   12,    1,       o(ws_loadMax),          "loadMax" },	// FLOAT
    {   0,   12,    1,  o(ws_tSetpointDes),     "tSetpointDes" },	// FLOAT
    {   0,   12,    1,     o(ws_tInletDes),        "tInletDes" },	// FLOAT
    {   0,   12,   36,   o(ws_ashpTSrcDes),      "ashpTSrcDes" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[0]),"heatingCapDesTopN[0]" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[1]),"heatingCapDesTopN[1]" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[2]),"heatingCapDesTopN[2]" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[3]),"heatingCapDesTopN[3]" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[4]),"heatingCapDesTopN[4]" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[5]),"heatingCapDesTopN[5]" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[6]),"heatingCapDesTopN[6]" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[7]),"heatingCapDesTopN[7]" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[8]),"heatingCapDesTopN[8]" },	// FLOAT
    {   0,   12,   36,o(ws_heatingCapDesTopN[9]),"heatingCapDesTopN[9]" },	// FLOAT
    {   0,   12,    1, o(ws_heatingCapDes),    "heatingCapDes" },	// FLOAT
    {   0,   14,    1, o(ws_volRunningDes),    "volRunningDes" },	// FLOAT_GZ
    {   0,   14,    1,         o(ws_fxDes),            "fxDes" },	// FLOAT_GZ
    {   0,   12,   32,          o(ws_tUse),             "tUse" },	// FLOAT
    {   0,   12,  512,     o(ws_tSetpoint),        "tSetpoint" },	// FLOAT
    {   0,   12,  512,   o(ws_tSetpointLH),      "tSetpointLH" },	// FLOAT
    {   0,  122,   32,      o(ws_drMethod),         "drMethod" },	// DHWDRMETH
    {   0,  164,  512,      o(ws_drSignal),         "drSignal" },	// DHWDRSIG
    {   0,    1,  516,  o(ws_drStatusHPWH),     "drStatusHPWH" },	// INT
    {   1,   19, 1024,   o(ws_tOutPrimSum),      "tOutPrimSum" },	// DBL
    {   0,   12, 1028,    o(ws_tOutPrimLT),       "tOutPrimLT" },	// FLOAT
    {   0,   24,  128,       o(ws_dayUsei),          "dayUsei" },	// TI
    {   0,   11,  128,    o(ws_dayUseName),       "dayUseName" },	// CHP
    {   0,    1,   32,o(ws_childDHWDAYUSEFlag),"childDHWDAYUSEFlag" },	// INT
    {   0,   13,  512,       o(ws_parElec),          "parElec" },	// FLOAT_GEZ
    {   0,   14,    1,          o(ws_SDLM),             "SDLM" },	// FLOAT_GZ
    {   0,   14,    1,           o(ws_DSM),              "DSM" },	// FLOAT_GZ
    {   0,   13,  512,           o(ws_SSF),              "SSF" },	// FLOAT_GEZ
    {   0,   13,  512,            o(ws_WF),               "WF" },	// FLOAT_GEZ
    {   0,    1,  516,  o(ws_drawCount[0]),     "drawCount[0]" },	// INT
    {   0,    1,  516,  o(ws_drawCount[1]),     "drawCount[1]" },	// INT
    {   0,    1,  516,  o(ws_drawCount[2]),     "drawCount[2]" },	// INT
    {   0,    1,  516,  o(ws_drawCount[3]),     "drawCount[3]" },	// INT
    {   0,    1,  516,  o(ws_drawCount[4]),     "drawCount[4]" },	// INT
    {   0,    1,  516,  o(ws_drawCount[5]),     "drawCount[5]" },	// INT
    {   0,   12,   32,o(ws_drawsPerDay[0]),   "drawsPerDay[0]" },	// FLOAT
    {   0,   12,   32,o(ws_drawsPerDay[1]),   "drawsPerDay[1]" },	// FLOAT
    {   0,   12,   32,o(ws_drawsPerDay[2]),   "drawsPerDay[2]" },	// FLOAT
    {   0,   12,   32,o(ws_drawsPerDay[3]),   "drawsPerDay[3]" },	// FLOAT
    {   0,   12,   32,o(ws_drawsPerDay[4]),   "drawsPerDay[4]" },	// FLOAT
    {   0,   12,   32,o(ws_drawsPerDay[5]),   "drawsPerDay[5]" },	// FLOAT
    {   0,   13,  516,   o(ws_drawDurF[0]),      "drawDurF[0]" },	// FLOAT_GEZ
    {   0,   13,  516,   o(ws_drawDurF[1]),      "drawDurF[1]" },	// FLOAT_GEZ
    {   0,   13,  516,   o(ws_drawDurF[2]),      "drawDurF[2]" },	// FLOAT_GEZ
    {   0,   13,  516,   o(ws_drawDurF[3]),      "drawDurF[3]" },	// FLOAT_GEZ
    {   0,   13,  516,   o(ws_drawDurF[4]),      "drawDurF[4]" },	// FLOAT_GEZ
    {   0,   13,  516,   o(ws_drawDurF[5]),      "drawDurF[5]" },	// FLOAT_GEZ
    {   0,  119,    1,   o(ws_branchModel),      "branchModel" },	// DHWBRANCHMODELCH
    {   0,   12,  512,  o(ws_drawWaste[0]),     "drawWaste[0]" },	// FLOAT
    {   0,   12,  512,  o(ws_drawWaste[1]),     "drawWaste[1]" },	// FLOAT
    {   0,   12,  512,  o(ws_drawWaste[2]),     "drawWaste[2]" },	// FLOAT
    {   0,   12,  512,  o(ws_drawWaste[3]),     "drawWaste[3]" },	// FLOAT
    {   0,   12,  512,  o(ws_drawWaste[4]),     "drawWaste[4]" },	// FLOAT
    {   0,   12,  512,  o(ws_drawWaste[5]),     "drawWaste[5]" },	// FLOAT
    {   0,   12,    1,o(ws_dayWasteDrawF[0]), "dayWasteDrawF[0]" },	// FLOAT
    {   0,   12,    1,o(ws_dayWasteDrawF[1]), "dayWasteDrawF[1]" },	// FLOAT
    {   0,   12,    1,o(ws_dayWasteDrawF[2]), "dayWasteDrawF[2]" },	// FLOAT
    {   0,   12,    1,o(ws_dayWasteDrawF[3]), "dayWasteDrawF[3]" },	// FLOAT
    {   0,   12,    1,o(ws_dayWasteDrawF[4]), "dayWasteDrawF[4]" },	// FLOAT
    {   0,   12,    1,o(ws_dayWasteDrawF[5]), "dayWasteDrawF[5]" },	// FLOAT
    {   0,   13,    1,   o(ws_dayWasteVol),      "dayWasteVol" },	// FLOAT_GEZ
    {   0,   13,    1,o(ws_dayWasteBranchVolF),"dayWasteBranchVolF" },	// FLOAT_GEZ
    {   0,   13,   32,      o(ws_dayWaste),         "dayWaste" },	// FLOAT_GEZ
    {   0,   13,   36, o(ws_dayWasteScale),    "dayWasteScale" },	// FLOAT_GEZ
    {   0,   13,   32,o(ws_childDHWSYSCount), "childDHWSYSCount" },	// FLOAT_GEZ
    {   0,   13,   32,       o(ws_whCount),          "whCount" },	// FLOAT_GEZ
    {   0,   13,   32,      o(ws_wlhCount),         "wlhCount" },	// FLOAT_GEZ
    {   0,   13,   32,  o(ws_whCountUseTS),     "whCountUseTS" },	// FLOAT_GEZ
    {   0,   13,   32, o(ws_wlhCountUseTS),    "wlhCountUseTS" },	// FLOAT_GEZ
    {   0,    1,   32,       o(ws_wtCount),          "wtCount" },	// INT
    {   0,    1,   32,       o(ws_wpCount),          "wpCount" },	// INT
    {   0,    1,   32,       o(ws_wlCount),          "wlCount" },	// INT
    {   0,    1,   32, o(ws_configChecked),    "configChecked" },	// INT
    {   0,   19,   32,o(ws_loopSegTotals.st_count),"loopSegTotals.count" },	// DBL
    {   0,   19,   32,o(ws_loopSegTotals.st_len),"loopSegTotals.len" },	// DBL
    {   0,   19,   32,o(ws_loopSegTotals.st_vol),"loopSegTotals.vol" },	// DBL
    {   0,   19,   32,o(ws_loopSegTotals.st_exArea),"loopSegTotals.exArea" },	// DBL
    {   0,   19,   32,o(ws_loopSegTotals.st_UA), "loopSegTotals.UA" },	// DBL
    {   0,   19,   32,o(ws_branchTotals.st_count),"branchTotals.count" },	// DBL
    {   0,   19,   32,o(ws_branchTotals.st_len), "branchTotals.len" },	// DBL
    {   0,   19,   32,o(ws_branchTotals.st_vol), "branchTotals.vol" },	// DBL
    {   0,   19,   32,o(ws_branchTotals.st_exArea),"branchTotals.exArea" },	// DBL
    {   0,   19,   32,o(ws_branchTotals.st_UA),  "branchTotals.UA" },	// DBL
    {   0,    1,   32,       o(ws_wrCount),          "wrCount" },	// INT
    {   0,    1,   32, o(ws_wrFeedWHCount),    "wrFeedWHCount" },	// INT
    {   0,    1,   32,o(ws_wrFxDrainCount),   "wrFxDrainCount" },	// INT
    {   0,    4,   32,    o(ws_fxCount[0]),       "fxCount[0]" },	// SI_GEZ
    {   0,    4,   32,    o(ws_fxCount[1]),       "fxCount[1]" },	// SI_GEZ
    {   0,    4,   32,    o(ws_fxCount[2]),       "fxCount[2]" },	// SI_GEZ
    {   0,    4,   32,    o(ws_fxCount[3]),       "fxCount[3]" },	// SI_GEZ
    {   0,    4,   32,    o(ws_fxCount[4]),       "fxCount[4]" },	// SI_GEZ
    {   0,    4,   32,    o(ws_fxCount[5]),       "fxCount[5]" },	// SI_GEZ
    {   0,   24,    1,o(ws_loadShareDHWSYSi), "loadShareDHWSYSi" },	// TI
    {   0,    1,   32,o(ws_loadShareCount[0]),"loadShareCount[0]" },	// INT
    {   0,    1,   32,o(ws_loadShareCount[1]),"loadShareCount[1]" },	// INT
    {   0,    1,   32,o(ws_loadShareCount[2]),"loadShareCount[2]" },	// INT
    {   0,    1,   32,o(ws_loadShareCount[3]),"loadShareCount[3]" },	// INT
    {   0,    1,   32,o(ws_loadShareCount[4]),"loadShareCount[4]" },	// INT
    {   0,    1,   32,o(ws_loadShareCount[5]),"loadShareCount[5]" },	// INT
    {   0,    1,  132,o(ws_loadShareWS0[0]),  "loadShareWS0[0]" },	// INT
    {   0,    1,  132,o(ws_loadShareWS0[1]),  "loadShareWS0[1]" },	// INT
    {   0,    1,  132,o(ws_loadShareWS0[2]),  "loadShareWS0[2]" },	// INT
    {   0,    1,  132,o(ws_loadShareWS0[3]),  "loadShareWS0[3]" },	// INT
    {   0,    1,  132,o(ws_loadShareWS0[4]),  "loadShareWS0[4]" },	// INT
    {   0,    1,  132,o(ws_loadShareWS0[5]),  "loadShareWS0[5]" },	// INT
    {   0,   89,    1,       o(ws_drawCSV),          "drawCSV" },	// NOYESCH
    {   0,   12,  516,          o(ws_HHWO),             "HHWO" },	// FLOAT
    {   0,   12,  516,           o(ws_DLM),              "DLM" },	// FLOAT
    {   0,   12,  516,         o(ws_volRL),            "volRL" },	// FLOAT
    {   0,   12,  516,           o(ws_tRL),              "tRL" },	// FLOAT
    {   0,   12,  516,          o(ws_HRBL),             "HRBL" },	// FLOAT
    {   0,   12,  516,         o(ws_t24WL),            "t24WL" },	// FLOAT
    {   0,   19,   36,      o(ws_t24WLTot),         "t24WLTot" },	// DBL
    {   0,   12,  516,          o(ws_HRDL),             "HRDL" },	// FLOAT
    {   0,   12, 1028,         o(ws_HJLsh),            "HJLsh" },	// FLOAT
    {   0,   12,  516,           o(ws_HJL),              "HJL" },	// FLOAT
    {   0,   12,  516,          o(ws_HARL),             "HARL" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWSYS

struct SFIR sfirHPWHLINK[] =	// fields info for RTHPWHLINK
{
 #define o(m) offsetof(HPWHLINK,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    1,   32,       o(hw_HSCount),          "HSCount" },	// INT
    {   0,   12, 1024,           o(hw_tEx),              "tEx" },	// FLOAT
    {   0,   12, 1024,      o(hw_tASHPSrc),         "tASHPSrc" },	// FLOAT
    {   0,   13, 1028,       o(hw_qTXTick),          "qTXTick" },	// FLOAT_GEZ
    {   0,    1,   32,     o(hw_nQTXNodes),        "nQTXNodes" },	// INT
    {   0,   12,  512,       o(hw_fMixUse),          "fMixUse" },	// FLOAT
    {   0,   12,  512,        o(hw_fMixRL),           "fMixRL" },	// FLOAT
    {   0,   19, 1028,     o(hw_inElec[0]),        "inElec[0]" },	// DBL
    {   0,   19, 1028,     o(hw_inElec[1]),        "inElec[1]" },	// DBL
    {   0,   12,   32,       o(hw_HPWHxBU),          "HPWHxBU" },	// FLOAT
    {   0,   19, 1028,          o(hw_qEnv),             "qEnv" },	// DBL
    {   0,   19, 1028,         o(hw_qLoss),            "qLoss" },	// DBL
    {   0,   19, 1028,           o(hw_qHW),              "qHW" },	// DBL
    {   0,   19, 1028,           o(hw_qTX),              "qTX" },	// DBL
    {   0,    1,  516,   o(hw_tankTempSet),      "tankTempSet" },	// INT
    {   0,   12,   32, o(hw_tankHCNominal),    "tankHCNominal" },	// FLOAT
    {   0,   19, 1028,   o(hw_tankHCStart),      "tankHCStart" },	// DBL
    {   0,   19, 1028,       o(hw_tHWOutF),          "tHWOutF" },	// DBL
    {   0,    1, 1028,   o(hw_nzDrawCount),      "nzDrawCount" },	// INT
    {   0,   12,  516,        o(hw_tHWOut),           "tHWOut" },	// FLOAT
    {   0,    1,  516,     o(hw_bWriteCSV),        "bWriteCSV" },	// INT
    {   0,    1, 1028,   o(hw_balErrCount),      "balErrCount" },	// INT
    {   0,   19,   36,     o(hw_balErrMax),        "balErrMax" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirHPWHLINK

struct SFIR sfirDHWHEATER[] =	// fields info for RTDHWHEATER
{
 #define o(m) offsetof(DHWHEATER,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   13,   32,          o(wh_mult),             "mult" },	// FLOAT_GEZ
    {   0,  113,    1,       o(wh_heatSrc),          "heatSrc" },	// WHHEATSRCCH
    {   0,  112,    1,          o(wh_type),             "type" },	// WHTYPECH
    {   0,   23,    1,          o(wh_desc),             "desc" },	// ANAME
    {   0,    1,   32,           o(wh_fcn),              "fcn" },	// INT
    {   0,  115,    1,        o(wh_ashpTy),           "ashpTy" },	// WHASHPTYCH
    {   0,  116,    1,         o(wh_resTy),            "resTy" },	// WHRESTYCH
    {   0,   24,    1,          o(wh_znTi),             "znTi" },	// TI
    {   0,   12, 1024,           o(wh_tEx),              "tEx" },	// FLOAT
    {   0,   24,    1,   o(wh_ashpSrcZnTi),      "ashpSrcZnTi" },	// TI
    {   0,   12, 1024,      o(wh_ashpTSrc),         "ashpTSrc" },	// FLOAT
    {   0,   14,    1,    o(wh_ashpResUse),       "ashpResUse" },	// FLOAT_GZ
    {   0,   14,   32,     o(wh_tankCount),        "tankCount" },	// FLOAT_GZ
    {   0,   14,   32,    o(wh_heatingCap),       "heatingCap" },	// FLOAT_GZ
    {   0,   13,   32,           o(wh_vol),              "vol" },	// FLOAT_GEZ
    {   0,   14,    1,    o(wh_volRunning),       "volRunning" },	// FLOAT_GZ
    {   0,   13,   32,            o(wh_UA),               "UA" },	// FLOAT_GEZ
    {   0,   14,   32,        o(wh_insulR),           "insulR" },	// FLOAT_GZ
    {   0,   17,    1,    o(wh_inHtSupply),       "inHtSupply" },	// FRAC
    {   0,   17,    1,   o(wh_inHtLoopRet),      "inHtLoopRet" },	// FRAC
    {   0,   14,    1,            o(wh_EF),               "EF" },	// FLOAT_GZ
    {   0,   14,    1,          o(wh_LDEF),             "LDEF" },	// FLOAT_GZ
    {   0,   14,    1,           o(wh_UEF),              "UEF" },	// FLOAT_GZ
    {   0,   14,    1,     o(wh_ratedFlow),        "ratedFlow" },	// FLOAT_GZ
    {   0,   13,    1,    o(wh_annualFuel),       "annualFuel" },	// FLOAT_GEZ
    {   0,   13,    1,    o(wh_annualElec),       "annualElec" },	// FLOAT_GEZ
    {   0,   12,   32,   o(wh_cycLossFuel),      "cycLossFuel" },	// FLOAT
    {   0,   12,   32,   o(wh_cycLossElec),      "cycLossElec" },	// FLOAT
    {   0,   12,   32,      o(wh_maxFlowX),         "maxFlowX" },	// FLOAT
    {   0,   12,   32,       o(wh_maxInpX),          "maxInpX" },	// FLOAT
    {   0,   14,    1,           o(wh_eff),              "eff" },	// FLOAT_GZ
    {   0,   13,    1,           o(wh_SBL),              "SBL" },	// FLOAT_GEZ
    {   0,   13,  512,      o(wh_pilotPwr),         "pilotPwr" },	// FLOAT_GEZ
    {   0,   13,  512,       o(wh_parElec),          "parElec" },	// FLOAT_GEZ
    {   0,   12,  512,        o(wh_tHWOut),           "tHWOut" },	// FLOAT
    {   0,    1, 1024,     o(wh_stbyTicks),        "stbyTicks" },	// INT
    {   0,   13,    1,     o(wh_loadCFwdF),        "loadCFwdF" },	// FLOAT_GEZ
    {   0,   19,    1,   o(wh_loadCFwdMax),      "loadCFwdMax" },	// DBL
    {   0,   19, 1024,      o(wh_loadCFwd),         "loadCFwd" },	// DBL
    {   0,   12, 1028, o(wh_nTickFullLoad),    "nTickFullLoad" },	// FLOAT
    {   0,   19, 1024,   o(wh_nColdStarts),      "nColdStarts" },	// DBL
    {   0,   12, 1028,         o(wh_effSh),            "effSh" },	// FLOAT
    {   0,   12,   32,      o(wh_operElec),         "operElec" },	// FLOAT
    {   0,   13,   32,      o(wh_stbyElec),         "stbyElec" },	// FLOAT_GEZ
    {   0,   13,    1,      o(wh_resHtPwr),         "resHtPwr" },	// FLOAT_GEZ
    {   0,   13,    1,     o(wh_resHtPwr2),        "resHtPwr2" },	// FLOAT_GEZ
    {   0,    1, 1060,o(wh_HPWH.hw_HSCount),     "HPWH.HSCount" },	// INT
    {   0,   12, 1028,   o(wh_HPWH.hw_tEx),         "HPWH.tEx" },	// FLOAT
    {   0,   12, 1028,o(wh_HPWH.hw_tASHPSrc),    "HPWH.tASHPSrc" },	// FLOAT
    {   0,   13, 1028,o(wh_HPWH.hw_qTXTick),     "HPWH.qTXTick" },	// FLOAT_GEZ
    {   0,    1, 1060,o(wh_HPWH.hw_nQTXNodes),   "HPWH.nQTXNodes" },	// INT
    {   0,   12, 1540,o(wh_HPWH.hw_fMixUse),     "HPWH.fMixUse" },	// FLOAT
    {   0,   12, 1540,o(wh_HPWH.hw_fMixRL),      "HPWH.fMixRL" },	// FLOAT
    {   0,   19, 1028,o(wh_HPWH.hw_inElec[0]),   "HPWH.inElec[0]" },	// DBL
    {   0,   19, 1028,o(wh_HPWH.hw_inElec[1]),   "HPWH.inElec[1]" },	// DBL
    {   0,   12, 1060,o(wh_HPWH.hw_HPWHxBU),     "HPWH.HPWHxBU" },	// FLOAT
    {   0,   19, 1028,  o(wh_HPWH.hw_qEnv),        "HPWH.qEnv" },	// DBL
    {   0,   19, 1028, o(wh_HPWH.hw_qLoss),       "HPWH.qLoss" },	// DBL
    {   0,   19, 1028,   o(wh_HPWH.hw_qHW),         "HPWH.qHW" },	// DBL
    {   0,   19, 1028,   o(wh_HPWH.hw_qTX),         "HPWH.qTX" },	// DBL
    {   0,    1, 1540,o(wh_HPWH.hw_tankTempSet), "HPWH.tankTempSet" },	// INT
    {   0,   12, 1060,o(wh_HPWH.hw_tankHCNominal),"HPWH.tankHCNominal" },	// FLOAT
    {   0,   19, 1028,o(wh_HPWH.hw_tankHCStart), "HPWH.tankHCStart" },	// DBL
    {   0,   19, 1028,o(wh_HPWH.hw_tHWOutF),     "HPWH.tHWOutF" },	// DBL
    {   0,    1, 1028,o(wh_HPWH.hw_nzDrawCount), "HPWH.nzDrawCount" },	// INT
    {   0,   12, 1540,o(wh_HPWH.hw_tHWOut),      "HPWH.tHWOut" },	// FLOAT
    {   0,    1, 1540,o(wh_HPWH.hw_bWriteCSV),   "HPWH.bWriteCSV" },	// INT
    {   0,    1, 1028,o(wh_HPWH.hw_balErrCount), "HPWH.balErrCount" },	// INT
    {   0,   19, 1060,o(wh_HPWH.hw_balErrMax),   "HPWH.balErrMax" },	// DBL
    {   0,   12, 1028,          o(wh_qXBU),             "qXBU" },	// FLOAT
    {   0,   19, 1028,          o(wh_qEnv),             "qEnv" },	// DBL
    {   0,   19, 1028,         o(wh_qLoss),            "qLoss" },	// DBL
    {   0,   12, 1028,           o(wh_qHW),              "qHW" },	// FLOAT
    {   0,    1, 1028,   o(wh_nzDrawCount),      "nzDrawCount" },	// INT
    {   0,    1,  516,     o(wh_bWriteCSV),        "bWriteCSV" },	// INT
    {   0,   19,  516,       o(wh_totHARL),          "totHARL" },	// DBL
    {   0,    1,  516,       o(wh_hrCount),          "hrCount" },	// INT
    {   0,   19,  516,        o(wh_totOut),           "totOut" },	// DBL
    {   0,   12, 1028,      o(wh_inElecSh),         "inElecSh" },	// FLOAT
    {   0,   12, 1028,    o(wh_inElecBUSh),       "inElecBUSh" },	// FLOAT
    {   0,   12, 1028,   o(wh_inElecXBUSh),      "inElecXBUSh" },	// FLOAT
    {   0,   12, 1028,      o(wh_inFuelSh),         "inFuelSh" },	// FLOAT
    {   0,   12,  516,        o(wh_inElec),           "inElec" },	// FLOAT
    {   0,   12,  516,      o(wh_inElecBU),         "inElecBU" },	// FLOAT
    {   0,   12,  516,     o(wh_inElecXBU),        "inElecXBU" },	// FLOAT
    {   0,   12,  516,        o(wh_inFuel),           "inFuel" },	// FLOAT
    {   0,   19,   36,     o(wh_inElecTot),        "inElecTot" },	// DBL
    {   0,   19,   36,     o(wh_inFuelTot),        "inFuelTot" },	// DBL
    {   0,   24,    1,      o(wh_elecMtri),         "elecMtri" },	// TI
    {   0,   24,    1,      o(wh_fuelMtri),         "fuelMtri" },	// TI
    {   0,  136,    1,     o(wh_xBUEndUse),        "xBUEndUse" },	// ENDUSECH
    {   0,    1,  516,       o(wh_unMetSh),          "unMetSh" },	// INT
    {   0,    1,   36,      o(wh_unMetHrs),         "unMetHrs" },	// INT
    {   0,    1, 1028,   o(wh_balErrCount),      "balErrCount" },	// INT
    {   0,   12,  516,        o(wh_tInlet),           "tInlet" },	// FLOAT
    {   0,   12,  516,          o(wh_draw),             "draw" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWHEATER

struct SFIR sfirDHWHEATREC[] =	// fields info for RTDHWHEATREC
{
 #define o(m) offsetof(DHWHEATREC,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    4,    1,          o(wr_mult),             "mult" },	// SI_GEZ
    {   0,  117,    1,      o(wr_hwEndUse),         "hwEndUse" },	// DHWEUCH
    {   0,  121,    1,          o(wr_type),             "type" },	// DWHRTYCH
    {   0,    4,    1,      o(wr_nFXDrain),         "nFXDrain" },	// SI_GEZ
    {   0,    4,    1,       o(wr_nFXCold),          "nFXCold" },	// SI_GEZ
    {   0,   89,    1,       o(wr_feedsWH),          "feedsWH" },	// NOYESCH
    {   0,   17,  512,      o(wr_effRated),         "effRated" },	// FRAC
    {   0,   13,  512,      o(wr_tdInDiff),         "tdInDiff" },	// FLOAT_GEZ
    {   0,   13,  512,    o(wr_tdInWarmup),       "tdInWarmup" },	// FLOAT_GEZ
    {   0,   12, 1028,           o(wr_eff),              "eff" },	// FLOAT
    {   0,   12, 1028,           o(wr_tpO),              "tpO" },	// FLOAT
    {   0,   12, 1028,            o(wr_vp),               "vp" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWHEATREC

struct SFIR sfirDHWTANK[] =	// fields info for RTDHWTANK
{
 #define o(m) offsetof(DHWTANK,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    3,    1,          o(wt_mult),             "mult" },	// SI
    {   0,   13,    1,            o(wt_UA),               "UA" },	// FLOAT_GEZ
    {   0,   13,    1,           o(wt_vol),              "vol" },	// FLOAT_GEZ
    {   0,   14,    1,        o(wt_insulR),           "insulR" },	// FLOAT_GZ
    {   0,   12,  512,         o(wt_tTank),            "tTank" },	// FLOAT
    {   0,   24,    1,          o(wt_znTi),             "znTi" },	// TI
    {   0,   12,  512,           o(wt_tEx),              "tEx" },	// FLOAT
    {   0,   12,  512,         o(wt_xLoss),            "xLoss" },	// FLOAT
    {   0,   12, 1028,       o(wt_qLossSh),          "qLossSh" },	// FLOAT
    {   0,   12,  516,         o(wt_qLoss),            "qLoss" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWTANK

struct SFIR sfirDHWPUMP[] =	// fields info for RTDHWPUMP
{
 #define o(m) offsetof(DHWPUMP,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    3,    1,          o(wp_mult),             "mult" },	// SI
    {   0,   24,    1,      o(wp_elecMtri),         "elecMtri" },	// TI
    {   0,   13,  512,           o(wp_pwr),              "pwr" },	// FLOAT_GEZ
    {   0,   17,  512,      o(wp_liqHeatF),         "liqHeatF" },	// FRAC
    {   0,   12,  516,        o(wp_inElec),           "inElec" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWPUMP

struct SFIR sfirDHWLOOP[] =	// fields info for RTDHWLOOP
{
 #define o(m) offsetof(DHWLOOP,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    3,    1,          o(wl_mult),             "mult" },	// SI
    {   0,    3,   32,      o(wl_wlpCount),         "wlpCount" },	// SI
    {   0,   13,  512,          o(wl_flow),             "flow" },	// FLOAT_GEZ
    {   0,   13,  512,          o(wl_runF),             "runF" },	// FLOAT_GEZ
    {   0,   14,  512,          o(wl_tIn1),             "tIn1" },	// FLOAT_GZ
    {   0,   14,    1,           o(wl_fUA),              "fUA" },	// FLOAT_GZ
    {   0,   13,  512, o(wl_lossMakeupPwr),    "lossMakeupPwr" },	// FLOAT_GEZ
    {   0,   14,  512, o(wl_lossMakeupEff),    "lossMakeupEff" },	// FLOAT_GZ
    {   0,   24,    1,      o(wl_elecMtri),         "elecMtri" },	// TI
    {   0,   19,   32,o(wl_segTotals.st_count),  "segTotals.count" },	// DBL
    {   0,   19,   32,o(wl_segTotals.st_len),    "segTotals.len" },	// DBL
    {   0,   19,   32,o(wl_segTotals.st_vol),    "segTotals.vol" },	// DBL
    {   0,   19,   32,o(wl_segTotals.st_exArea), "segTotals.exArea" },	// DBL
    {   0,   19,   32,o(wl_segTotals.st_UA),     "segTotals.UA" },	// DBL
    {   0,   19,   32,o(wl_branchTotals.st_count),"branchTotals.count" },	// DBL
    {   0,   19,   32,o(wl_branchTotals.st_len), "branchTotals.len" },	// DBL
    {   0,   19,   32,o(wl_branchTotals.st_vol), "branchTotals.vol" },	// DBL
    {   0,   19,   32,o(wl_branchTotals.st_exArea),"branchTotals.exArea" },	// DBL
    {   0,   19,   32,o(wl_branchTotals.st_UA),  "branchTotals.UA" },	// DBL
    {   0,   12,  516,         o(wl_volRL),            "volRL" },	// FLOAT
    {   0,   12,  516,        o(wl_qLiqLP),           "qLiqLP" },	// FLOAT
    {   0,   12,  516,          o(wl_HRLL),             "HRLL" },	// FLOAT
    {   0,   12,  516,       o(wl_HRLLnet),          "HRLLnet" },	// FLOAT
    {   0,   12,  516,          o(wl_HRBL),             "HRBL" },	// FLOAT
    {   0,   12,  516,         o(wl_t24WL),            "t24WL" },	// FLOAT
    {   0,   12,  516,           o(wl_tRL),              "tRL" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWLOOP

struct SFIR sfirPBC[] =	// fields info for RTPBC
{
 #define o(m) offsetof(PBC,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,   17,  256,        o(sb_absSlr),           "absSlr" },	// FRAC
    {   2,   19,  256,      o(sb_awAbsSlr),         "awAbsSlr" },	// DBL
    {   2,   17,   32,         o(sb_epsLW),            "epsLW" },	// FRAC
    {   2,   24,   32,            o(sb_zi),               "zi" },	// TI
    {   2,   19,   32,             o(sb_F),                "F" },	// DBL
    {   2,   19,   32,            o(sb_Fp),               "Fp" },	// DBL
    {   2,   19,   32,         o(sb_frRad),            "frRad" },	// DBL
    {   2,   19,   32,          o(sb_fSky),             "fSky" },	// DBL
    {   2,   19,   32,          o(sb_fAir),             "fAir" },	// DBL
    {   2,   12, 1028,         o(sb_hcNat),            "hcNat" },	// FLOAT
    {   2,   12, 1028,         o(sb_hcFrc),            "hcFrc" },	// FLOAT
    {   2,   12, 1028,        o(sb_hcMult),           "hcMult" },	// FLOAT
    {   2,   12, 1028,           o(sb_hxa),              "hxa" },	// FLOAT
    {   2,   12, 1028,           o(sb_hxr),              "hxr" },	// FLOAT
    {   2,   12, 1028,         o(sb_hxtot),            "hxtot" },	// FLOAT
    {   2,   19, 1028,          o(sb_uRat),             "uRat" },	// DBL
    {   2,   19, 1028,          o(sb_fRat),             "fRat" },	// DBL
    {   2,   19, 1028,            o(sb_cx),               "cx" },	// DBL
    {   2,   19, 1028,  o(sb_sgTarg.st_bm),        "sgTarg.bm" },	// DBL
    {   2,   19, 1028,  o(sb_sgTarg.st_df),        "sgTarg.df" },	// DBL
    {   2,   19, 1028, o(sb_sgTarg.st_tot),       "sgTarg.tot" },	// DBL
    {   2,   19, 1028,            o(sb_sg),               "sg" },	// DBL
    {   2,   12, 1028,          o(sb_tSrf),             "tSrf" },	// FLOAT
    {   2,   12, 1024,        o(sb_tSrfls),           "tSrfls" },	// FLOAT
    {   2,   19, 1028,         o(sb_qrAbs),            "qrAbs" },	// DBL
    {   2,   12, 1028,           o(sb_txa),              "txa" },	// FLOAT
    {   2,   12, 1028,           o(sb_txr),              "txr" },	// FLOAT
    {   2,   12, 1028,           o(sb_txe),              "txe" },	// FLOAT
    {   2,   19, 1028,             o(sb_w),                "w" },	// DBL
    {   2,   19, 1028,          o(sb_qSrf),             "qSrf" },	// DBL
    {   0,   88,    1,           o(sb_pPS),              "pPS" },	// PIPESEGP
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPBC

struct SFIR sfirPIPERUN[] =	// fields info for RTPIPERUN
{
 #define o(m) offsetof(PIPERUN,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   13,    1,           o(pr_len),              "len" },	// FLOAT_GEZ
    {   0,   14,    1,          o(pr_size),             "size" },	// FLOAT_GZ
    {   0,   14,    1,        o(pr_insulK),           "insulK" },	// FLOAT_GZ
    {   0,   13,    1,      o(pr_insulThk),         "insulThk" },	// FLOAT_GEZ
    {   0,   14,    1,           o(pr_exH),              "exH" },	// FLOAT_GZ
    {   0,   19,   32,o(pr_totals.st_count),            "count" },	// DBL
    {   0,   19,   32, o(pr_totals.st_len),              "len" },	// DBL
    {   0,   19,   32, o(pr_totals.st_vol),              "vol" },	// DBL
    {   0,   19,   32,o(pr_totals.st_exArea),           "exArea" },	// DBL
    {   0,   19,   32,  o(pr_totals.st_UA),               "UA" },	// DBL
    {   0,   12, 1024,          o(pr_beta),             "beta" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPIPERUN

struct SFIR sfirPIPESEG[] =	// fields info for RTPIPESEG
{
 #define o(m) offsetof(PIPESEG,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   13,    1,           o(ps_len),              "len" },	// FLOAT_GEZ
    {   0,   14,    1,          o(ps_size),             "size" },	// FLOAT_GZ
    {   0,   14,    1,        o(ps_insulK),           "insulK" },	// FLOAT_GZ
    {   0,   13,    1,      o(ps_insulThk),         "insulThk" },	// FLOAT_GEZ
    {   0,   14,    1,           o(ps_exH),              "exH" },	// FLOAT_GZ
    {   2,   17, 1280,o(ps_sbcO.sb_absSlr),           "absSlr" },	// FRAC
    {   2,   19, 1280,o(ps_sbcO.sb_awAbsSlr),         "awAbsSlr" },	// DBL
    {   2,   17, 1056, o(ps_sbcO.sb_epsLW),            "epsLW" },	// FRAC
    {   2,   24, 1056,    o(ps_sbcO.sb_zi),               "zi" },	// TI
    {   2,   19, 1056,     o(ps_sbcO.sb_F),                "F" },	// DBL
    {   2,   19, 1056,    o(ps_sbcO.sb_Fp),               "Fp" },	// DBL
    {   2,   19, 1056, o(ps_sbcO.sb_frRad),            "frRad" },	// DBL
    {   2,   19, 1056,  o(ps_sbcO.sb_fSky),             "fSky" },	// DBL
    {   2,   19, 1056,  o(ps_sbcO.sb_fAir),             "fAir" },	// DBL
    {   2,   12, 1028, o(ps_sbcO.sb_hcNat),            "hcNat" },	// FLOAT
    {   2,   12, 1028, o(ps_sbcO.sb_hcFrc),            "hcFrc" },	// FLOAT
    {   2,   12, 1028,o(ps_sbcO.sb_hcMult),           "hcMult" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_hxa),              "hxa" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_hxr),              "hxr" },	// FLOAT
    {   2,   12, 1028, o(ps_sbcO.sb_hxtot),            "hxtot" },	// FLOAT
    {   2,   19, 1028,  o(ps_sbcO.sb_uRat),             "uRat" },	// DBL
    {   2,   19, 1028,  o(ps_sbcO.sb_fRat),             "fRat" },	// DBL
    {   2,   19, 1028,    o(ps_sbcO.sb_cx),               "cx" },	// DBL
    {   2,   19, 1028,o(ps_sbcO.sb_sgTarg.st_bm),        "sgTarg.bm" },	// DBL
    {   2,   19, 1028,o(ps_sbcO.sb_sgTarg.st_df),        "sgTarg.df" },	// DBL
    {   2,   19, 1028,o(ps_sbcO.sb_sgTarg.st_tot),       "sgTarg.tot" },	// DBL
    {   2,   19, 1028,    o(ps_sbcO.sb_sg),               "sg" },	// DBL
    {   2,   12, 1028,  o(ps_sbcO.sb_tSrf),             "tSrf" },	// FLOAT
    {   2,   12, 1024,o(ps_sbcO.sb_tSrfls),           "tSrfls" },	// FLOAT
    {   2,   19, 1028, o(ps_sbcO.sb_qrAbs),            "qrAbs" },	// DBL
    {   2,   12, 1028,   o(ps_sbcO.sb_txa),              "txa" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_txr),              "txr" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_txe),              "txe" },	// FLOAT
    {   2,   19, 1028,     o(ps_sbcO.sb_w),                "w" },	// DBL
    {   2,   19, 1028,  o(ps_sbcO.sb_qSrf),             "qSrf" },	// DBL
    {   0,   88, 1025,   o(ps_sbcO.sb_pPS),              "pPS" },	// PIPESEGP
    {   0,  100,    1,         o(ps_exCnd),            "exCnd" },	// EXCNDCH
    {   0,   12,  512,           o(ps_exT),              "exT" },	// FLOAT
    {   0,   19,   32,o(ps_totals.st_count),     "totals.count" },	// DBL
    {   0,   19,   32, o(ps_totals.st_len),       "totals.len" },	// DBL
    {   0,   19,   32, o(ps_totals.st_vol),       "totals.vol" },	// DBL
    {   0,   19,   32,o(ps_totals.st_exArea),    "totals.exArea" },	// DBL
    {   0,   19,   32,  o(ps_totals.st_UA),        "totals.UA" },	// DBL
    {   0,   14,   32,       o(ps_fRhoCpX),          "fRhoCpX" },	// FLOAT_GZ
    {   0,   12,  516,           o(ps_fvf),              "fvf" },	// FLOAT
    {   0,   12,  516,           o(ps_tIn),              "tIn" },	// FLOAT
    {   0,   12,  516,          o(ps_tOut),             "tOut" },	// FLOAT
    {   0,   12,  516,          o(ps_PLWF),             "PLWF" },	// FLOAT
    {   0,   12,  516,          o(ps_PLCD),             "PLCD" },	// FLOAT
    {   0,   12,  516,            o(ps_PL),               "PL" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPIPESEG

struct SFIR sfirDHWLOOPSEG[] =	// fields info for RTDHWLOOPSEG
{
 #define o(m) offsetof(DHWLOOPSEG,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,   23,    0,             o(name),             "name" },	// ANAME
    {   3,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   2,   13,    1,           o(ps_len),              "len" },	// FLOAT_GEZ
    {   2,   14,    1,          o(ps_size),             "size" },	// FLOAT_GZ
    {   2,   14,    1,        o(ps_insulK),           "insulK" },	// FLOAT_GZ
    {   2,   13,    1,      o(ps_insulThk),         "insulThk" },	// FLOAT_GEZ
    {   2,   14,    1,           o(ps_exH),              "exH" },	// FLOAT_GZ
    {   2,   17, 1280,o(ps_sbcO.sb_absSlr),           "absSlr" },	// FRAC
    {   2,   19, 1280,o(ps_sbcO.sb_awAbsSlr),         "awAbsSlr" },	// DBL
    {   2,   17, 1056, o(ps_sbcO.sb_epsLW),            "epsLW" },	// FRAC
    {   2,   24, 1056,    o(ps_sbcO.sb_zi),               "zi" },	// TI
    {   2,   19, 1056,     o(ps_sbcO.sb_F),                "F" },	// DBL
    {   2,   19, 1056,    o(ps_sbcO.sb_Fp),               "Fp" },	// DBL
    {   2,   19, 1056, o(ps_sbcO.sb_frRad),            "frRad" },	// DBL
    {   2,   19, 1056,  o(ps_sbcO.sb_fSky),             "fSky" },	// DBL
    {   2,   19, 1056,  o(ps_sbcO.sb_fAir),             "fAir" },	// DBL
    {   2,   12, 1028, o(ps_sbcO.sb_hcNat),            "hcNat" },	// FLOAT
    {   2,   12, 1028, o(ps_sbcO.sb_hcFrc),            "hcFrc" },	// FLOAT
    {   2,   12, 1028,o(ps_sbcO.sb_hcMult),           "hcMult" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_hxa),              "hxa" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_hxr),              "hxr" },	// FLOAT
    {   2,   12, 1028, o(ps_sbcO.sb_hxtot),            "hxtot" },	// FLOAT
    {   2,   19, 1028,  o(ps_sbcO.sb_uRat),             "uRat" },	// DBL
    {   2,   19, 1028,  o(ps_sbcO.sb_fRat),             "fRat" },	// DBL
    {   2,   19, 1028,    o(ps_sbcO.sb_cx),               "cx" },	// DBL
    {   2,   19, 1028,o(ps_sbcO.sb_sgTarg.st_bm),        "sgTarg.bm" },	// DBL
    {   2,   19, 1028,o(ps_sbcO.sb_sgTarg.st_df),        "sgTarg.df" },	// DBL
    {   2,   19, 1028,o(ps_sbcO.sb_sgTarg.st_tot),       "sgTarg.tot" },	// DBL
    {   2,   19, 1028,    o(ps_sbcO.sb_sg),               "sg" },	// DBL
    {   2,   12, 1028,  o(ps_sbcO.sb_tSrf),             "tSrf" },	// FLOAT
    {   2,   12, 1024,o(ps_sbcO.sb_tSrfls),           "tSrfls" },	// FLOAT
    {   2,   19, 1028, o(ps_sbcO.sb_qrAbs),            "qrAbs" },	// DBL
    {   2,   12, 1028,   o(ps_sbcO.sb_txa),              "txa" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_txr),              "txr" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_txe),              "txe" },	// FLOAT
    {   2,   19, 1028,     o(ps_sbcO.sb_w),                "w" },	// DBL
    {   2,   19, 1028,  o(ps_sbcO.sb_qSrf),             "qSrf" },	// DBL
    {   2,   88, 1025,   o(ps_sbcO.sb_pPS),              "pPS" },	// PIPESEGP
    {   2,  100,    1,         o(ps_exCnd),            "exCnd" },	// EXCNDCH
    {   2,   12,  512,           o(ps_exT),              "exT" },	// FLOAT
    {   2,   19,   32,o(ps_totals.st_count),     "totals.count" },	// DBL
    {   2,   19,   32, o(ps_totals.st_len),       "totals.len" },	// DBL
    {   2,   19,   32, o(ps_totals.st_vol),       "totals.vol" },	// DBL
    {   2,   19,   32,o(ps_totals.st_exArea),    "totals.exArea" },	// DBL
    {   2,   19,   32,  o(ps_totals.st_UA),        "totals.UA" },	// DBL
    {   2,   14,   32,       o(ps_fRhoCpX),          "fRhoCpX" },	// FLOAT_GZ
    {   2,   12,  516,           o(ps_fvf),              "fvf" },	// FLOAT
    {   2,   12,  516,           o(ps_tIn),              "tIn" },	// FLOAT
    {   2,   12,  516,          o(ps_tOut),             "tOut" },	// FLOAT
    {   2,   12,  516,          o(ps_PLWF),             "PLWF" },	// FLOAT
    {   2,   12,  516,          o(ps_PLCD),             "PLCD" },	// FLOAT
    {   2,   12,  516,            o(ps_PL),               "PL" },	// FLOAT
    {   0,  120,    1,            o(wg_ty),               "ty" },	// DHWLSEGTYCH
    {   0,   12,   32,       o(wg_wbCount),          "wbCount" },	// FLOAT
    {   0,   12,  512,       o(wg_fNoDraw),          "fNoDraw" },	// FLOAT
    {   0,   12,  516,            o(wg_LL),               "LL" },	// FLOAT
    {   0,   12,  516,            o(wg_BL),               "BL" },	// FLOAT
    {   0,   12,  516,         o(wg_t24WL),            "t24WL" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWLOOPSEG

struct SFIR sfirDHWLOOPBRANCH[] =	// fields info for RTDHWLOOPBRANCH
{
 #define o(m) offsetof(DHWLOOPBRANCH,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,   23,    0,             o(name),             "name" },	// ANAME
    {   3,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   2,   13,    1,           o(ps_len),              "len" },	// FLOAT_GEZ
    {   2,   14,    1,          o(ps_size),             "size" },	// FLOAT_GZ
    {   2,   14,    1,        o(ps_insulK),           "insulK" },	// FLOAT_GZ
    {   2,   13,    1,      o(ps_insulThk),         "insulThk" },	// FLOAT_GEZ
    {   2,   14,    1,           o(ps_exH),              "exH" },	// FLOAT_GZ
    {   2,   17, 1280,o(ps_sbcO.sb_absSlr),           "absSlr" },	// FRAC
    {   2,   19, 1280,o(ps_sbcO.sb_awAbsSlr),         "awAbsSlr" },	// DBL
    {   2,   17, 1056, o(ps_sbcO.sb_epsLW),            "epsLW" },	// FRAC
    {   2,   24, 1056,    o(ps_sbcO.sb_zi),               "zi" },	// TI
    {   2,   19, 1056,     o(ps_sbcO.sb_F),                "F" },	// DBL
    {   2,   19, 1056,    o(ps_sbcO.sb_Fp),               "Fp" },	// DBL
    {   2,   19, 1056, o(ps_sbcO.sb_frRad),            "frRad" },	// DBL
    {   2,   19, 1056,  o(ps_sbcO.sb_fSky),             "fSky" },	// DBL
    {   2,   19, 1056,  o(ps_sbcO.sb_fAir),             "fAir" },	// DBL
    {   2,   12, 1028, o(ps_sbcO.sb_hcNat),            "hcNat" },	// FLOAT
    {   2,   12, 1028, o(ps_sbcO.sb_hcFrc),            "hcFrc" },	// FLOAT
    {   2,   12, 1028,o(ps_sbcO.sb_hcMult),           "hcMult" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_hxa),              "hxa" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_hxr),              "hxr" },	// FLOAT
    {   2,   12, 1028, o(ps_sbcO.sb_hxtot),            "hxtot" },	// FLOAT
    {   2,   19, 1028,  o(ps_sbcO.sb_uRat),             "uRat" },	// DBL
    {   2,   19, 1028,  o(ps_sbcO.sb_fRat),             "fRat" },	// DBL
    {   2,   19, 1028,    o(ps_sbcO.sb_cx),               "cx" },	// DBL
    {   2,   19, 1028,o(ps_sbcO.sb_sgTarg.st_bm),        "sgTarg.bm" },	// DBL
    {   2,   19, 1028,o(ps_sbcO.sb_sgTarg.st_df),        "sgTarg.df" },	// DBL
    {   2,   19, 1028,o(ps_sbcO.sb_sgTarg.st_tot),       "sgTarg.tot" },	// DBL
    {   2,   19, 1028,    o(ps_sbcO.sb_sg),               "sg" },	// DBL
    {   2,   12, 1028,  o(ps_sbcO.sb_tSrf),             "tSrf" },	// FLOAT
    {   2,   12, 1024,o(ps_sbcO.sb_tSrfls),           "tSrfls" },	// FLOAT
    {   2,   19, 1028, o(ps_sbcO.sb_qrAbs),            "qrAbs" },	// DBL
    {   2,   12, 1028,   o(ps_sbcO.sb_txa),              "txa" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_txr),              "txr" },	// FLOAT
    {   2,   12, 1028,   o(ps_sbcO.sb_txe),              "txe" },	// FLOAT
    {   2,   19, 1028,     o(ps_sbcO.sb_w),                "w" },	// DBL
    {   2,   19, 1028,  o(ps_sbcO.sb_qSrf),             "qSrf" },	// DBL
    {   2,   88, 1025,   o(ps_sbcO.sb_pPS),              "pPS" },	// PIPESEGP
    {   2,  100,    1,         o(ps_exCnd),            "exCnd" },	// EXCNDCH
    {   2,   12,  512,           o(ps_exT),              "exT" },	// FLOAT
    {   2,   19,   32,o(ps_totals.st_count),     "totals.count" },	// DBL
    {   2,   19,   32, o(ps_totals.st_len),       "totals.len" },	// DBL
    {   2,   19,   32, o(ps_totals.st_vol),       "totals.vol" },	// DBL
    {   2,   19,   32,o(ps_totals.st_exArea),    "totals.exArea" },	// DBL
    {   2,   19,   32,  o(ps_totals.st_UA),        "totals.UA" },	// DBL
    {   2,   14,   32,       o(ps_fRhoCpX),          "fRhoCpX" },	// FLOAT_GZ
    {   2,   12,  516,           o(ps_fvf),              "fvf" },	// FLOAT
    {   2,   12,  516,           o(ps_tIn),              "tIn" },	// FLOAT
    {   2,   12,  516,          o(ps_tOut),             "tOut" },	// FLOAT
    {   2,   12,  516,          o(ps_PLWF),             "PLWF" },	// FLOAT
    {   2,   12,  516,          o(ps_PLCD),             "PLCD" },	// FLOAT
    {   2,   12,  516,            o(ps_PL),               "PL" },	// FLOAT
    {   0,   12,    1,          o(wb_mult),             "mult" },	// FLOAT
    {   0,   13,    1,           o(wb_fUA),              "fUA" },	// FLOAT_GEZ
    {   0,   13,  512,        o(wb_fWaste),           "fWaste" },	// FLOAT_GEZ
    {   0,   13,  512,          o(wb_flow),             "flow" },	// FLOAT_GEZ
    {   0,   12,  516,          o(wb_HBUL),             "HBUL" },	// FLOAT
    {   0,   12,  516,          o(wb_HBWL),             "HBWL" },	// FLOAT
    {   0,   12,  516,         o(wb_t24WL),            "t24WL" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWLOOPBRANCH

struct SFIR sfirDHWLOOPPUMP[] =	// fields info for RTDHWLOOPPUMP
{
 #define o(m) offsetof(DHWLOOPPUMP,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,   23,    0,             o(name),             "name" },	// ANAME
    {   3,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   2,    3,    1,          o(wp_mult),             "mult" },	// SI
    {   2,   24,    1,      o(wp_elecMtri),         "elecMtri" },	// TI
    {   2,   13,  512,           o(wp_pwr),              "pwr" },	// FLOAT_GEZ
    {   2,   17,  512,      o(wp_liqHeatF),         "liqHeatF" },	// FRAC
    {   2,   12,  516,        o(wp_inElec),           "inElec" },	// FLOAT
    {   1,    3,    1,        o(wlp_dummy),            "dummy" },	// SI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWLOOPPUMP

struct SFIR sfirDHWDAYUSE[] =	// fields info for RTDHWDAYUSE
{
 #define o(m) offsetof(DHWDAYUSE,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   13,  512,         o(wdu_mult),             "mult" },	// FLOAT_GEZ
    {   0,    3,   32,      o(wdu_wuSsBeg),          "wuSsBeg" },	// SI
    {   0,    3,   32,      o(wdu_wuSsEnd),          "wuSsEnd" },	// SI
    {   0,    1,   32,      o(wdu_wuCount),          "wuCount" },	// INT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWDAYUSE

struct SFIR sfirDHWUSE[] =	// fields info for RTDHWUSE
{
 #define o(m) offsetof(DHWUSE,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  117,    1,      o(wu_hwEndUse),         "hwEndUse" },	// DHWEUCH
    {   0,    4,    1,       o(wu_eventID),          "eventID" },	// SI_GEZ
    {   0,   13,  512,         o(wu_start),            "start" },	// FLOAT_GEZ
    {   0,   13,  512,           o(wu_dur),              "dur" },	// FLOAT_GEZ
    {   0,   13,  512,          o(wu_flow),             "flow" },	// FLOAT_GEZ
    {   0,   17,  512,          o(wu_hotF),             "hotF" },	// FRAC
    {   0,   14,  512,          o(wu_temp),             "temp" },	// FLOAT_GZ
    {   0,   13,  512,     o(wu_heatRecEF),        "heatRecEF" },	// FLOAT_GEZ
    {   0,    1,   32,      o(wu_drawSeqN),         "drawSeqN" },	// INT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWUSE

struct SFIR sfirDHWSOLARSYS[] =	// fields info for RTDHWSOLARSYS
{
 #define o(m) offsetof(DHWSOLARSYS,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,    1,      o(sw_elecMtri),         "elecMtri" },	// TI
    {   0,  136,    1,        o(sw_endUse),           "endUse" },	// ENDUSECH
    {   0,   13,  512,       o(sw_parElec),          "parElec" },	// FLOAT_GEZ
    {   0,    1,   32,       o(sw_wsCount),          "wsCount" },	// INT
    {   0,   12,   32,     o(sw_scAreaTot),        "scAreaTot" },	// FLOAT
    {   0,   12,   32,       o(sw_scCount),          "scCount" },	// FLOAT
    {   0,    1, 1060,o(sw_tank.hw_HSCount),     "tank.HSCount" },	// INT
    {   0,   12, 1028,   o(sw_tank.hw_tEx),         "tank.tEx" },	// FLOAT
    {   0,   12, 1028,o(sw_tank.hw_tASHPSrc),    "tank.tASHPSrc" },	// FLOAT
    {   0,   13, 1028,o(sw_tank.hw_qTXTick),     "tank.qTXTick" },	// FLOAT_GEZ
    {   0,    1, 1060,o(sw_tank.hw_nQTXNodes),   "tank.nQTXNodes" },	// INT
    {   0,   12, 1540,o(sw_tank.hw_fMixUse),     "tank.fMixUse" },	// FLOAT
    {   0,   12, 1540,o(sw_tank.hw_fMixRL),      "tank.fMixRL" },	// FLOAT
    {   0,   19, 1028,o(sw_tank.hw_inElec[0]),   "tank.inElec[0]" },	// DBL
    {   0,   19, 1028,o(sw_tank.hw_inElec[1]),   "tank.inElec[1]" },	// DBL
    {   0,   12, 1060,o(sw_tank.hw_HPWHxBU),     "tank.HPWHxBU" },	// FLOAT
    {   0,   19, 1028,  o(sw_tank.hw_qEnv),        "tank.qEnv" },	// DBL
    {   0,   19, 1028, o(sw_tank.hw_qLoss),       "tank.qLoss" },	// DBL
    {   0,   19, 1028,   o(sw_tank.hw_qHW),         "tank.qHW" },	// DBL
    {   0,   19, 1028,   o(sw_tank.hw_qTX),         "tank.qTX" },	// DBL
    {   0,    1, 1540,o(sw_tank.hw_tankTempSet), "tank.tankTempSet" },	// INT
    {   0,   12, 1060,o(sw_tank.hw_tankHCNominal),"tank.tankHCNominal" },	// FLOAT
    {   0,   19, 1028,o(sw_tank.hw_tankHCStart), "tank.tankHCStart" },	// DBL
    {   0,   19, 1028,o(sw_tank.hw_tHWOutF),     "tank.tHWOutF" },	// DBL
    {   0,    1, 1028,o(sw_tank.hw_nzDrawCount), "tank.nzDrawCount" },	// INT
    {   0,   12, 1540,o(sw_tank.hw_tHWOut),      "tank.tHWOut" },	// FLOAT
    {   0,    1, 1540,o(sw_tank.hw_bWriteCSV),   "tank.bWriteCSV" },	// INT
    {   0,    1, 1028,o(sw_tank.hw_balErrCount), "tank.balErrCount" },	// INT
    {   0,   19, 1060,o(sw_tank.hw_balErrMax),   "tank.balErrMax" },	// DBL
    {   0,   14,   32,       o(sw_tankVol),          "tankVol" },	// FLOAT_GZ
    {   0,   13,   32,        o(sw_tankUA),           "tankUA" },	// FLOAT_GEZ
    {   0,   14,   32,    o(sw_tankInsulR),       "tankInsulR" },	// FLOAT_GZ
    {   0,   24,    1,      o(sw_tankZnTi),         "tankZnTi" },	// TI
    {   0,   12,  512,       o(sw_tankTEx),          "tankTEx" },	// FLOAT
    {   0,   12,  516,      o(sw_tankTAvg),         "tankTAvg" },	// FLOAT
    {   0,   12,  516,     o(sw_tankQLoss),        "tankQLoss" },	// FLOAT
    {   0,   17,  512,     o(sw_tankHXEff),        "tankHXEff" },	// FRAC
    {   0,   14,    1,  o(sw_tankTHxLimit),     "tankTHxLimit" },	// FLOAT_GZ
    {   0,    1,  516,o(sw_overHeatTkCount),  "overHeatTkCount" },	// INT
    {   0,   12, 1028,       o(sw_tickVol),          "tickVol" },	// FLOAT
    {   0,   12, 1028,      o(sw_tickVolT),         "tickVolT" },	// FLOAT
    {   0,   12, 1028,o(sw_tickTankTOutlet),  "tickTankTOutlet" },	// FLOAT
    {   0,   12,  516,       o(sw_drawVol),          "drawVol" },	// FLOAT
    {   0,   12,  516,     o(sw_tankQGain),        "tankQGain" },	// FLOAT
    {   0,   19,   36,  o(sw_tankQGainTot),     "tankQGainTot" },	// DBL
    {   0,   12,  516,    o(sw_tankTInlet),       "tankTInlet" },	// FLOAT
    {   0,   12,  516,   o(sw_tankTOutlet),      "tankTOutlet" },	// FLOAT
    {   0,   12,  516,       o(sw_tankTHx),          "tankTHx" },	// FLOAT
    {   0,   12,  516,        o(sw_totOut),           "totOut" },	// FLOAT
    {   0,   14,    1,   o(sw_scFluidSpHt),      "scFluidSpHt" },	// FLOAT_GZ
    {   0,   14,    1,   o(sw_scFluidDens),      "scFluidDens" },	// FLOAT_GZ
    {   0,   14,   32,    o(sw_scFluidVHC),       "scFluidVHC" },	// FLOAT_GZ
    {   0,   12,  516,      o(sw_scTInlet),         "scTInlet" },	// FLOAT
    {   0,   12,  516,     o(sw_scTOutlet),        "scTOutlet" },	// FLOAT
    {   0,    3,   36,o(sw_overHeatHrCount),  "overHeatHrCount" },	// SI
    {   0,   12,   36,     o(sw_SSFAnnual),        "SSFAnnual" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWSOLARSYS

struct SFIR sfirDHWSOLARCOLLECTOR[] =	// fields info for RTDHWSOLARCOLLECTOR
{
 #define o(m) offsetof(DHWSOLARCOLLECTOR,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   14,    1,          o(sc_mult),             "mult" },	// FLOAT_GZ
    {   0,   14,   36,        o(sc_multLR),           "multLR" },	// FLOAT_GZ
    {   0,   14,    1,          o(sc_area),             "area" },	// FLOAT_GZ
    {   0,   40,    1,          o(sc_tilt),             "tilt" },	// ANGLE
    {   0,   40,    1,           o(sc_azm),              "azm" },	// ANGLE
    {   0,   12,    1,      o(sc_testFRUL),         "testFRUL" },	// FLOAT
    {   0,   14,    1,      o(sc_testFRTA),         "testFRTA" },	// FLOAT_GZ
    {   0,   14,    1,  o(sc_testMassFlow),     "testMassFlow" },	// FLOAT_GZ
    {   0,   14,    1,   o(sc_oprMassFlow),      "oprMassFlow" },	// FLOAT_GZ
    {   0,   12,    1,         o(sc_kta60),            "kta60" },	// FLOAT
    {   0,   13,   33, o(sc_piping.pr_len),       "piping.len" },	// FLOAT_GEZ
    {   0,   14,   33,o(sc_piping.pr_size),      "piping.size" },	// FLOAT_GZ
    {   0,   14,   33,o(sc_piping.pr_insulK),    "piping.insulK" },	// FLOAT_GZ
    {   0,   13,   33,o(sc_piping.pr_insulThk),  "piping.insulThk" },	// FLOAT_GEZ
    {   0,   14,   33, o(sc_piping.pr_exH),       "piping.exH" },	// FLOAT_GZ
    {   0,   19,   32,o(sc_piping.pr_totals.st_count),     "piping.count" },	// DBL
    {   0,   19,   32,o(sc_piping.pr_totals.st_len),       "piping.len" },	// DBL
    {   0,   19,   32,o(sc_piping.pr_totals.st_vol),       "piping.vol" },	// DBL
    {   0,   19,   32,o(sc_piping.pr_totals.st_exArea),    "piping.exArea" },	// DBL
    {   0,   19,   32,o(sc_piping.pr_totals.st_UA),        "piping.UA" },	// DBL
    {   0,   12, 1056,o(sc_piping.pr_beta),      "piping.beta" },	// FLOAT
    {   0,   12,  516,     o(sc_pipingTEx),        "pipingTEx" },	// FLOAT
    {   0,   14,   32,       o(sc_areaTot),          "areaTot" },	// FLOAT_GZ
    {   0,   12,   32,o(sc_flowCorrection),   "flowCorrection" },	// FLOAT
    {   0,   12,   32,       o(sc_oprFRUL),          "oprFRUL" },	// FLOAT
    {   0,   14,   32,       o(sc_oprFRTA),          "oprFRTA" },	// FLOAT_GZ
    {   0,   12,   32,        o(sc_oprMCp),           "oprMCp" },	// FLOAT
    {   0,   12,   32,    o(sc_oprVolFlow),       "oprVolFlow" },	// FLOAT
    {   0,   12,   32,            o(sc_b0),               "b0" },	// FLOAT
    {   0,   12,   32,         o(sc_ktaDS),            "ktaDS" },	// FLOAT
    {   0,   12,   32,         o(sc_ktaDG),            "ktaDG" },	// FLOAT
    {   0,   12,  516,          o(sc_incA),             "incA" },	// FLOAT
    {   0,   12,  516,         o(sc_ktaDB),            "ktaDB" },	// FLOAT
    {   0,   12,  516,      o(sc_poaRadDB),         "poaRadDB" },	// FLOAT
    {   0,   12,  516,      o(sc_poaRadDS),         "poaRadDS" },	// FLOAT
    {   0,   12,  516,      o(sc_poaRadDG),         "poaRadDG" },	// FLOAT
    {   0,   12,  516,     o(sc_poaRadTot),        "poaRadTot" },	// FLOAT
    {   0,   12,  516,     o(sc_poaRadIAM),        "poaRadIAM" },	// FLOAT
    {   0,   13,   32,       o(sc_pumpPwr),          "pumpPwr" },	// FLOAT_GEZ
    {   0,   12,   32,     o(sc_tickPumpQ),        "tickPumpQ" },	// FLOAT
    {   0,   17,   32,  o(sc_pumpLiqHeatF),     "pumpLiqHeatF" },	// FRAC
    {   0,   12,   32,        o(sc_pumpDT),           "pumpDT" },	// FLOAT
    {   0,   12,   32,  o(sc_pumpOnDeltaT),     "pumpOnDeltaT" },	// FLOAT
    {   0,   12,   32, o(sc_pumpOffDeltaT),    "pumpOffDeltaT" },	// FLOAT
    {   0,   12,  516,      o(sc_tOutletM),         "tOutletM" },	// FLOAT
    {   0,   12,  516,      o(sc_tOutletB),         "tOutletB" },	// FLOAT
    {   0,   12,  516,          o(sc_effM),             "effM" },	// FLOAT
    {   0,   12,  516,          o(sc_effB),             "effB" },	// FLOAT
    {   0,   12, 1028,        o(sc_tInlet),           "tInlet" },	// FLOAT
    {   0,   17,  516,           o(sc_eff),              "eff" },	// FRAC
    {   0,   12, 1028,    o(sc_tickQFluid),       "tickQFluid" },	// FLOAT
    {   0,   12,  516,      o(sc_hrQFluid),         "hrQFluid" },	// FLOAT
    {   0,   19,   36,     o(sc_totQFluid),        "totQFluid" },	// DBL
    {   0,   12,  516,      o(sc_tOutletP),         "tOutletP" },	// FLOAT
    {   0,   12,  516,       o(sc_tOutlet),          "tOutlet" },	// FLOAT
    {   0,   12, 1028,       o(sc_tickVol),          "tickVol" },	// FLOAT
    {   0,    1, 1028,        o(sc_tickOp),           "tickOp" },	// INT
    {   0,   12,  516,    o(sc_pumpInElec),       "pumpInElec" },	// FLOAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirDHWSOLARCOLLECTOR

struct SFIR sfirPVARRAY[] =	// fields info for RTPVARRAY
{
 #define o(m) offsetof(PVARRAY,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  125,    1, o(pv_g.gx_mounting),         "mounting" },	// MOUNTCH
    {   0,    1,    1,    o(pv_g.gx_pnIdx),            "pnIdx" },	// INT
    {   0,   19,    1,     o(pv_g.gx_area),             "area" },	// DBL
    {   0,   12,  517,    o(pv_g.gx_fBeam),            "fBeam" },	// FLOAT
    {   0,    1,  517,o(pv_g.gx_fBeamErrCount),    "fBeamErrCount" },	// INT
    {   0,   12,    1,o(pv_g.gx_vrtInp[0]),        "vrtInp[0]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[1]),        "vrtInp[1]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[2]),        "vrtInp[2]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[3]),        "vrtInp[3]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[4]),        "vrtInp[4]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[5]),        "vrtInp[5]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[6]),        "vrtInp[6]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[7]),        "vrtInp[7]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[8]),        "vrtInp[8]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[9]),        "vrtInp[9]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[10]),       "vrtInp[10]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[11]),       "vrtInp[11]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[12]),       "vrtInp[12]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[13]),       "vrtInp[13]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[14]),       "vrtInp[14]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[15]),       "vrtInp[15]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[16]),       "vrtInp[16]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[17]),       "vrtInp[17]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[18]),       "vrtInp[18]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[19]),       "vrtInp[19]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[20]),       "vrtInp[20]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[21]),       "vrtInp[21]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[22]),       "vrtInp[22]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[23]),       "vrtInp[23]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[24]),       "vrtInp[24]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[25]),       "vrtInp[25]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[26]),       "vrtInp[26]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[27]),       "vrtInp[27]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[28]),       "vrtInp[28]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[29]),       "vrtInp[29]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[30]),       "vrtInp[30]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[31]),       "vrtInp[31]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[32]),       "vrtInp[32]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[33]),       "vrtInp[33]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[34]),       "vrtInp[34]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[35]),       "vrtInp[35]" },	// FLOAT
    {   0,   12,    1,o(pv_g.gx_vrtInp[36]),       "vrtInp[36]" },	// FLOAT
    {   0,   24,    1,      o(pv_elecMtri),         "elecMtri" },	// TI
    {   0,  136,    1,        o(pv_endUse),           "endUse" },	// ENDUSECH
    {   0,   13,    1,         o(pv_dcCap),            "dcCap" },	// FLOAT_GEZ
    {   0,  123,    1,    o(pv_moduleType),       "moduleType" },	// PVMODCH
    {   0,   12,    1,     o(pv_tempCoeff),        "tempCoeff" },	// FLOAT
    {   0,   15,    1,    o(pv_covRefrInd),       "covRefrInd" },	// FLOAT_GE1
    {   0,  124,    1,     o(pv_arrayType),        "arrayType" },	// PVARRCH
    {   0,   40,  512,          o(pv_tilt),             "tilt" },	// ANGLE
    {   0,   40,  512,           o(pv_azm),              "azm" },	// ANGLE
    {   0,   17,  512,      o(pv_grndRefl),         "grndRefl" },	// FRAC
    {   0,   17,    1,           o(pv_gcr),              "gcr" },	// FRAC
    {   0,   14,    1,       o(pv_dcacRat),          "dcacRat" },	// FLOAT_GZ
    {   0,   15,  512,           o(pv_sif),              "sif" },	// FLOAT_GE1
    {   0,   17,    1,        o(pv_invEff),           "invEff" },	// FRAC
    {   0,   17,  512,       o(pv_sysLoss),          "sysLoss" },	// FRAC
    {   0,   12,  516,         o(pv_tCell),            "tCell" },	// FLOAT
    {   0,   12,  516,           o(pv_aoi),              "aoi" },	// FLOAT
    {   0,   40,  516,     o(pv_panelTilt),        "panelTilt" },	// ANGLE
    {   0,   40,  516,      o(pv_panelAzm),         "panelAzm" },	// ANGLE
    {   0,   40,  516,      o(pv_panelRot),         "panelRot" },	// ANGLE
    {   0,   12,  516,           o(pv_poa),              "poa" },	// FLOAT
    {   0,   12,  516,       o(pv_poaBeam),          "poaBeam" },	// FLOAT
    {   0,   12,  516,      o(pv_radIBeam),         "radIBeam" },	// FLOAT
    {   0,   12,  516,   o(pv_radIBeamEff),      "radIBeamEff" },	// FLOAT
    {   0,   12,  516,          o(pv_radI),             "radI" },	// FLOAT
    {   0,   12,  516,       o(pv_radIEff),          "radIEff" },	// FLOAT
    {   0,   12,  516,      o(pv_radTrans),         "radTrans" },	// FLOAT
    {   0,   12,  516,         o(pv_dcOut),            "dcOut" },	// FLOAT
    {   0,   12,  516,         o(pv_acOut),            "acOut" },	// FLOAT
    {   0,   17,   32,       o(pv_tauNorm),          "tauNorm" },	// FRAC
    {   0,   42,   32,         o(pv_inoct),            "inoct" },	// TEMP
    {   0,   12,   32,     o(pv_convRatio),        "convRatio" },	// FLOAT
    {   0,   12,   32,    o(pv_tGrndRatio),       "tGrndRatio" },	// FLOAT
    {   1,   13,   32,      o(pv_thermCap),         "thermCap" },	// FLOAT_GEZ
    {   0,   12,  516,        o(pv_radILs),           "radILs" },	// FLOAT
    {   0,   12,  516,       o(pv_tCellLs),          "tCellLs" },	// FLOAT
    {   1,    3,   32,        o(pv_modMap),           "modMap" },	// SI
    {   1,    3,   32,        o(pv_arrMap),           "arrMap" },	// SI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPVARRAY

struct SFIR sfirBATTERY[] =	// fields info for RTBATTERY
{
 #define o(m) offsetof(BATTERY,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   24,    1,         o(bt_meter),            "meter" },	// TI
    {   0,  136,    2,        o(bt_endUse),           "endUse" },	// ENDUSECH
    {   0,   89,   32,     o(bt_useUsrChg),        "useUsrChg" },	// NOYESCH
    {   0,  163,  512,    o(bt_controlAlg),       "controlAlg" },	// BATCTRLALGVC
    {   0,   13,   32,        o(bt_maxCap),           "maxCap" },	// FLOAT_GEZ
    {   0,   17,   32,       o(bt_initSOE),          "initSOE" },	// FRAC
    {   0,   13,   32,    o(bt_initCycles),       "initCycles" },	// FLOAT_GEZ
    {   0,   18,  512,        o(bt_chgEff),           "chgEff" },	// FRAC_GZ
    {   0,   18,  512,      o(bt_dschgEff),         "dschgEff" },	// FRAC_GZ
    {   0,   13,  512,     o(bt_maxChgPwr),        "maxChgPwr" },	// FLOAT_GEZ
    {   0,   13,  512,   o(bt_maxDschgPwr),      "maxDschgPwr" },	// FLOAT_GEZ
    {   0,   12,  516,        o(bt_chgReq),           "chgReq" },	// FLOAT
    {   0,   17,  512,     o(bt_soeBegIvl),        "soeBegIvl" },	// FRAC
    {   0,   12,  516,      o(bt_loadSeen),         "loadSeen" },	// FLOAT
    {   0,   17,  520,           o(bt_soe),              "soe" },	// FRAC
    {   0,   12,  512,         o(bt_soelh),            "soelh" },	// FLOAT
    {   0,   13,  520,        o(bt_cycles),           "cycles" },	// FLOAT_GEZ
    {   0,   13,  512,      o(bt_cycleslh),         "cycleslh" },	// FLOAT_GEZ
    {   0,   13,  520,        o(bt_energy),           "energy" },	// FLOAT_GEZ
    {   0,   13,  512,      o(bt_energylh),         "energylh" },	// FLOAT_GEZ
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirBATTERY

struct SFIR sfirGAIN[] =	// fields info for RTGAIN
{
 #define o(m) offsetof(GAIN,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   48,  512,          o(gnPower),          "gnPower" },	// POWER
    {   0,   24,    1,             o(mtri),             "mtri" },	// TI
    {   0,  136,    2,         o(gnEndUse),         "gnEndUse" },	// ENDUSECH
    {   0,   17,  512,          o(gnFrLat),          "gnFrLat" },	// FRAC
    {   0,   17,  512,          o(gnFrRad),          "gnFrRad" },	// FRAC
    {   0,   17,  512,           o(gnFrZn),           "gnFrZn" },	// FRAC
    {   0,   17,  512,           o(gnFrPl),           "gnFrPl" },	// FRAC
    {   0,   17,  512,          o(gnFrRtn),          "gnFrRtn" },	// FRAC
    {   0,   17,  512,        o(gnDlFrPow),        "gnDlFrPow" },	// FRAC
    {   0,   24,    1,       o(gn_dhwsysi),          "dhwsysi" },	// TI
    {   0,   24,    1,       o(gn_dhwmtri),          "dhwmtri" },	// TI
    {   0,  118,    1,     o(gn_dhwEndUse),        "dhwEndUse" },	// DHWEUXCH
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirGAIN

struct SFIR sfirMTR_IVL_SUB[] =	// fields info for RTMTR_IVL_SUB
{
 #define o(m) offsetof(MTR_IVL_SUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   12,    8,              o(tot),              "tot" },	// FLOAT
    {   0,   12,    4,              o(clg),              "clg" },	// FLOAT
    {   0,   12,    4,              o(htg),              "htg" },	// FLOAT
    {   0,   12,    4,             o(hpBU),             "hpBU" },	// FLOAT
    {   0,   12,    4,              o(dhw),              "dhw" },	// FLOAT
    {   0,   12,    4,            o(dhwBU),            "dhwBU" },	// FLOAT
    {   0,   12,    4,           o(dhwMFL),           "dhwMFL" },	// FLOAT
    {   0,   12,    4,             o(fanC),             "fanC" },	// FLOAT
    {   0,   12,    4,             o(fanH),             "fanH" },	// FLOAT
    {   0,   12,    4,             o(fanV),             "fanV" },	// FLOAT
    {   0,   12,    4,              o(fan),              "fan" },	// FLOAT
    {   0,   12,    4,              o(aux),              "aux" },	// FLOAT
    {   0,   12,    4,             o(proc),             "proc" },	// FLOAT
    {   0,   12,    4,              o(lit),              "lit" },	// FLOAT
    {   0,   12,    4,              o(rcp),              "rcp" },	// FLOAT
    {   0,   12,    4,              o(ext),              "ext" },	// FLOAT
    {   0,   12,    4,             o(refr),             "refr" },	// FLOAT
    {   0,   12,    4,             o(dish),             "dish" },	// FLOAT
    {   0,   12,    4,              o(dry),              "dry" },	// FLOAT
    {   0,   12,    4,             o(wash),             "wash" },	// FLOAT
    {   0,   12,    4,             o(cook),             "cook" },	// FLOAT
    {   0,   12,    4,             o(usr1),             "usr1" },	// FLOAT
    {   0,   12,    4,             o(usr2),             "usr2" },	// FLOAT
    {   0,   12,    8,               o(bt),               "bt" },	// FLOAT
    {   0,   12,    4,               o(pv),               "pv" },	// FLOAT
    {   0,   12,    4,            o(allEU),            "allEU" },	// FLOAT
    {   0,   12,    8,             o(cost),             "cost" },	// FLOAT
    {   0,   12,    8,          o(dmdCost),          "dmdCost" },	// FLOAT
    {   0,   12,    8,              o(dmd),              "dmd" },	// FLOAT
    {   0,    8,    8,          o(dmdShoy),          "dmdShoy" },	// SHOY
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirMTR_IVL_SUB

struct SFIR sfirMTR[] =	// fields info for RTMTR
{
 #define o(m) offsetof(MTR,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   12,    1,             o(rate),             "rate" },	// FLOAT
    {   0,   12,    1,          o(dmdRate),          "dmdRate" },	// FLOAT
    {   0,   12,   44,            o(Y.tot),            "Y.tot" },	// FLOAT
    {   0,   12,   36,            o(Y.clg),            "Y.clg" },	// FLOAT
    {   0,   12,   36,            o(Y.htg),            "Y.htg" },	// FLOAT
    {   0,   12,   36,           o(Y.hpBU),           "Y.hpBU" },	// FLOAT
    {   0,   12,   36,            o(Y.dhw),            "Y.dhw" },	// FLOAT
    {   0,   12,   36,          o(Y.dhwBU),          "Y.dhwBU" },	// FLOAT
    {   0,   12,   36,         o(Y.dhwMFL),         "Y.dhwMFL" },	// FLOAT
    {   0,   12,   36,           o(Y.fanC),           "Y.fanC" },	// FLOAT
    {   0,   12,   36,           o(Y.fanH),           "Y.fanH" },	// FLOAT
    {   0,   12,   36,           o(Y.fanV),           "Y.fanV" },	// FLOAT
    {   0,   12,   36,            o(Y.fan),            "Y.fan" },	// FLOAT
    {   0,   12,   36,            o(Y.aux),            "Y.aux" },	// FLOAT
    {   0,   12,   36,           o(Y.proc),           "Y.proc" },	// FLOAT
    {   0,   12,   36,            o(Y.lit),            "Y.lit" },	// FLOAT
    {   0,   12,   36,            o(Y.rcp),            "Y.rcp" },	// FLOAT
    {   0,   12,   36,            o(Y.ext),            "Y.ext" },	// FLOAT
    {   0,   12,   36,           o(Y.refr),           "Y.refr" },	// FLOAT
    {   0,   12,   36,           o(Y.dish),           "Y.dish" },	// FLOAT
    {   0,   12,   36,            o(Y.dry),            "Y.dry" },	// FLOAT
    {   0,   12,   36,           o(Y.wash),           "Y.wash" },	// FLOAT
    {   0,   12,   36,           o(Y.cook),           "Y.cook" },	// FLOAT
    {   0,   12,   36,           o(Y.usr1),           "Y.usr1" },	// FLOAT
    {   0,   12,   36,           o(Y.usr2),           "Y.usr2" },	// FLOAT
    {   0,   12,   44,             o(Y.bt),             "Y.bt" },	// FLOAT
    {   0,   12,   36,             o(Y.pv),             "Y.pv" },	// FLOAT
    {   0,   12,   36,          o(Y.allEU),          "Y.allEU" },	// FLOAT
    {   0,   12,   44,           o(Y.cost),           "Y.cost" },	// FLOAT
    {   0,   12,   44,        o(Y.dmdCost),        "Y.dmdCost" },	// FLOAT
    {   0,   12,   44,            o(Y.dmd),            "Y.dmd" },	// FLOAT
    {   0,    8,   44,        o(Y.dmdShoy),        "Y.dmdShoy" },	// SHOY
    {   0,   12,   76,            o(M.tot),            "M.tot" },	// FLOAT
    {   0,   12,   68,            o(M.clg),            "M.clg" },	// FLOAT
    {   0,   12,   68,            o(M.htg),            "M.htg" },	// FLOAT
    {   0,   12,   68,           o(M.hpBU),           "M.hpBU" },	// FLOAT
    {   0,   12,   68,            o(M.dhw),            "M.dhw" },	// FLOAT
    {   0,   12,   68,          o(M.dhwBU),          "M.dhwBU" },	// FLOAT
    {   0,   12,   68,         o(M.dhwMFL),         "M.dhwMFL" },	// FLOAT
    {   0,   12,   68,           o(M.fanC),           "M.fanC" },	// FLOAT
    {   0,   12,   68,           o(M.fanH),           "M.fanH" },	// FLOAT
    {   0,   12,   68,           o(M.fanV),           "M.fanV" },	// FLOAT
    {   0,   12,   68,            o(M.fan),            "M.fan" },	// FLOAT
    {   0,   12,   68,            o(M.aux),            "M.aux" },	// FLOAT
    {   0,   12,   68,           o(M.proc),           "M.proc" },	// FLOAT
    {   0,   12,   68,            o(M.lit),            "M.lit" },	// FLOAT
    {   0,   12,   68,            o(M.rcp),            "M.rcp" },	// FLOAT
    {   0,   12,   68,            o(M.ext),            "M.ext" },	// FLOAT
    {   0,   12,   68,           o(M.refr),           "M.refr" },	// FLOAT
    {   0,   12,   68,           o(M.dish),           "M.dish" },	// FLOAT
    {   0,   12,   68,            o(M.dry),            "M.dry" },	// FLOAT
    {   0,   12,   68,           o(M.wash),           "M.wash" },	// FLOAT
    {   0,   12,   68,           o(M.cook),           "M.cook" },	// FLOAT
    {   0,   12,   68,           o(M.usr1),           "M.usr1" },	// FLOAT
    {   0,   12,   68,           o(M.usr2),           "M.usr2" },	// FLOAT
    {   0,   12,   76,             o(M.bt),             "M.bt" },	// FLOAT
    {   0,   12,   68,             o(M.pv),             "M.pv" },	// FLOAT
    {   0,   12,   68,          o(M.allEU),          "M.allEU" },	// FLOAT
    {   0,   12,   76,           o(M.cost),           "M.cost" },	// FLOAT
    {   0,   12,   76,        o(M.dmdCost),        "M.dmdCost" },	// FLOAT
    {   0,   12,   76,            o(M.dmd),            "M.dmd" },	// FLOAT
    {   0,    8,   76,        o(M.dmdShoy),        "M.dmdShoy" },	// SHOY
    {   0,   12,  140,            o(D.tot),            "D.tot" },	// FLOAT
    {   0,   12,  132,            o(D.clg),            "D.clg" },	// FLOAT
    {   0,   12,  132,            o(D.htg),            "D.htg" },	// FLOAT
    {   0,   12,  132,           o(D.hpBU),           "D.hpBU" },	// FLOAT
    {   0,   12,  132,            o(D.dhw),            "D.dhw" },	// FLOAT
    {   0,   12,  132,          o(D.dhwBU),          "D.dhwBU" },	// FLOAT
    {   0,   12,  132,         o(D.dhwMFL),         "D.dhwMFL" },	// FLOAT
    {   0,   12,  132,           o(D.fanC),           "D.fanC" },	// FLOAT
    {   0,   12,  132,           o(D.fanH),           "D.fanH" },	// FLOAT
    {   0,   12,  132,           o(D.fanV),           "D.fanV" },	// FLOAT
    {   0,   12,  132,            o(D.fan),            "D.fan" },	// FLOAT
    {   0,   12,  132,            o(D.aux),            "D.aux" },	// FLOAT
    {   0,   12,  132,           o(D.proc),           "D.proc" },	// FLOAT
    {   0,   12,  132,            o(D.lit),            "D.lit" },	// FLOAT
    {   0,   12,  132,            o(D.rcp),            "D.rcp" },	// FLOAT
    {   0,   12,  132,            o(D.ext),            "D.ext" },	// FLOAT
    {   0,   12,  132,           o(D.refr),           "D.refr" },	// FLOAT
    {   0,   12,  132,           o(D.dish),           "D.dish" },	// FLOAT
    {   0,   12,  132,            o(D.dry),            "D.dry" },	// FLOAT
    {   0,   12,  132,           o(D.wash),           "D.wash" },	// FLOAT
    {   0,   12,  132,           o(D.cook),           "D.cook" },	// FLOAT
    {   0,   12,  132,           o(D.usr1),           "D.usr1" },	// FLOAT
    {   0,   12,  132,           o(D.usr2),           "D.usr2" },	// FLOAT
    {   0,   12,  140,             o(D.bt),             "D.bt" },	// FLOAT
    {   0,   12,  132,             o(D.pv),             "D.pv" },	// FLOAT
    {   0,   12,  132,          o(D.allEU),          "D.allEU" },	// FLOAT
    {   0,   12,  140,           o(D.cost),           "D.cost" },	// FLOAT
    {   0,   12,  140,        o(D.dmdCost),        "D.dmdCost" },	// FLOAT
    {   0,   12,  140,            o(D.dmd),            "D.dmd" },	// FLOAT
    {   0,    8,  140,        o(D.dmdShoy),        "D.dmdShoy" },	// SHOY
    {   0,   12,  524,            o(H.tot),            "H.tot" },	// FLOAT
    {   0,   12,  516,            o(H.clg),            "H.clg" },	// FLOAT
    {   0,   12,  516,            o(H.htg),            "H.htg" },	// FLOAT
    {   0,   12,  516,           o(H.hpBU),           "H.hpBU" },	// FLOAT
    {   0,   12,  516,            o(H.dhw),            "H.dhw" },	// FLOAT
    {   0,   12,  516,          o(H.dhwBU),          "H.dhwBU" },	// FLOAT
    {   0,   12,  516,         o(H.dhwMFL),         "H.dhwMFL" },	// FLOAT
    {   0,   12,  516,           o(H.fanC),           "H.fanC" },	// FLOAT
    {   0,   12,  516,           o(H.fanH),           "H.fanH" },	// FLOAT
    {   0,   12,  516,           o(H.fanV),           "H.fanV" },	// FLOAT
    {   0,   12,  516,            o(H.fan),            "H.fan" },	// FLOAT
    {   0,   12,  516,            o(H.aux),            "H.aux" },	// FLOAT
    {   0,   12,  516,           o(H.proc),           "H.proc" },	// FLOAT
    {   0,   12,  516,            o(H.lit),            "H.lit" },	// FLOAT
    {   0,   12,  516,            o(H.rcp),            "H.rcp" },	// FLOAT
    {   0,   12,  516,            o(H.ext),            "H.ext" },	// FLOAT
    {   0,   12,  516,           o(H.refr),           "H.refr" },	// FLOAT
    {   0,   12,  516,           o(H.dish),           "H.dish" },	// FLOAT
    {   0,   12,  516,            o(H.dry),            "H.dry" },	// FLOAT
    {   0,   12,  516,           o(H.wash),           "H.wash" },	// FLOAT
    {   0,   12,  516,           o(H.cook),           "H.cook" },	// FLOAT
    {   0,   12,  516,           o(H.usr1),           "H.usr1" },	// FLOAT
    {   0,   12,  516,           o(H.usr2),           "H.usr2" },	// FLOAT
    {   0,   12,  524,             o(H.bt),             "H.bt" },	// FLOAT
    {   0,   12,  516,             o(H.pv),             "H.pv" },	// FLOAT
    {   0,   12,  516,          o(H.allEU),          "H.allEU" },	// FLOAT
    {   0,   12,  524,           o(H.cost),           "H.cost" },	// FLOAT
    {   0,   12,  524,        o(H.dmdCost),        "H.dmdCost" },	// FLOAT
    {   0,   12,  524,            o(H.dmd),            "H.dmd" },	// FLOAT
    {   0,    8,  524,        o(H.dmdShoy),        "H.dmdShoy" },	// SHOY
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirMTR

struct SFIR sfirHDAY[] =	// fields info for RTHDAY
{
 #define o(m) offsetof(HDAY,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    7,    1,       o(hdDateTrue),       "hdDateTrue" },	// DOY
    {   0,    7,    1,        o(hdDateObs),        "hdDateObs" },	// DOY
    {   0,   89,    1,       o(hdOnMonday),       "hdOnMonday" },	// NOYESCH
    {   0,  139,    1,           o(hdCase),           "hdCase" },	// HDAYCASECH
    {   0,   90,    1,            o(hdDow),            "hdDow" },	// DOWCH
    {   0,  138,    1,            o(hdMon),            "hdMon" },	// MONCH
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirHDAY

struct SFIR sfirCOIL[] =	// fields info for RTCOIL
{
 #define o(m) offsetof(COIL,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,  146,   32,           o(coilTy),           "coilTy" },	// COILTYCH
    {   0,  157,  512,            o(sched),            "sched" },	// OFFAVAILVC
    {   0,   49, 1028,          o(captRat),          "captRat" },	// POWER_NZ
    {   0,   48,    2,       o(captRat_As),       "captRat_As" },	// POWER
    {   0,   48,    2,    o(captRat_AsNov),    "captRat_AsNov" },	// POWER
    {   0,   48, 1028,         o(bCaptRat),         "bCaptRat" },	// POWER
    {   0,   12,  512,           o(eirRat),           "eirRat" },	// FLOAT
    {   0,   24,    1,             o(mtri),             "mtri" },	// TI
    {   0,   51,  512,            o(auxOn),            "auxOn" },	// POWER_GEZ
    {   0,   24,    1,        o(auxOnMtri),        "auxOnMtri" },	// TI
    {   0,   51,  512,           o(auxOff),           "auxOff" },	// POWER_GEZ
    {   0,   24,    1,       o(auxOffMtri),       "auxOffMtri" },	// TI
    {   0,   51,  512,       o(auxOnAtall),       "auxOnAtall" },	// POWER_GEZ
    {   0,   24,    1,   o(auxOnAtallMtri),   "auxOnAtallMtri" },	// TI
    {   0,   51,  512,       o(auxFullOff),       "auxFullOff" },	// POWER_GEZ
    {   0,   24,    1,   o(auxFullOffMtri),   "auxFullOffMtri" },	// TI
    {   0,   48, 1028,                o(q),                "q" },	// POWER
    {   0,   48, 1028,              o(qPr),              "qPr" },	// POWER
    {   0,   48, 1028,                o(p),                "p" },	// POWER
    {   0,   17, 1028,              o(plr),              "plr" },	// FRAC
    {   0,   17, 1028,            o(plrAv),            "plrAv" },	// FRAC
    {   0,   12, 1028,              o(eir),              "eir" },	// FLOAT
    {   0,   48, 1028,           o(pAuxOn),           "pAuxOn" },	// POWER
    {   0,   48, 1028,          o(pAuxOff),          "pAuxOff" },	// POWER
    {   0,   48, 1028,      o(pAuxOnAtall),      "pAuxOnAtall" },	// POWER
    {   0,   48, 1028,      o(pAuxFullOff),      "pAuxFullOff" },	// POWER
    {   1,    6, 1028,          o(notDone),          "notDone" },	// BOO
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirCOIL

struct SFIR sfirCOOLCOIL[] =	// fields info for RTCOOLCOIL
{
 #define o(m) offsetof(COOLCOIL,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,  146,   32,           o(coilTy),           "coilTy" },	// COILTYCH
    {   2,  157,  512,            o(sched),            "sched" },	// OFFAVAILVC
    {   2,   49, 1028,          o(captRat),          "captRat" },	// POWER_NZ
    {   2,   48,    2,       o(captRat_As),       "captRat_As" },	// POWER
    {   2,   48,    2,    o(captRat_AsNov),    "captRat_AsNov" },	// POWER
    {   2,   48, 1028,         o(bCaptRat),         "bCaptRat" },	// POWER
    {   2,   12,  512,           o(eirRat),           "eirRat" },	// FLOAT
    {   2,   24,    1,             o(mtri),             "mtri" },	// TI
    {   2,   51,  512,            o(auxOn),            "auxOn" },	// POWER_GEZ
    {   2,   24,    1,        o(auxOnMtri),        "auxOnMtri" },	// TI
    {   2,   51,  512,           o(auxOff),           "auxOff" },	// POWER_GEZ
    {   2,   24,    1,       o(auxOffMtri),       "auxOffMtri" },	// TI
    {   2,   51,  512,       o(auxOnAtall),       "auxOnAtall" },	// POWER_GEZ
    {   2,   24,    1,   o(auxOnAtallMtri),   "auxOnAtallMtri" },	// TI
    {   2,   51,  512,       o(auxFullOff),       "auxFullOff" },	// POWER_GEZ
    {   2,   24,    1,   o(auxFullOffMtri),   "auxFullOffMtri" },	// TI
    {   2,   48, 1028,                o(q),                "q" },	// POWER
    {   2,   48, 1028,              o(qPr),              "qPr" },	// POWER
    {   2,   48, 1028,                o(p),                "p" },	// POWER
    {   2,   17, 1028,              o(plr),              "plr" },	// FRAC
    {   2,   17, 1028,            o(plrAv),            "plrAv" },	// FRAC
    {   2,   12, 1028,              o(eir),              "eir" },	// FLOAT
    {   2,   48, 1028,           o(pAuxOn),           "pAuxOn" },	// POWER
    {   2,   48, 1028,          o(pAuxOff),          "pAuxOff" },	// POWER
    {   2,   48, 1028,      o(pAuxOnAtall),      "pAuxOnAtall" },	// POWER
    {   2,   48, 1028,      o(pAuxFullOff),      "pAuxFullOff" },	// POWER
    {   3,    6, 1028,          o(notDone),          "notDone" },	// BOO
    {   0,   49, 1028,          o(capsRat),          "capsRat" },	// POWER_NZ
    {   0,   48,    2,       o(capsRat_As),       "capsRat_As" },	// POWER
    {   0,   48,    2,    o(capsRat_AsNov),    "capsRat_AsNov" },	// POWER
    {   0,   43,    2,         o(minTEvap),         "minTEvap" },	// TEMP_GZ
    {   0,   16,    2,               o(k1),               "k1" },	// FLOAT_LZ
    {   0,   43,    2,         o(dsTDbCnd),         "dsTDbCnd" },	// TEMP_GZ
    {   0,   43,    2,          o(dsTDbEn),          "dsTDbEn" },	// TEMP_GZ
    {   0,   43,    2,          o(dsTWbEn),          "dsTWbEn" },	// TEMP_GZ
    {   0,   33,   32,              o(vfR),              "vfR" },	// AFLOW_GZ
    {   0,   12,   32,        o(vfRperTon),        "vfRperTon" },	// FLOAT
    {   0,   17,    2,       o(minUnldPlr),       "minUnldPlr" },	// FRAC
    {   0,   17,    2,       o(minFsldPlr),       "minFsldPlr" },	// FRAC
    {   0,   12,    2,   o(pydxCaptT.k[0]),   "pydxCaptT.k[0]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptT.k[1]),   "pydxCaptT.k[1]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptT.k[2]),   "pydxCaptT.k[2]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptT.k[3]),   "pydxCaptT.k[3]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptT.k[4]),   "pydxCaptT.k[4]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptT.k[5]),   "pydxCaptT.k[5]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptT.k[6]),   "pydxCaptT.k[6]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptF.k[0]),   "pydxCaptF.k[0]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptF.k[1]),   "pydxCaptF.k[1]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptF.k[2]),   "pydxCaptF.k[2]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptF.k[3]),   "pydxCaptF.k[3]" },	// FLOAT
    {   0,   12,    2,   o(pydxCaptF.k[4]),   "pydxCaptF.k[4]" },	// FLOAT
    {   0,   12,    2,     o(pydxCaptFLim),     "pydxCaptFLim" },	// FLOAT
    {   0,   12,    2,    o(pydxEirT.k[0]),    "pydxEirT.k[0]" },	// FLOAT
    {   0,   12,    2,    o(pydxEirT.k[1]),    "pydxEirT.k[1]" },	// FLOAT
    {   0,   12,    2,    o(pydxEirT.k[2]),    "pydxEirT.k[2]" },	// FLOAT
    {   0,   12,    2,    o(pydxEirT.k[3]),    "pydxEirT.k[3]" },	// FLOAT
    {   0,   12,    2,    o(pydxEirT.k[4]),    "pydxEirT.k[4]" },	// FLOAT
    {   0,   12,    2,    o(pydxEirT.k[5]),    "pydxEirT.k[5]" },	// FLOAT
    {   0,   12,    2,    o(pydxEirT.k[6]),    "pydxEirT.k[6]" },	// FLOAT
    {   0,   12,    2,   o(pydxEirUl.k[0]),   "pydxEirUl.k[0]" },	// FLOAT
    {   0,   12,    2,   o(pydxEirUl.k[1]),   "pydxEirUl.k[1]" },	// FLOAT
    {   0,   12,    2,   o(pydxEirUl.k[2]),   "pydxEirUl.k[2]" },	// FLOAT
    {   0,   12,    2,   o(pydxEirUl.k[3]),   "pydxEirUl.k[3]" },	// FLOAT
    {   0,   12,    2,   o(pydxEirUl.k[4]),   "pydxEirUl.k[4]" },	// FLOAT
    {   0,   24,    1,              o(cpi),              "cpi" },	// TI
    {   0,   39,    2,            o(gpmDs),            "gpmDs" },	// H2OFLOW_GZ
    {   0,   14,    2,           o(ntuoDs),           "ntuoDs" },	// FLOAT_GZ
    {   0,   14,    2,           o(ntuiDs),           "ntuiDs" },	// FLOAT_GZ
    {   0,   19,   32,     o(wsatMinTEvap),     "wsatMinTEvap" },	// DBL
    {   0,   19,   32,     o(hsatMinTEvap),     "hsatMinTEvap" },	// DBL
    {   0,   19,   32,           o(efecOR),           "efecOR" },	// DBL
    {   0,   19,   32,             o(ntuR),             "ntuR" },	// DBL
    {   0,   19,   32,    o(eirMinUnldPlr),    "eirMinUnldPlr" },	// DBL
    {   0,   19,   32,             o(menR),             "menR" },	// DBL
    {   0,   24,   32,          o(nxAh4cp),          "nxAh4cp" },	// TI
    {   0,   19,   32,             o(mwDs),             "mwDs" },	// DBL
    {   0,    6, 1028,        o(wantQflag),        "wantQflag" },	// BOO
    {   0,   19, 1028,             o(tewd),             "tewd" },	// DBL
    {   0,   19, 1028,             o(chwQ),             "chwQ" },	// DBL
    {   0,   19, 1028,               o(tr),               "tr" },	// DBL
    {   0,   42, 1028,           o(cpTsPr),           "cpTsPr" },	// TEMP
    {   0,   42, 1028,             o(trPr),             "trPr" },	// TEMP
    {   0,    6, 1028,      o(fullLoadWet),      "fullLoadWet" },	// BOO
    {   0,   19, 1028,          o(frCprOn),          "frCprOn" },	// DBL
    {   0,   19, 1028,            o(tWbEn),            "tWbEn" },	// DBL
    {   0,   19, 1028,              o(hen),              "hen" },	// DBL
    {   0,   19, 1028,           o(tDbCnd),           "tDbCnd" },	// DBL
    {   0,   19, 1028,            o(efecO),            "efecO" },	// DBL
    {   0,   19, 1028,             o(capt),             "capt" },	// DBL
    {   0,   19, 1028,             o(caps),             "caps" },	// DBL
    {   0,   19, 1028,            o(plrVf),            "plrVf" },	// DBL
    {   0,   19, 1028,          o(plrSens),          "plrSens" },	// DBL
    {   0,   19, 1028,               o(qs),               "qs" },	// DBL
    {   0,   19, 1028,               o(ql),               "ql" },	// DBL
    {   0,   47, 1028,           o(xLGain),           "xLGain" },	// ENERGY
    {   0,   47, 1028,         o(xLGainYr),         "xLGainYr" },	// ENERGY
    {   0,   10, 1028,        o(nSubhrsLX),        "nSubhrsLX" },	// LI
    {   0,    6, 1028,          o(minTLtd),          "minTLtd" },	// BOO
    {   0,    6, 1028,          o(cfm2Few),          "cfm2Few" },	// BOO
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirCOOLCOIL

struct SFIR sfirHEATCOIL[] =	// fields info for RTHEATCOIL
{
 #define o(m) offsetof(HEATCOIL,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,  146,   32,           o(coilTy),           "coilTy" },	// COILTYCH
    {   2,  157,  512,            o(sched),            "sched" },	// OFFAVAILVC
    {   2,   49, 1028,          o(captRat),          "captRat" },	// POWER_NZ
    {   2,   48,    2,       o(captRat_As),       "captRat_As" },	// POWER
    {   2,   48,    2,    o(captRat_AsNov),    "captRat_AsNov" },	// POWER
    {   2,   48, 1028,         o(bCaptRat),         "bCaptRat" },	// POWER
    {   2,   12,  512,           o(eirRat),           "eirRat" },	// FLOAT
    {   2,   24,    1,             o(mtri),             "mtri" },	// TI
    {   2,   51,  512,            o(auxOn),            "auxOn" },	// POWER_GEZ
    {   2,   24,    1,        o(auxOnMtri),        "auxOnMtri" },	// TI
    {   2,   51,  512,           o(auxOff),           "auxOff" },	// POWER_GEZ
    {   2,   24,    1,       o(auxOffMtri),       "auxOffMtri" },	// TI
    {   2,   51,  512,       o(auxOnAtall),       "auxOnAtall" },	// POWER_GEZ
    {   2,   24,    1,   o(auxOnAtallMtri),   "auxOnAtallMtri" },	// TI
    {   2,   51,  512,       o(auxFullOff),       "auxFullOff" },	// POWER_GEZ
    {   2,   24,    1,   o(auxFullOffMtri),   "auxFullOffMtri" },	// TI
    {   2,   48, 1028,                o(q),                "q" },	// POWER
    {   2,   48, 1028,              o(qPr),              "qPr" },	// POWER
    {   2,   48, 1028,                o(p),                "p" },	// POWER
    {   2,   17, 1028,              o(plr),              "plr" },	// FRAC
    {   2,   17, 1028,            o(plrAv),            "plrAv" },	// FRAC
    {   2,   12, 1028,              o(eir),              "eir" },	// FLOAT
    {   2,   48, 1028,           o(pAuxOn),           "pAuxOn" },	// POWER
    {   2,   48, 1028,          o(pAuxOff),          "pAuxOff" },	// POWER
    {   2,   48, 1028,      o(pAuxOnAtall),      "pAuxOnAtall" },	// POWER
    {   2,   48, 1028,      o(pAuxFullOff),      "pAuxFullOff" },	// POWER
    {   3,    6, 1028,          o(notDone),          "notDone" },	// BOO
    {   0,   18,    2,           o(effRat),           "effRat" },	// FRAC_GZ
    {   0,   12,    2,        o(pyEi.k[0]),        "pyEi.k[0]" },	// FLOAT
    {   0,   12,    2,        o(pyEi.k[1]),        "pyEi.k[1]" },	// FLOAT
    {   0,   12,    2,        o(pyEi.k[2]),        "pyEi.k[2]" },	// FLOAT
    {   0,   12,    2,        o(pyEi.k[3]),        "pyEi.k[3]" },	// FLOAT
    {   0,   12,    2,        o(pyEi.k[4]),        "pyEi.k[4]" },	// FLOAT
    {   0,   17,  512,      o(stackEffect),      "stackEffect" },	// FRAC
    {   0,   24,    1,              o(hpi),              "hpi" },	// TI
    {   0,   24,   32,          o(nxTu4hp),          "nxTu4hp" },	// TI
    {   0,   24,   32,          o(nxAh4hp),          "nxAh4hp" },	// TI
    {   0,   48, 1028,         o(flueLoss),         "flueLoss" },	// POWER
    {   0,   48, 1028,            o(qWant),            "qWant" },	// POWER
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirHEATCOIL

struct SFIR sfirAHHEATCOIL[] =	// fields info for RTAHHEATCOIL
{
 #define o(m) offsetof(AHHEATCOIL,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   2,  146,   32,           o(coilTy),           "coilTy" },	// COILTYCH
    {   2,  157,  512,            o(sched),            "sched" },	// OFFAVAILVC
    {   2,   49, 1028,          o(captRat),          "captRat" },	// POWER_NZ
    {   2,   48,    2,       o(captRat_As),       "captRat_As" },	// POWER
    {   2,   48,    2,    o(captRat_AsNov),    "captRat_AsNov" },	// POWER
    {   2,   48, 1028,         o(bCaptRat),         "bCaptRat" },	// POWER
    {   2,   12,  512,           o(eirRat),           "eirRat" },	// FLOAT
    {   2,   24,    1,             o(mtri),             "mtri" },	// TI
    {   2,   51,  512,            o(auxOn),            "auxOn" },	// POWER_GEZ
    {   2,   24,    1,        o(auxOnMtri),        "auxOnMtri" },	// TI
    {   2,   51,  512,           o(auxOff),           "auxOff" },	// POWER_GEZ
    {   2,   24,    1,       o(auxOffMtri),       "auxOffMtri" },	// TI
    {   2,   51,  512,       o(auxOnAtall),       "auxOnAtall" },	// POWER_GEZ
    {   2,   24,    1,   o(auxOnAtallMtri),   "auxOnAtallMtri" },	// TI
    {   2,   51,  512,       o(auxFullOff),       "auxFullOff" },	// POWER_GEZ
    {   2,   24,    1,   o(auxFullOffMtri),   "auxFullOffMtri" },	// TI
    {   2,   48, 1028,                o(q),                "q" },	// POWER
    {   2,   48, 1028,              o(qPr),              "qPr" },	// POWER
    {   2,   48, 1028,                o(p),                "p" },	// POWER
    {   2,   17, 1028,              o(plr),              "plr" },	// FRAC
    {   2,   17, 1028,            o(plrAv),            "plrAv" },	// FRAC
    {   2,   12, 1028,              o(eir),              "eir" },	// FLOAT
    {   2,   48, 1028,           o(pAuxOn),           "pAuxOn" },	// POWER
    {   2,   48, 1028,          o(pAuxOff),          "pAuxOff" },	// POWER
    {   2,   48, 1028,      o(pAuxOnAtall),      "pAuxOnAtall" },	// POWER
    {   2,   48, 1028,      o(pAuxFullOff),      "pAuxFullOff" },	// POWER
    {   3,    6, 1028,          o(notDone),          "notDone" },	// BOO
    {   2,   18,    2,           o(effRat),           "effRat" },	// FRAC_GZ
    {   2,   12,    2,        o(pyEi.k[0]),        "pyEi.k[0]" },	// FLOAT
    {   2,   12,    2,        o(pyEi.k[1]),        "pyEi.k[1]" },	// FLOAT
    {   2,   12,    2,        o(pyEi.k[2]),        "pyEi.k[2]" },	// FLOAT
    {   2,   12,    2,        o(pyEi.k[3]),        "pyEi.k[3]" },	// FLOAT
    {   2,   12,    2,        o(pyEi.k[4]),        "pyEi.k[4]" },	// FLOAT
    {   2,   17,  512,      o(stackEffect),      "stackEffect" },	// FRAC
    {   2,   24,    1,              o(hpi),              "hpi" },	// TI
    {   2,   24,   32,          o(nxTu4hp),          "nxTu4hp" },	// TI
    {   2,   24,   32,          o(nxAh4hp),          "nxAh4hp" },	// TI
    {   2,   48, 1028,         o(flueLoss),         "flueLoss" },	// POWER
    {   2,   48, 1028,            o(qWant),            "qWant" },	// POWER
    {   0,   50,    2,            o(cap17),            "cap17" },	// POWER_GZ
    {   0,   50,    2,            o(cap47),            "cap47" },	// POWER_GZ
    {   0,   50,   32,            o(cap35),            "cap35" },	// POWER_GZ
    {   0,   17,    2,           o(fd35Df),           "fd35Df" },	// FRAC
    {   0,   17,    2,            o(capIa),            "capIa" },	// FRAC
    {   0,   52,    2,            o(supRh),            "supRh" },	// KW_GZ
    {   0,   42,    2,            o(tFrMn),            "tFrMn" },	// TEMP
    {   0,   42,    2,            o(tFrMx),            "tFrMx" },	// TEMP
    {   0,   42,    2,            o(tFrPk),            "tFrPk" },	// TEMP
    {   0,   17,    2,           o(dfrFMn),           "dfrFMn" },	// FRAC
    {   0,   17,    2,           o(dfrFMx),           "dfrFMx" },	// FRAC
    {   0,   49,   32,           o(dfrCap),           "dfrCap" },	// POWER_NZ
    {   0,   52,    2,            o(dfrRh),            "dfrRh" },	// KW_GZ
    {   0,   42,    2,             o(tOff),             "tOff" },	// TEMP
    {   0,   42,    2,              o(tOn),              "tOn" },	// TEMP
    {   0,   52,    2,             o(in17),             "in17" },	// KW_GZ
    {   0,   52,    2,             o(in47),             "in47" },	// KW_GZ
    {   0,   17,    2,             o(inIa),             "inIa" },	// FRAC
    {   0,   17,    2,               o(cd),               "cd" },	// FRAC
    {   0,   48,   32,            o(in17c),            "in17c" },	// POWER
    {   0,   48,   32,            o(in47c),            "in47c" },	// POWER
    {   0,   12,   32,              o(cdm),              "cdm" },	// FLOAT
    {   0,   42, 1028,              o(tIa),              "tIa" },	// TEMP
    {   0,   12, 1028,          o(qSupLim),          "qSupLim" },	// FLOAT
    {   0,   19, 1028,          o(frFanOn),          "frFanOn" },	// DBL
    {   0,    6, 1028,       o(loTLockout),       "loTLockout" },	// BOO
    {   0,    6, 1028,            o(supOn),            "supOn" },	// BOO
    {   0,   48, 1028,           o(capCon),           "capCon" },	// POWER
    {   0,   48, 1028,         o(pDfrhCon),         "pDfrhCon" },	// POWER
    {   0,   48, 1028,              o(cap),              "cap" },	// POWER
    {   0,   17, 1028,          o(frCprOn),          "frCprOn" },	// FRAC
    {   0,   48, 1028,             o(pCpr),             "pCpr" },	// POWER
    {   0,   48, 1028,              o(pRh),              "pRh" },	// POWER
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAHHEATCOIL

struct SFIR sfirCCH[] =	// fields info for RTCCH
{
 #define o(m) offsetof(CCH,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,  154,   32,            o(cchCM),            "cchCM" },	// CCHCM
    {   0,   52,    2,              o(pMx),              "pMx" },	// KW_GZ
    {   0,   52,    2,              o(pMn),              "pMn" },	// KW_GZ
    {   0,   42,    2,              o(tMx),              "tMx" },	// TEMP
    {   0,   42,    2,              o(tMn),              "tMn" },	// TEMP
    {   0,   44,    2,               o(dt),               "dt" },	// TEMPDIFF
    {   0,   42,    2,              o(tOn),              "tOn" },	// TEMP
    {   0,   42,   32,             o(tOff),             "tOff" },	// TEMP
    {   0,   24,    1,             o(mtri),             "mtri" },	// TI
    {   0,   48,   32,           o(p47Off),           "p47Off" },	// POWER
    {   0,   48,   32,              o(p17),              "p17" },	// POWER
    {   0,   48,   32,              o(p47),              "p47" },	// POWER
    {   0,   17, 1028,          o(frCprOn),          "frCprOn" },	// FRAC
    {   0,    6, 1028,           o(tState),           "tState" },	// BOO
    {   0,   48, 1028,                o(p),                "p" },	// POWER
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirCCH

struct SFIR sfirAH[] =	// fields info for RTAH
{
 #define o(m) offsetof(AH,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   42,  512,          o(ahTsDsH),          "ahTsDsH" },	// TEMP
    {   0,   42,  512,          o(ahTsDsC),          "ahTsDsC" },	// TEMP
    {   0,   18,    2,          o(ahccSHR),          "ahccSHR" },	// FRAC_GZ
    {   0,   17,    2,     o(coilOversize),     "coilOversize" },	// FRAC
    {   0,   17,    2,      o(fanOversize),      "fanOversize" },	// FRAC
    {   0,    6,   32,           o(asRfan),           "asRfan" },	// BOO
    {   0,    6,   32,           o(asFlow),           "asFlow" },	// BOO
    {   0,    6,   32,   o(hcAs.az_active),   "hcAs.az_active" },	// BOO
    {   1,   20,   36,       o(hcAs.az_px),       "hcAs.az_px" },	// FLOATP
    {   1,    6,   36,       o(hcAs.isNeg),       "hcAs.isNeg" },	// BOO
    {   0,   12, 1028,        o(hcAs.az_a),        "hcAs.az_a" },	// FLOAT
    {   0,   12, 1028,        o(hcAs.az_b),        "hcAs.az_b" },	// FLOAT
    {   0,   12, 1028,        o(hcAs.ldPk),        "hcAs.ldPk" },	// FLOAT
    {   0,   12,  132,      o(hcAs.ldPkAs),      "hcAs.ldPkAs" },	// FLOAT
    {   0,   12,  132,     o(hcAs.ldPkAs1),     "hcAs.ldPkAs1" },	// FLOAT
    {   0,   12, 1028,       o(hcAs.plrPk),       "hcAs.plrPk" },	// FLOAT
    {   0,   12,  132,     o(hcAs.plrPkAs),     "hcAs.plrPkAs" },	// FLOAT
    {   0,   12, 1028,         o(hcAs.xPk),         "hcAs.xPk" },	// FLOAT
    {   0,   12,  132,       o(hcAs.xPkAs),       "hcAs.xPkAs" },	// FLOAT
    {   1,   11,  128,    o(hcAs.az_doing),    "hcAs.az_doing" },	// CHP
    {   1,   12, 1028,          o(hcAs.e1),          "hcAs.e1" },	// FLOAT
    {   1,   12, 1028,          o(hcAs.e2),          "hcAs.e2" },	// FLOAT
    {   1,   12, 1028,        o(hcAs.orig),        "hcAs.orig" },	// FLOAT
    {   0,    6,   32,   o(ccAs.az_active),   "ccAs.az_active" },	// BOO
    {   1,   20,   36,       o(ccAs.az_px),       "ccAs.az_px" },	// FLOATP
    {   1,    6,   36,       o(ccAs.isNeg),       "ccAs.isNeg" },	// BOO
    {   0,   12, 1028,        o(ccAs.az_a),        "ccAs.az_a" },	// FLOAT
    {   0,   12, 1028,        o(ccAs.az_b),        "ccAs.az_b" },	// FLOAT
    {   0,   12, 1028,        o(ccAs.ldPk),        "ccAs.ldPk" },	// FLOAT
    {   0,   12,  132,      o(ccAs.ldPkAs),      "ccAs.ldPkAs" },	// FLOAT
    {   0,   12,  132,     o(ccAs.ldPkAs1),     "ccAs.ldPkAs1" },	// FLOAT
    {   0,   12, 1028,       o(ccAs.plrPk),       "ccAs.plrPk" },	// FLOAT
    {   0,   12,  132,     o(ccAs.plrPkAs),     "ccAs.plrPkAs" },	// FLOAT
    {   0,   12, 1028,         o(ccAs.xPk),         "ccAs.xPk" },	// FLOAT
    {   0,   12,  132,       o(ccAs.xPkAs),       "ccAs.xPkAs" },	// FLOAT
    {   1,   11,  128,    o(ccAs.az_doing),    "ccAs.az_doing" },	// CHP
    {   1,   12, 1028,          o(ccAs.e1),          "ccAs.e1" },	// FLOAT
    {   1,   12, 1028,          o(ccAs.e2),          "ccAs.e2" },	// FLOAT
    {   1,   12, 1028,        o(ccAs.orig),        "ccAs.orig" },	// FLOAT
    {   0,    6,   32,  o(fanAs.az_active),  "fanAs.az_active" },	// BOO
    {   1,   20,   36,      o(fanAs.az_px),      "fanAs.az_px" },	// FLOATP
    {   1,    6,   36,      o(fanAs.isNeg),      "fanAs.isNeg" },	// BOO
    {   0,   12, 1028,       o(fanAs.az_a),       "fanAs.az_a" },	// FLOAT
    {   0,   12, 1028,       o(fanAs.az_b),       "fanAs.az_b" },	// FLOAT
    {   0,   12, 1028,       o(fanAs.ldPk),       "fanAs.ldPk" },	// FLOAT
    {   0,   12,  132,     o(fanAs.ldPkAs),     "fanAs.ldPkAs" },	// FLOAT
    {   0,   12,  132,    o(fanAs.ldPkAs1),    "fanAs.ldPkAs1" },	// FLOAT
    {   0,   12, 1028,      o(fanAs.plrPk),      "fanAs.plrPk" },	// FLOAT
    {   0,   12,  132,    o(fanAs.plrPkAs),    "fanAs.plrPkAs" },	// FLOAT
    {   0,   12, 1028,        o(fanAs.xPk),        "fanAs.xPk" },	// FLOAT
    {   0,   12,  132,      o(fanAs.xPkAs),      "fanAs.xPkAs" },	// FLOAT
    {   1,   11,  128,   o(fanAs.az_doing),   "fanAs.az_doing" },	// CHP
    {   1,   12, 1028,         o(fanAs.e1),         "fanAs.e1" },	// FLOAT
    {   1,   12, 1028,         o(fanAs.e2),         "fanAs.e2" },	// FLOAT
    {   1,   12, 1028,       o(fanAs.orig),       "fanAs.orig" },	// FLOAT
    {   0,   34, 1028,            o(bVfDs),            "bVfDs" },	// AFLOW_GEZ
    {   0,   48, 1028,            o(qcPkS),            "qcPkS" },	// POWER
    {   0,   48, 1028,            o(qcPkL),            "qcPkL" },	// POWER
    {   0,    3, 1028,            o(qcPkH),            "qcPkH" },	// SI
    {   0,    3, 1028,            o(qcPkD),            "qcPkD" },	// SI
    {   0,    3, 1028,            o(qcPkM),            "qcPkM" },	// SI
    {   0,   42, 1028,         o(qcPkTDbO),         "qcPkTDbO" },	// TEMP
    {   0,   45, 1028,           o(qcPkWO),           "qcPkWO" },	// HUMRAT
    {   0,   42, 1028,          o(qcPkTen),          "qcPkTen" },	// TEMP
    {   0,   45, 1028,          o(qcPkWen),          "qcPkWen" },	// HUMRAT
    {   0,   42, 1028,          o(qcPkTex),          "qcPkTex" },	// TEMP
    {   0,   45, 1028,          o(qcPkWex),          "qcPkWex" },	// HUMRAT
    {   0,   48, 1028,          o(qcPkSAs),          "qcPkSAs" },	// POWER
    {   0,   48, 1028,          o(qcPkLAs),          "qcPkLAs" },	// POWER
    {   0,    3, 1028,          o(qcPkHAs),          "qcPkHAs" },	// SI
    {   0,    3, 1028,          o(qcPkDAs),          "qcPkDAs" },	// SI
    {   0,    3, 1028,          o(qcPkMAs),          "qcPkMAs" },	// SI
    {   0,   42, 1028,       o(qcPkTDbOAs),       "qcPkTDbOAs" },	// TEMP
    {   0,   45, 1028,         o(qcPkWOAs),         "qcPkWOAs" },	// HUMRAT
    {   0,   42, 1028,        o(qcPkTenAs),        "qcPkTenAs" },	// TEMP
    {   0,   45, 1028,        o(qcPkWenAs),        "qcPkWenAs" },	// HUMRAT
    {   0,   42, 1028,        o(qcPkTexAs),        "qcPkTexAs" },	// TEMP
    {   0,   45, 1028,        o(qcPkWexAs),        "qcPkWexAs" },	// HUMRAT
    {   0,  165,  512,           o(ahTsSp),           "ahTsSp" },	// TEMP_TSCM
    {   0,  160,  512,      o(ahFanCycles),      "ahFanCycles" },	// NOYESVC
    {   0,   43,  512,           o(ahTsMn),           "ahTsMn" },	// TEMP_GZ
    {   0,   43,  512,           o(ahTsMx),           "ahTsMx" },	// TEMP_GZ
    {   0,   43,  512,         o(ahTsRaMn),         "ahTsRaMn" },	// TEMP_GZ
    {   0,   43,  512,         o(ahTsRaMx),         "ahTsRaMx" },	// TEMP_GZ
    {   0,   24,   32,            o(ahCtu),            "ahCtu" },	// TI
    {   0,   24,    2,      o(ahWzCzns[0]),      "ahWzCzns[0]" },	// TI
    {   0,   24,    2,      o(ahWzCzns[1]),      "ahWzCzns[1]" },	// TI
    {   0,   24,    2,      o(ahWzCzns[2]),      "ahWzCzns[2]" },	// TI
    {   0,   24,    2,      o(ahWzCzns[3]),      "ahWzCzns[3]" },	// TI
    {   0,   24,    2,      o(ahWzCzns[4]),      "ahWzCzns[4]" },	// TI
    {   0,   24,    2,      o(ahWzCzns[5]),      "ahWzCzns[5]" },	// TI
    {   0,   24,    2,      o(ahWzCzns[6]),      "ahWzCzns[6]" },	// TI
    {   0,   24,    2,      o(ahWzCzns[7]),      "ahWzCzns[7]" },	// TI
    {   0,   24,    2,      o(ahWzCzns[8]),      "ahWzCzns[8]" },	// TI
    {   0,   24,    2,      o(ahWzCzns[9]),      "ahWzCzns[9]" },	// TI
    {   0,   24,    2,     o(ahWzCzns[10]),     "ahWzCzns[10]" },	// TI
    {   0,   24,    2,     o(ahWzCzns[11]),     "ahWzCzns[11]" },	// TI
    {   0,   24,    2,     o(ahWzCzns[12]),     "ahWzCzns[12]" },	// TI
    {   0,   24,    2,     o(ahWzCzns[13]),     "ahWzCzns[13]" },	// TI
    {   0,   24,    2,     o(ahWzCzns[14]),     "ahWzCzns[14]" },	// TI
    {   0,   24,    2,     o(ahWzCzns[15]),     "ahWzCzns[15]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[0]),      "ahCzCzns[0]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[1]),      "ahCzCzns[1]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[2]),      "ahCzCzns[2]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[3]),      "ahCzCzns[3]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[4]),      "ahCzCzns[4]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[5]),      "ahCzCzns[5]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[6]),      "ahCzCzns[6]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[7]),      "ahCzCzns[7]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[8]),      "ahCzCzns[8]" },	// TI
    {   0,   24,    2,      o(ahCzCzns[9]),      "ahCzCzns[9]" },	// TI
    {   0,   24,    2,     o(ahCzCzns[10]),     "ahCzCzns[10]" },	// TI
    {   0,   24,    2,     o(ahCzCzns[11]),     "ahCzCzns[11]" },	// TI
    {   0,   24,    2,     o(ahCzCzns[12]),     "ahCzCzns[12]" },	// TI
    {   0,   24,    2,     o(ahCzCzns[13]),     "ahCzCzns[13]" },	// TI
    {   0,   24,    2,     o(ahCzCzns[14]),     "ahCzCzns[14]" },	// TI
    {   0,   24,    2,     o(ahCzCzns[15]),     "ahCzCzns[15]" },	// TI
    {   0,  149,    2,           o(oaMnCm),           "oaMnCm" },	// OAMNCH
    {   0,   17,  512,         o(oaMnFrac),         "oaMnFrac" },	// FRAC
    {   0,   34,   32,         o(oaVfDsMn),         "oaVfDsMn" },	// AFLOW_GEZ
    {   0,  147,    2,          o(oaEcoTy),          "oaEcoTy" },	// ECOTYCH
    {   0,  166,  512,           o(oaLimT),           "oaLimT" },	// TEMP_RA
    {   0,  167,  512,           o(oaLimE),           "oaLimE" },	// ENTH_RA
    {   0,   17,    2,         o(oaOaLeak),         "oaOaLeak" },	// FRAC
    {   0,   17,    2,         o(oaRaLeak),         "oaRaLeak" },	// FRAC
    {   0,   17,    2,         o(ahSOLeak),         "ahSOLeak" },	// FRAC
    {   0,   17,    2,         o(ahROLeak),         "ahROLeak" },	// FRAC
    {   0,   17,    2,         o(ahSOLoss),         "ahSOLoss" },	// FRAC
    {   0,   17,    2,         o(ahROLoss),         "ahROLoss" },	// FRAC
    {   0,  156,  512,            o(ahSch),            "ahSch" },	// AHSCHVC
    {   0,  140,    2,       o(sfan.fanTy),       "sfan.fanTy" },	// FANTYCH
    {   0,   33, 1030,        o(sfan.vfDs),        "sfan.vfDs" },	// AFLOW_GZ
    {   0,   32,    2,     o(sfan.vfDs_As),     "sfan.vfDs_As" },	// AFLOW
    {   0,   32,    2,  o(sfan.vfDs_AsNov),  "sfan.vfDs_AsNov" },	// AFLOW
    {   0,   12,    2,       o(sfan.vfMxF),       "sfan.vfMxF" },	// FLOAT
    {   0,   37,   34,       o(sfan.press),       "sfan.press" },	// PRESAIR_GEZ
    {   0,   18,   34,         o(sfan.eff),         "sfan.eff" },	// FRAC_GZ
    {   0,   53,   34,    o(sfan.shaftPwr),    "sfan.shaftPwr" },	// BHP_GZ
    {   0,   14,   34,     o(sfan.elecPwr),     "sfan.elecPwr" },	// FLOAT_GZ
    {   0,  142,   34,    o(sfan.fn_motTy),       "sfan.motTy" },	// MOTTYCH
    {   0,   18,    2,      o(sfan.motEff),      "sfan.motEff" },	// FRAC_GZ
    {   0,  143,    2,      o(sfan.motPos),      "sfan.motPos" },	// MOTPOSCH
    {   0,   12,    2,o(sfan.curvePy.k[0]),"sfan.curvePy.k[0]" },	// FLOAT
    {   0,   12,    2,o(sfan.curvePy.k[1]),"sfan.curvePy.k[1]" },	// FLOAT
    {   0,   12,    2,o(sfan.curvePy.k[2]),"sfan.curvePy.k[2]" },	// FLOAT
    {   0,   12,    2,o(sfan.curvePy.k[3]),"sfan.curvePy.k[3]" },	// FLOAT
    {   0,   12,    2,o(sfan.curvePy.k[4]),"sfan.curvePy.k[4]" },	// FLOAT
    {   0,   12,    2,o(sfan.curvePy.k[5]),"sfan.curvePy.k[5]" },	// FLOAT
    {   0,   24,    3,     o(sfan.fn_mtri),        "sfan.mtri" },	// TI
    {   0,  136,    2,   o(sfan.fn_endUse),      "sfan.endUse" },	// ENDUSECH
    {   0,    6,   34,        o(sfan.ausz),        "sfan.ausz" },	// BOO
    {   0,   48, 1026,    o(sfan.outPower),    "sfan.outPower" },	// POWER
    {   0,   48, 1026,    o(sfan.airPower),    "sfan.airPower" },	// POWER
    {   0,   35, 1030,         o(sfan.cMx),         "sfan.cMx" },	// CFLOW
    {   0,   35, 1030,           o(sfan.c),           "sfan.c" },	// CFLOW
    {   0,   42, 1030,           o(sfan.t),           "sfan.t" },	// TEMP
    {   0,   17, 1030,        o(sfan.frOn),        "sfan.frOn" },	// FRAC
    {   0,   48, 1030,           o(sfan.p),           "sfan.p" },	// POWER
    {   0,   48, 1030,           o(sfan.q),           "sfan.q" },	// POWER
    {   0,   44, 1030,          o(sfan.dT),          "sfan.dT" },	// TEMPDIFF
    {   0,   48, 1030,     o(sfan.qAround),     "sfan.qAround" },	// POWER
    {   0,  140,    2,       o(rfan.fanTy),       "rfan.fanTy" },	// FANTYCH
    {   0,   33, 1030,        o(rfan.vfDs),        "rfan.vfDs" },	// AFLOW_GZ
    {   0,   32,    2,     o(rfan.vfDs_As),     "rfan.vfDs_As" },	// AFLOW
    {   0,   32,    2,  o(rfan.vfDs_AsNov),  "rfan.vfDs_AsNov" },	// AFLOW
    {   0,   12,    2,       o(rfan.vfMxF),       "rfan.vfMxF" },	// FLOAT
    {   0,   37,   34,       o(rfan.press),       "rfan.press" },	// PRESAIR_GEZ
    {   0,   18,   34,         o(rfan.eff),         "rfan.eff" },	// FRAC_GZ
    {   0,   53,   34,    o(rfan.shaftPwr),    "rfan.shaftPwr" },	// BHP_GZ
    {   0,   14,   34,     o(rfan.elecPwr),     "rfan.elecPwr" },	// FLOAT_GZ
    {   0,  142,   34,    o(rfan.fn_motTy),       "rfan.motTy" },	// MOTTYCH
    {   0,   18,    2,      o(rfan.motEff),      "rfan.motEff" },	// FRAC_GZ
    {   0,  143,    2,      o(rfan.motPos),      "rfan.motPos" },	// MOTPOSCH
    {   0,   12,    2,o(rfan.curvePy.k[0]),"rfan.curvePy.k[0]" },	// FLOAT
    {   0,   12,    2,o(rfan.curvePy.k[1]),"rfan.curvePy.k[1]" },	// FLOAT
    {   0,   12,    2,o(rfan.curvePy.k[2]),"rfan.curvePy.k[2]" },	// FLOAT
    {   0,   12,    2,o(rfan.curvePy.k[3]),"rfan.curvePy.k[3]" },	// FLOAT
    {   0,   12,    2,o(rfan.curvePy.k[4]),"rfan.curvePy.k[4]" },	// FLOAT
    {   0,   12,    2,o(rfan.curvePy.k[5]),"rfan.curvePy.k[5]" },	// FLOAT
    {   0,   24,    3,     o(rfan.fn_mtri),        "rfan.mtri" },	// TI
    {   0,  136,    2,   o(rfan.fn_endUse),      "rfan.endUse" },	// ENDUSECH
    {   0,    6,   34,        o(rfan.ausz),        "rfan.ausz" },	// BOO
    {   0,   48, 1026,    o(rfan.outPower),    "rfan.outPower" },	// POWER
    {   0,   48, 1026,    o(rfan.airPower),    "rfan.airPower" },	// POWER
    {   0,   35, 1030,         o(rfan.cMx),         "rfan.cMx" },	// CFLOW
    {   0,   35, 1030,           o(rfan.c),           "rfan.c" },	// CFLOW
    {   0,   42, 1030,           o(rfan.t),           "rfan.t" },	// TEMP
    {   0,   17, 1030,        o(rfan.frOn),        "rfan.frOn" },	// FRAC
    {   0,   48, 1030,           o(rfan.p),           "rfan.p" },	// POWER
    {   0,   48, 1030,           o(rfan.q),           "rfan.q" },	// POWER
    {   0,   44, 1030,          o(rfan.dT),          "rfan.dT" },	// TEMPDIFF
    {   0,   48, 1030,     o(rfan.qAround),     "rfan.qAround" },	// POWER
    {   0,  154,   34,        o(cch.cchCM),        "cch.cchCM" },	// CCHCM
    {   0,   52,    2,          o(cch.pMx),          "cch.pMx" },	// KW_GZ
    {   0,   52,    2,          o(cch.pMn),          "cch.pMn" },	// KW_GZ
    {   0,   42,    2,          o(cch.tMx),          "cch.tMx" },	// TEMP
    {   0,   42,    2,          o(cch.tMn),          "cch.tMn" },	// TEMP
    {   0,   44,    2,           o(cch.dt),           "cch.dt" },	// TEMPDIFF
    {   0,   42,    2,          o(cch.tOn),          "cch.tOn" },	// TEMP
    {   0,   42,   34,         o(cch.tOff),         "cch.tOff" },	// TEMP
    {   0,   24,    3,         o(cch.mtri),         "cch.mtri" },	// TI
    {   0,   48,   34,       o(cch.p47Off),       "cch.p47Off" },	// POWER
    {   0,   48,   34,          o(cch.p17),          "cch.p17" },	// POWER
    {   0,   48,   34,          o(cch.p47),          "cch.p47" },	// POWER
    {   0,   17, 1030,      o(cch.frCprOn),      "cch.frCprOn" },	// FRAC
    {   0,    6, 1030,       o(cch.tState),       "cch.tState" },	// BOO
    {   0,   48, 1030,            o(cch.p),            "cch.p" },	// POWER
    {   2,  146,   34,      o(ahhc.coilTy),      "ahhc.coilTy" },	// COILTYCH
    {   2,  157,  514,       o(ahhc.sched),       "ahhc.sched" },	// OFFAVAILVC
    {   2,   49, 1030,     o(ahhc.captRat),     "ahhc.captRat" },	// POWER_NZ
    {   2,   48,    2,  o(ahhc.captRat_As),  "ahhc.captRat_As" },	// POWER
    {   2,   48,    2,o(ahhc.captRat_AsNov),"ahhc.captRat_AsNov" },	// POWER
    {   2,   48, 1030,    o(ahhc.bCaptRat),    "ahhc.bCaptRat" },	// POWER
    {   2,   12,  514,      o(ahhc.eirRat),      "ahhc.eirRat" },	// FLOAT
    {   2,   24,    3,        o(ahhc.mtri),        "ahhc.mtri" },	// TI
    {   2,   51,  514,       o(ahhc.auxOn),       "ahhc.auxOn" },	// POWER_GEZ
    {   2,   24,    3,   o(ahhc.auxOnMtri),   "ahhc.auxOnMtri" },	// TI
    {   2,   51,  514,      o(ahhc.auxOff),      "ahhc.auxOff" },	// POWER_GEZ
    {   2,   24,    3,  o(ahhc.auxOffMtri),  "ahhc.auxOffMtri" },	// TI
    {   2,   51,  514,  o(ahhc.auxOnAtall),  "ahhc.auxOnAtall" },	// POWER_GEZ
    {   2,   24,    3,o(ahhc.auxOnAtallMtri),"ahhc.auxOnAtallMtri" },	// TI
    {   2,   51,  514,  o(ahhc.auxFullOff),  "ahhc.auxFullOff" },	// POWER_GEZ
    {   2,   24,    3,o(ahhc.auxFullOffMtri),"ahhc.auxFullOffMtri" },	// TI
    {   2,   48, 1030,           o(ahhc.q),           "ahhc.q" },	// POWER
    {   2,   48, 1030,         o(ahhc.qPr),         "ahhc.qPr" },	// POWER
    {   2,   48, 1030,           o(ahhc.p),           "ahhc.p" },	// POWER
    {   2,   17, 1030,         o(ahhc.plr),         "ahhc.plr" },	// FRAC
    {   2,   17, 1030,       o(ahhc.plrAv),       "ahhc.plrAv" },	// FRAC
    {   2,   12, 1030,         o(ahhc.eir),         "ahhc.eir" },	// FLOAT
    {   2,   48, 1030,      o(ahhc.pAuxOn),      "ahhc.pAuxOn" },	// POWER
    {   2,   48, 1030,     o(ahhc.pAuxOff),     "ahhc.pAuxOff" },	// POWER
    {   2,   48, 1030, o(ahhc.pAuxOnAtall), "ahhc.pAuxOnAtall" },	// POWER
    {   2,   48, 1030, o(ahhc.pAuxFullOff), "ahhc.pAuxFullOff" },	// POWER
    {   3,    6, 1030,     o(ahhc.notDone),     "ahhc.notDone" },	// BOO
    {   2,   18,    2,      o(ahhc.effRat),      "ahhc.effRat" },	// FRAC_GZ
    {   2,   12,    2,   o(ahhc.pyEi.k[0]),   "ahhc.pyEi.k[0]" },	// FLOAT
    {   2,   12,    2,   o(ahhc.pyEi.k[1]),   "ahhc.pyEi.k[1]" },	// FLOAT
    {   2,   12,    2,   o(ahhc.pyEi.k[2]),   "ahhc.pyEi.k[2]" },	// FLOAT
    {   2,   12,    2,   o(ahhc.pyEi.k[3]),   "ahhc.pyEi.k[3]" },	// FLOAT
    {   2,   12,    2,   o(ahhc.pyEi.k[4]),   "ahhc.pyEi.k[4]" },	// FLOAT
    {   2,   17,  514, o(ahhc.stackEffect), "ahhc.stackEffect" },	// FRAC
    {   2,   24,    3,         o(ahhc.hpi),         "ahhc.hpi" },	// TI
    {   2,   24,   34,     o(ahhc.nxTu4hp),     "ahhc.nxTu4hp" },	// TI
    {   2,   24,   34,     o(ahhc.nxAh4hp),     "ahhc.nxAh4hp" },	// TI
    {   2,   48, 1030,    o(ahhc.flueLoss),    "ahhc.flueLoss" },	// POWER
    {   2,   48, 1030,       o(ahhc.qWant),       "ahhc.qWant" },	// POWER
    {   0,   50,    2,       o(ahhc.cap17),       "ahhc.cap17" },	// POWER_GZ
    {   0,   50,    2,       o(ahhc.cap47),       "ahhc.cap47" },	// POWER_GZ
    {   0,   50,   34,       o(ahhc.cap35),       "ahhc.cap35" },	// POWER_GZ
    {   0,   17,    2,      o(ahhc.fd35Df),      "ahhc.fd35Df" },	// FRAC
    {   0,   17,    2,       o(ahhc.capIa),       "ahhc.capIa" },	// FRAC
    {   0,   52,    2,       o(ahhc.supRh),       "ahhc.supRh" },	// KW_GZ
    {   0,   42,    2,       o(ahhc.tFrMn),       "ahhc.tFrMn" },	// TEMP
    {   0,   42,    2,       o(ahhc.tFrMx),       "ahhc.tFrMx" },	// TEMP
    {   0,   42,    2,       o(ahhc.tFrPk),       "ahhc.tFrPk" },	// TEMP
    {   0,   17,    2,      o(ahhc.dfrFMn),      "ahhc.dfrFMn" },	// FRAC
    {   0,   17,    2,      o(ahhc.dfrFMx),      "ahhc.dfrFMx" },	// FRAC
    {   0,   49,   34,      o(ahhc.dfrCap),      "ahhc.dfrCap" },	// POWER_NZ
    {   0,   52,    2,       o(ahhc.dfrRh),       "ahhc.dfrRh" },	// KW_GZ
    {   0,   42,    2,        o(ahhc.tOff),        "ahhc.tOff" },	// TEMP
    {   0,   42,    2,         o(ahhc.tOn),         "ahhc.tOn" },	// TEMP
    {   0,   52,    2,        o(ahhc.in17),        "ahhc.in17" },	// KW_GZ
    {   0,   52,    2,        o(ahhc.in47),        "ahhc.in47" },	// KW_GZ
    {   0,   17,    2,        o(ahhc.inIa),        "ahhc.inIa" },	// FRAC
    {   0,   17,    2,          o(ahhc.cd),          "ahhc.cd" },	// FRAC
    {   0,   48,   34,       o(ahhc.in17c),       "ahhc.in17c" },	// POWER
    {   0,   48,   34,       o(ahhc.in47c),       "ahhc.in47c" },	// POWER
    {   0,   12,   34,         o(ahhc.cdm),         "ahhc.cdm" },	// FLOAT
    {   0,   42, 1030,         o(ahhc.tIa),         "ahhc.tIa" },	// TEMP
    {   0,   12, 1030,     o(ahhc.qSupLim),     "ahhc.qSupLim" },	// FLOAT
    {   0,   19, 1030,     o(ahhc.frFanOn),     "ahhc.frFanOn" },	// DBL
    {   0,    6, 1030,  o(ahhc.loTLockout),  "ahhc.loTLockout" },	// BOO
    {   0,    6, 1030,       o(ahhc.supOn),       "ahhc.supOn" },	// BOO
    {   0,   48, 1030,      o(ahhc.capCon),      "ahhc.capCon" },	// POWER
    {   0,   48, 1030,    o(ahhc.pDfrhCon),    "ahhc.pDfrhCon" },	// POWER
    {   0,   48, 1030,         o(ahhc.cap),         "ahhc.cap" },	// POWER
    {   0,   17, 1030,     o(ahhc.frCprOn),     "ahhc.frCprOn" },	// FRAC
    {   0,   48, 1030,        o(ahhc.pCpr),        "ahhc.pCpr" },	// POWER
    {   0,   48, 1030,         o(ahhc.pRh),         "ahhc.pRh" },	// POWER
    {   0,   18,    2,       o(ahccBypass),       "ahccBypass" },	// FRAC_GZ
    {   2,  146,   34,      o(ahcc.coilTy),      "ahcc.coilTy" },	// COILTYCH
    {   2,  157,  514,       o(ahcc.sched),       "ahcc.sched" },	// OFFAVAILVC
    {   2,   49, 1030,     o(ahcc.captRat),     "ahcc.captRat" },	// POWER_NZ
    {   2,   48,    2,  o(ahcc.captRat_As),  "ahcc.captRat_As" },	// POWER
    {   2,   48,    2,o(ahcc.captRat_AsNov),"ahcc.captRat_AsNov" },	// POWER
    {   2,   48, 1030,    o(ahcc.bCaptRat),    "ahcc.bCaptRat" },	// POWER
    {   2,   12,  514,      o(ahcc.eirRat),      "ahcc.eirRat" },	// FLOAT
    {   2,   24,    3,        o(ahcc.mtri),        "ahcc.mtri" },	// TI
    {   2,   51,  514,       o(ahcc.auxOn),       "ahcc.auxOn" },	// POWER_GEZ
    {   2,   24,    3,   o(ahcc.auxOnMtri),   "ahcc.auxOnMtri" },	// TI
    {   2,   51,  514,      o(ahcc.auxOff),      "ahcc.auxOff" },	// POWER_GEZ
    {   2,   24,    3,  o(ahcc.auxOffMtri),  "ahcc.auxOffMtri" },	// TI
    {   2,   51,  514,  o(ahcc.auxOnAtall),  "ahcc.auxOnAtall" },	// POWER_GEZ
    {   2,   24,    3,o(ahcc.auxOnAtallMtri),"ahcc.auxOnAtallMtri" },	// TI
    {   2,   51,  514,  o(ahcc.auxFullOff),  "ahcc.auxFullOff" },	// POWER_GEZ
    {   2,   24,    3,o(ahcc.auxFullOffMtri),"ahcc.auxFullOffMtri" },	// TI
    {   2,   48, 1030,           o(ahcc.q),           "ahcc.q" },	// POWER
    {   2,   48, 1030,         o(ahcc.qPr),         "ahcc.qPr" },	// POWER
    {   2,   48, 1030,           o(ahcc.p),           "ahcc.p" },	// POWER
    {   2,   17, 1030,         o(ahcc.plr),         "ahcc.plr" },	// FRAC
    {   2,   17, 1030,       o(ahcc.plrAv),       "ahcc.plrAv" },	// FRAC
    {   2,   12, 1030,         o(ahcc.eir),         "ahcc.eir" },	// FLOAT
    {   2,   48, 1030,      o(ahcc.pAuxOn),      "ahcc.pAuxOn" },	// POWER
    {   2,   48, 1030,     o(ahcc.pAuxOff),     "ahcc.pAuxOff" },	// POWER
    {   2,   48, 1030, o(ahcc.pAuxOnAtall), "ahcc.pAuxOnAtall" },	// POWER
    {   2,   48, 1030, o(ahcc.pAuxFullOff), "ahcc.pAuxFullOff" },	// POWER
    {   3,    6, 1030,     o(ahcc.notDone),     "ahcc.notDone" },	// BOO
    {   0,   49, 1030,     o(ahcc.capsRat),     "ahcc.capsRat" },	// POWER_NZ
    {   0,   48,    2,  o(ahcc.capsRat_As),  "ahcc.capsRat_As" },	// POWER
    {   0,   48,    2,o(ahcc.capsRat_AsNov),"ahcc.capsRat_AsNov" },	// POWER
    {   0,   43,    2,    o(ahcc.minTEvap),    "ahcc.minTEvap" },	// TEMP_GZ
    {   0,   16,    2,          o(ahcc.k1),          "ahcc.k1" },	// FLOAT_LZ
    {   0,   43,    2,    o(ahcc.dsTDbCnd),    "ahcc.dsTDbCnd" },	// TEMP_GZ
    {   0,   43,    2,     o(ahcc.dsTDbEn),     "ahcc.dsTDbEn" },	// TEMP_GZ
    {   0,   43,    2,     o(ahcc.dsTWbEn),     "ahcc.dsTWbEn" },	// TEMP_GZ
    {   0,   33,   34,         o(ahcc.vfR),         "ahcc.vfR" },	// AFLOW_GZ
    {   0,   12,   34,   o(ahcc.vfRperTon),   "ahcc.vfRperTon" },	// FLOAT
    {   0,   17,    2,  o(ahcc.minUnldPlr),  "ahcc.minUnldPlr" },	// FRAC
    {   0,   17,    2,  o(ahcc.minFsldPlr),  "ahcc.minFsldPlr" },	// FRAC
    {   0,   12,    2,o(ahcc.pydxCaptT.k[0]),"ahcc.pydxCaptT.k[0]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptT.k[1]),"ahcc.pydxCaptT.k[1]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptT.k[2]),"ahcc.pydxCaptT.k[2]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptT.k[3]),"ahcc.pydxCaptT.k[3]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptT.k[4]),"ahcc.pydxCaptT.k[4]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptT.k[5]),"ahcc.pydxCaptT.k[5]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptT.k[6]),"ahcc.pydxCaptT.k[6]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptF.k[0]),"ahcc.pydxCaptF.k[0]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptF.k[1]),"ahcc.pydxCaptF.k[1]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptF.k[2]),"ahcc.pydxCaptF.k[2]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptF.k[3]),"ahcc.pydxCaptF.k[3]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptF.k[4]),"ahcc.pydxCaptF.k[4]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxCaptFLim),"ahcc.pydxCaptFLim" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirT.k[0]),"ahcc.pydxEirT.k[0]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirT.k[1]),"ahcc.pydxEirT.k[1]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirT.k[2]),"ahcc.pydxEirT.k[2]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirT.k[3]),"ahcc.pydxEirT.k[3]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirT.k[4]),"ahcc.pydxEirT.k[4]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirT.k[5]),"ahcc.pydxEirT.k[5]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirT.k[6]),"ahcc.pydxEirT.k[6]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirUl.k[0]),"ahcc.pydxEirUl.k[0]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirUl.k[1]),"ahcc.pydxEirUl.k[1]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirUl.k[2]),"ahcc.pydxEirUl.k[2]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirUl.k[3]),"ahcc.pydxEirUl.k[3]" },	// FLOAT
    {   0,   12,    2,o(ahcc.pydxEirUl.k[4]),"ahcc.pydxEirUl.k[4]" },	// FLOAT
    {   0,   24,    3,         o(ahcc.cpi),         "ahcc.cpi" },	// TI
    {   0,   39,    2,       o(ahcc.gpmDs),       "ahcc.gpmDs" },	// H2OFLOW_GZ
    {   0,   14,    2,      o(ahcc.ntuoDs),      "ahcc.ntuoDs" },	// FLOAT_GZ
    {   0,   14,    2,      o(ahcc.ntuiDs),      "ahcc.ntuiDs" },	// FLOAT_GZ
    {   0,   19,   34,o(ahcc.wsatMinTEvap),"ahcc.wsatMinTEvap" },	// DBL
    {   0,   19,   34,o(ahcc.hsatMinTEvap),"ahcc.hsatMinTEvap" },	// DBL
    {   0,   19,   34,      o(ahcc.efecOR),      "ahcc.efecOR" },	// DBL
    {   0,   19,   34,        o(ahcc.ntuR),        "ahcc.ntuR" },	// DBL
    {   0,   19,   34,o(ahcc.eirMinUnldPlr),"ahcc.eirMinUnldPlr" },	// DBL
    {   0,   19,   34,        o(ahcc.menR),        "ahcc.menR" },	// DBL
    {   0,   24,   34,     o(ahcc.nxAh4cp),     "ahcc.nxAh4cp" },	// TI
    {   0,   19,   34,        o(ahcc.mwDs),        "ahcc.mwDs" },	// DBL
    {   0,    6, 1030,   o(ahcc.wantQflag),   "ahcc.wantQflag" },	// BOO
    {   0,   19, 1030,        o(ahcc.tewd),        "ahcc.tewd" },	// DBL
    {   0,   19, 1030,        o(ahcc.chwQ),        "ahcc.chwQ" },	// DBL
    {   0,   19, 1030,          o(ahcc.tr),          "ahcc.tr" },	// DBL
    {   0,   42, 1030,      o(ahcc.cpTsPr),      "ahcc.cpTsPr" },	// TEMP
    {   0,   42, 1030,        o(ahcc.trPr),        "ahcc.trPr" },	// TEMP
    {   0,    6, 1030, o(ahcc.fullLoadWet), "ahcc.fullLoadWet" },	// BOO
    {   0,   19, 1030,     o(ahcc.frCprOn),     "ahcc.frCprOn" },	// DBL
    {   0,   19, 1030,       o(ahcc.tWbEn),       "ahcc.tWbEn" },	// DBL
    {   0,   19, 1030,         o(ahcc.hen),         "ahcc.hen" },	// DBL
    {   0,   19, 1030,      o(ahcc.tDbCnd),      "ahcc.tDbCnd" },	// DBL
    {   0,   19, 1030,       o(ahcc.efecO),       "ahcc.efecO" },	// DBL
    {   0,   19, 1030,        o(ahcc.capt),        "ahcc.capt" },	// DBL
    {   0,   19, 1030,        o(ahcc.caps),        "ahcc.caps" },	// DBL
    {   0,   19, 1030,       o(ahcc.plrVf),       "ahcc.plrVf" },	// DBL
    {   0,   19, 1030,     o(ahcc.plrSens),     "ahcc.plrSens" },	// DBL
    {   0,   19, 1030,          o(ahcc.qs),          "ahcc.qs" },	// DBL
    {   0,   19, 1030,          o(ahcc.ql),          "ahcc.ql" },	// DBL
    {   0,   47, 1030,      o(ahcc.xLGain),      "ahcc.xLGain" },	// ENERGY
    {   0,   47, 1030,    o(ahcc.xLGainYr),    "ahcc.xLGainYr" },	// ENERGY
    {   0,   10, 1030,   o(ahcc.nSubhrsLX),   "ahcc.nSubhrsLX" },	// LI
    {   0,    6, 1030,     o(ahcc.minTLtd),     "ahcc.minTLtd" },	// BOO
    {   0,    6, 1030,     o(ahcc.cfm2Few),     "ahcc.cfm2Few" },	// BOO
    {   0,   24,   32,              o(tu1),              "tu1" },	// TI
    {   0,   24,   32,             o(zhx1),             "zhx1" },	// TI
    {   1,    6, 1028,            o(ahRun),            "ahRun" },	// BOO
    {   1,    3, 1028,       o(timesReEst),       "timesReEst" },	// SI
    {   0,   74, 1028,           o(ahMode),           "ahMode" },	// AHMODE
    {   0,   19, 1028,               o(ts),               "ts" },	// DBL
    {   0,   19, 1028,               o(ws),               "ws" },	// DBL
    {   0,   19, 1024,             o(wsls),             "wsls" },	// DBL
    {   0,   19, 1028,           o(airxTs),           "airxTs" },	// DBL
    {   0,   19, 1028,           o(tsMnFo),           "tsMnFo" },	// DBL
    {   0,    6, 1028,         o(tsMnFoOk),         "tsMnFoOk" },	// BOO
    {   0,   19, 1028,           o(tsMxFo),           "tsMxFo" },	// DBL
    {   0,    6, 1028,         o(tsMxFoOk),         "tsMxFoOk" },	// BOO
    {   0,   19, 1028,               o(tr),               "tr" },	// DBL
    {   0,   19, 1028,               o(wr),               "wr" },	// DBL
    {   0,   19, 1028,               o(cr),               "cr" },	// DBL
    {   0,   19, 1028,           o(cMxfcc),           "cMxfcc" },	// DBL
    {   0,   19, 1028,          o(frFanOn),          "frFanOn" },	// DBL
    {   0,   19, 1028,          o(leakCOn),          "leakCOn" },	// DBL
    {   0,   19, 1028,              o(tr1),              "tr1" },	// DBL
    {   0,   19, 1028,              o(wr1),              "wr1" },	// DBL
    {   0,   19, 1028,              o(cr1),              "cr1" },	// DBL
    {   0,   19, 1028,              o(tr2),              "tr2" },	// DBL
    {   0,   48, 1028,            o(rfanQ),            "rfanQ" },	// POWER
    {   0,   19, 1028,             o(tmix),             "tmix" },	// DBL
    {   0,   19, 1028,              o(wen),              "wen" },	// DBL
    {   0,   19, 1028,             o(cmix),             "cmix" },	// DBL
    {   0,   19, 1028,          o(dtMixEn),          "dtMixEn" },	// DBL
    {   0,   19, 1028,              o(ten),              "ten" },	// DBL
    {   0,   19, 1028,              o(cen),              "cen" },	// DBL
    {   0,   19, 1028,              o(men),              "men" },	// DBL
    {   0,   19, 1028,              o(tex),              "tex" },	// DBL
    {   0,   19, 1028,              o(wex),              "wex" },	// DBL
    {   0,   19, 1028,             o(tex1),             "tex1" },	// DBL
    {   0,   19, 1028,          o(dtExSen),          "dtExSen" },	// DBL
    {   0,   19, 1028,             o(tSen),             "tSen" },	// DBL
    {   0,   19, 1028,           o(dtSenS),           "dtSenS" },	// DBL
    {   0,   19, 1028,              o(aTs),              "aTs" },	// DBL
    {   0,   19, 1028,              o(aWs),              "aWs" },	// DBL
    {   0,   19, 1028,             o(trNx),             "trNx" },	// DBL
    {   0,   19, 1028,             o(wrNx),             "wrNx" },	// DBL
    {   0,   19, 1028,             o(crNx),             "crNx" },	// DBL
    {   0,   19, 1028,            o(cMxnx),            "cMxnx" },	// DBL
    {   0,   19, 1028,        o(frFanOnNx),        "frFanOnNx" },	// DBL
    {   0,   19, 1028,        o(leakCOnNx),        "leakCOnNx" },	// DBL
    {   0,   19, 1028,            o(tr1Nx),            "tr1Nx" },	// DBL
    {   0,   19, 1028,            o(wr1Nx),            "wr1Nx" },	// DBL
    {   0,   19, 1028,            o(cr1Nx),            "cr1Nx" },	// DBL
    {   0,   19, 1028,            o(tr2Nx),            "tr2Nx" },	// DBL
    {   0,   73, 1028,           o(uUseAr),           "uUseAr" },	// TCUSE
    {   0,    6,  516,              o(fcc),              "fcc" },	// BOO
    {   0,    6,  516,        o(isZNorZN2),        "isZNorZN2" },	// BOO
    {   0,   19, 1028,            o(tsSp1),            "tsSp1" },	// DBL
    {   0,   19, 1028,       o(tsFullFlow),       "tsFullFlow" },	// DBL
    {   0,    6, 1028,       o(ecoEnabled),       "ecoEnabled" },	// BOO
    {   0,    6, 1028,      o(coilLockout),      "coilLockout" },	// BOO
    {   0,   19, 1028,               o(po),               "po" },	// DBL
    {   0,   76, 1028,         o(coilUsed),         "coilUsed" },	// COILUSED
    {   0,   19, 1028,             o(fanF),             "fanF" },	// DBL
    {   0,   19, 1028,          o(fanFMax),          "fanFMax" },	// DBL
    {   0,    6, 1028,       o(fanLimited),       "fanLimited" },	// BOO
    {   0,    6, 1028,      o(coilLimited),      "coilLimited" },	// BOO
    {   0,   19, 1028,           o(tPossH),           "tPossH" },	// DBL
    {   0,   19, 1028,           o(tPossC),           "tPossC" },	// DBL
    {   1,   42, 1028,           o(tsAhPr),           "tsAhPr" },	// TEMP
    {   1,  165, 1028,         o(ahTsSpPr),         "ahTsSpPr" },	// TEMP_TSCM
    {   1,   19, 1028,           o(fanFPr),           "fanFPr" },	// DBL
    {   1,   42, 1028,          o(tr2NxPr),          "tr2NxPr" },	// TEMP
    {   1,   35, 1028,          o(cr1NxPr),          "cr1NxPr" },	// CFLOW
    {   1,   45, 1028,          o(wr1NxPr),          "wr1NxPr" },	// HUMRAT
    {   1,  157, 1028,          o(hcSchPr),          "hcSchPr" },	// OFFAVAILVC
    {   1,  157, 1028,          o(ccSchPr),          "ccSchPr" },	// OFFAVAILVC
    {   1,   42, 1028,         o(tDbOShPr),         "tDbOShPr" },	// TEMP
    {   1,   45, 1028,           o(wOShPr),           "wOShPr" },	// HUMRAT
    {   1,   42, 1028,             o(tsPr),             "tsPr" },	// TEMP
    {   1,   42, 1028,             o(wsPr),             "wsPr" },	// TEMP
    {   1,   44, 1028,             o(dtPr),             "dtPr" },	// TEMPDIFF
    {   0,    6, 1028,            o(ahClf),            "ahClf" },	// BOO
    {   0,    6, 1028,            o(ahPtf),            "ahPtf" },	// BOO
    {   0,    6, 1028,           o(ahPtf2),           "ahPtf2" },	// BOO
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAH

struct SFIR sfirAHRES_IVL_SUB[] =	// fields info for RTAHRES_IVL_SUB
{
 #define o(m) offsetof(AHRES_IVL_SUB,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,    1,    0,                o(n),                "n" },	// INT
    {   0,   42,    0,             o(tDbO),             "tDbO" },	// TEMP
    {   0,   45,    0,               o(wO),               "wO" },	// HUMRAT
    {   0,   42,    0,               o(tr),               "tr" },	// TEMP
    {   0,   45,    0,               o(wr),               "wr" },	// HUMRAT
    {   0,   42,    0,             o(tmix),             "tmix" },	// TEMP
    {   0,   45,    0,             o(wmix),             "wmix" },	// HUMRAT
    {   0,   42,    0,               o(ts),               "ts" },	// TEMP
    {   0,   45,    0,               o(ws),               "ws" },	// HUMRAT
    {   0,   17,    0,               o(po),               "po" },	// FRAC
    {   0,   17,    0,          o(frFanOn),          "frFanOn" },	// FRAC
    {   0,   32,    0,               o(vf),               "vf" },	// AFLOW
    {   0,   47,    0,               o(qh),               "qh" },	// ENERGY
    {   0,   47,    0,               o(qc),               "qc" },	// ENERGY
    {   0,   47,    0,               o(qs),               "qs" },	// ENERGY
    {   0,   47,    0,               o(ql),               "ql" },	// ENERGY
    {   0,   47,    0,               o(qO),               "qO" },	// ENERGY
    {   0,   47,    0,             o(qFan),             "qFan" },	// ENERGY
    {   0,   47,    0,            o(qLoss),            "qLoss" },	// ENERGY
    {   0,   47,    0,            o(qLoad),            "qLoad" },	// ENERGY
    {   0,   47,    0,             o(qBal),             "qBal" },	// ENERGY
    {   0,   47,    0,               o(ph),               "ph" },	// ENERGY
    {   0,   47,    0,               o(pc),               "pc" },	// ENERGY
    {   0,   47,    0,            o(pAuxH),            "pAuxH" },	// ENERGY
    {   0,   47,    0,            o(pAuxC),            "pAuxC" },	// ENERGY
    {   0,   47,    0,             o(pFan),             "pFan" },	// ENERGY
    {   0,   66,    0,            o(hrsOn),            "hrsOn" },	// HOURS
    {   0,   10,    0,           o(nSubhr),           "nSubhr" },	// LI
    {   0,   10,    0,           o(nIter1),           "nIter1" },	// LI
    {   0,   10,    0,           o(nIter2),           "nIter2" },	// LI
    {   0,   10,    0,           o(nIter4),           "nIter4" },	// LI
    {   0,   10,    0,         o(nIterFan),         "nIterFan" },	// LI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAHRES_IVL_SUB

struct SFIR sfirAHRES[] =	// fields info for RTAHRES
{
 #define o(m) offsetof(AHRES,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    1,   36,              o(Y.n),              "Y.n" },	// INT
    {   0,   42,   36,           o(Y.tDbO),           "Y.tDbO" },	// TEMP
    {   0,   45,   36,             o(Y.wO),             "Y.wO" },	// HUMRAT
    {   0,   42,   36,             o(Y.tr),             "Y.tr" },	// TEMP
    {   0,   45,   36,             o(Y.wr),             "Y.wr" },	// HUMRAT
    {   0,   42,   36,           o(Y.tmix),           "Y.tmix" },	// TEMP
    {   0,   45,   36,           o(Y.wmix),           "Y.wmix" },	// HUMRAT
    {   0,   42,   36,             o(Y.ts),             "Y.ts" },	// TEMP
    {   0,   45,   36,             o(Y.ws),             "Y.ws" },	// HUMRAT
    {   0,   17,   36,             o(Y.po),             "Y.po" },	// FRAC
    {   0,   17,   36,        o(Y.frFanOn),        "Y.frFanOn" },	// FRAC
    {   0,   32,   36,             o(Y.vf),             "Y.vf" },	// AFLOW
    {   0,   47,   36,             o(Y.qh),             "Y.qh" },	// ENERGY
    {   0,   47,   36,             o(Y.qc),             "Y.qc" },	// ENERGY
    {   0,   47,   36,             o(Y.qs),             "Y.qs" },	// ENERGY
    {   0,   47,   36,             o(Y.ql),             "Y.ql" },	// ENERGY
    {   0,   47,   36,             o(Y.qO),             "Y.qO" },	// ENERGY
    {   0,   47,   36,           o(Y.qFan),           "Y.qFan" },	// ENERGY
    {   0,   47,   36,          o(Y.qLoss),          "Y.qLoss" },	// ENERGY
    {   0,   47,   36,          o(Y.qLoad),          "Y.qLoad" },	// ENERGY
    {   0,   47,   36,           o(Y.qBal),           "Y.qBal" },	// ENERGY
    {   0,   47,   36,             o(Y.ph),             "Y.ph" },	// ENERGY
    {   0,   47,   36,             o(Y.pc),             "Y.pc" },	// ENERGY
    {   0,   47,   36,          o(Y.pAuxH),          "Y.pAuxH" },	// ENERGY
    {   0,   47,   36,          o(Y.pAuxC),          "Y.pAuxC" },	// ENERGY
    {   0,   47,   36,           o(Y.pFan),           "Y.pFan" },	// ENERGY
    {   0,   66,   36,          o(Y.hrsOn),          "Y.hrsOn" },	// HOURS
    {   0,   10,   36,         o(Y.nSubhr),         "Y.nSubhr" },	// LI
    {   0,   10,   36,         o(Y.nIter1),         "Y.nIter1" },	// LI
    {   0,   10,   36,         o(Y.nIter2),         "Y.nIter2" },	// LI
    {   0,   10,   36,         o(Y.nIter4),         "Y.nIter4" },	// LI
    {   0,   10,   36,       o(Y.nIterFan),       "Y.nIterFan" },	// LI
    {   0,    1,   68,              o(M.n),              "M.n" },	// INT
    {   0,   42,   68,           o(M.tDbO),           "M.tDbO" },	// TEMP
    {   0,   45,   68,             o(M.wO),             "M.wO" },	// HUMRAT
    {   0,   42,   68,             o(M.tr),             "M.tr" },	// TEMP
    {   0,   45,   68,             o(M.wr),             "M.wr" },	// HUMRAT
    {   0,   42,   68,           o(M.tmix),           "M.tmix" },	// TEMP
    {   0,   45,   68,           o(M.wmix),           "M.wmix" },	// HUMRAT
    {   0,   42,   68,             o(M.ts),             "M.ts" },	// TEMP
    {   0,   45,   68,             o(M.ws),             "M.ws" },	// HUMRAT
    {   0,   17,   68,             o(M.po),             "M.po" },	// FRAC
    {   0,   17,   68,        o(M.frFanOn),        "M.frFanOn" },	// FRAC
    {   0,   32,   68,             o(M.vf),             "M.vf" },	// AFLOW
    {   0,   47,   68,             o(M.qh),             "M.qh" },	// ENERGY
    {   0,   47,   68,             o(M.qc),             "M.qc" },	// ENERGY
    {   0,   47,   68,             o(M.qs),             "M.qs" },	// ENERGY
    {   0,   47,   68,             o(M.ql),             "M.ql" },	// ENERGY
    {   0,   47,   68,             o(M.qO),             "M.qO" },	// ENERGY
    {   0,   47,   68,           o(M.qFan),           "M.qFan" },	// ENERGY
    {   0,   47,   68,          o(M.qLoss),          "M.qLoss" },	// ENERGY
    {   0,   47,   68,          o(M.qLoad),          "M.qLoad" },	// ENERGY
    {   0,   47,   68,           o(M.qBal),           "M.qBal" },	// ENERGY
    {   0,   47,   68,             o(M.ph),             "M.ph" },	// ENERGY
    {   0,   47,   68,             o(M.pc),             "M.pc" },	// ENERGY
    {   0,   47,   68,          o(M.pAuxH),          "M.pAuxH" },	// ENERGY
    {   0,   47,   68,          o(M.pAuxC),          "M.pAuxC" },	// ENERGY
    {   0,   47,   68,           o(M.pFan),           "M.pFan" },	// ENERGY
    {   0,   66,   68,          o(M.hrsOn),          "M.hrsOn" },	// HOURS
    {   0,   10,   68,         o(M.nSubhr),         "M.nSubhr" },	// LI
    {   0,   10,   68,         o(M.nIter1),         "M.nIter1" },	// LI
    {   0,   10,   68,         o(M.nIter2),         "M.nIter2" },	// LI
    {   0,   10,   68,         o(M.nIter4),         "M.nIter4" },	// LI
    {   0,   10,   68,       o(M.nIterFan),       "M.nIterFan" },	// LI
    {   0,    1,  132,              o(D.n),              "D.n" },	// INT
    {   0,   42,  132,           o(D.tDbO),           "D.tDbO" },	// TEMP
    {   0,   45,  132,             o(D.wO),             "D.wO" },	// HUMRAT
    {   0,   42,  132,             o(D.tr),             "D.tr" },	// TEMP
    {   0,   45,  132,             o(D.wr),             "D.wr" },	// HUMRAT
    {   0,   42,  132,           o(D.tmix),           "D.tmix" },	// TEMP
    {   0,   45,  132,           o(D.wmix),           "D.wmix" },	// HUMRAT
    {   0,   42,  132,             o(D.ts),             "D.ts" },	// TEMP
    {   0,   45,  132,             o(D.ws),             "D.ws" },	// HUMRAT
    {   0,   17,  132,             o(D.po),             "D.po" },	// FRAC
    {   0,   17,  132,        o(D.frFanOn),        "D.frFanOn" },	// FRAC
    {   0,   32,  132,             o(D.vf),             "D.vf" },	// AFLOW
    {   0,   47,  132,             o(D.qh),             "D.qh" },	// ENERGY
    {   0,   47,  132,             o(D.qc),             "D.qc" },	// ENERGY
    {   0,   47,  132,             o(D.qs),             "D.qs" },	// ENERGY
    {   0,   47,  132,             o(D.ql),             "D.ql" },	// ENERGY
    {   0,   47,  132,             o(D.qO),             "D.qO" },	// ENERGY
    {   0,   47,  132,           o(D.qFan),           "D.qFan" },	// ENERGY
    {   0,   47,  132,          o(D.qLoss),          "D.qLoss" },	// ENERGY
    {   0,   47,  132,          o(D.qLoad),          "D.qLoad" },	// ENERGY
    {   0,   47,  132,           o(D.qBal),           "D.qBal" },	// ENERGY
    {   0,   47,  132,             o(D.ph),             "D.ph" },	// ENERGY
    {   0,   47,  132,             o(D.pc),             "D.pc" },	// ENERGY
    {   0,   47,  132,          o(D.pAuxH),          "D.pAuxH" },	// ENERGY
    {   0,   47,  132,          o(D.pAuxC),          "D.pAuxC" },	// ENERGY
    {   0,   47,  132,           o(D.pFan),           "D.pFan" },	// ENERGY
    {   0,   66,  132,          o(D.hrsOn),          "D.hrsOn" },	// HOURS
    {   0,   10,  132,         o(D.nSubhr),         "D.nSubhr" },	// LI
    {   0,   10,  132,         o(D.nIter1),         "D.nIter1" },	// LI
    {   0,   10,  132,         o(D.nIter2),         "D.nIter2" },	// LI
    {   0,   10,  132,         o(D.nIter4),         "D.nIter4" },	// LI
    {   0,   10,  132,       o(D.nIterFan),       "D.nIterFan" },	// LI
    {   0,    1,  516,              o(H.n),              "H.n" },	// INT
    {   0,   42,  516,           o(H.tDbO),           "H.tDbO" },	// TEMP
    {   0,   45,  516,             o(H.wO),             "H.wO" },	// HUMRAT
    {   0,   42,  516,             o(H.tr),             "H.tr" },	// TEMP
    {   0,   45,  516,             o(H.wr),             "H.wr" },	// HUMRAT
    {   0,   42,  516,           o(H.tmix),           "H.tmix" },	// TEMP
    {   0,   45,  516,           o(H.wmix),           "H.wmix" },	// HUMRAT
    {   0,   42,  516,             o(H.ts),             "H.ts" },	// TEMP
    {   0,   45,  516,             o(H.ws),             "H.ws" },	// HUMRAT
    {   0,   17,  516,             o(H.po),             "H.po" },	// FRAC
    {   0,   17,  516,        o(H.frFanOn),        "H.frFanOn" },	// FRAC
    {   0,   32,  516,             o(H.vf),             "H.vf" },	// AFLOW
    {   0,   47,  516,             o(H.qh),             "H.qh" },	// ENERGY
    {   0,   47,  516,             o(H.qc),             "H.qc" },	// ENERGY
    {   0,   47,  516,             o(H.qs),             "H.qs" },	// ENERGY
    {   0,   47,  516,             o(H.ql),             "H.ql" },	// ENERGY
    {   0,   47,  516,             o(H.qO),             "H.qO" },	// ENERGY
    {   0,   47,  516,           o(H.qFan),           "H.qFan" },	// ENERGY
    {   0,   47,  516,          o(H.qLoss),          "H.qLoss" },	// ENERGY
    {   0,   47,  516,          o(H.qLoad),          "H.qLoad" },	// ENERGY
    {   0,   47,  516,           o(H.qBal),           "H.qBal" },	// ENERGY
    {   0,   47,  516,             o(H.ph),             "H.ph" },	// ENERGY
    {   0,   47,  516,             o(H.pc),             "H.pc" },	// ENERGY
    {   0,   47,  516,          o(H.pAuxH),          "H.pAuxH" },	// ENERGY
    {   0,   47,  516,          o(H.pAuxC),          "H.pAuxC" },	// ENERGY
    {   0,   47,  516,           o(H.pFan),           "H.pFan" },	// ENERGY
    {   0,   66,  516,          o(H.hrsOn),          "H.hrsOn" },	// HOURS
    {   0,   10,  516,         o(H.nSubhr),         "H.nSubhr" },	// LI
    {   0,   10,  516,         o(H.nIter1),         "H.nIter1" },	// LI
    {   0,   10,  516,         o(H.nIter2),         "H.nIter2" },	// LI
    {   0,   10,  516,         o(H.nIter4),         "H.nIter4" },	// LI
    {   0,   10,  516,       o(H.nIterFan),       "H.nIterFan" },	// LI
    {   0,    1, 1028,              o(S.n),              "S.n" },	// INT
    {   0,   42, 1028,           o(S.tDbO),           "S.tDbO" },	// TEMP
    {   0,   45, 1028,             o(S.wO),             "S.wO" },	// HUMRAT
    {   0,   42, 1028,             o(S.tr),             "S.tr" },	// TEMP
    {   0,   45, 1028,             o(S.wr),             "S.wr" },	// HUMRAT
    {   0,   42, 1028,           o(S.tmix),           "S.tmix" },	// TEMP
    {   0,   45, 1028,           o(S.wmix),           "S.wmix" },	// HUMRAT
    {   0,   42, 1028,             o(S.ts),             "S.ts" },	// TEMP
    {   0,   45, 1028,             o(S.ws),             "S.ws" },	// HUMRAT
    {   0,   17, 1028,             o(S.po),             "S.po" },	// FRAC
    {   0,   17, 1028,        o(S.frFanOn),        "S.frFanOn" },	// FRAC
    {   0,   32, 1028,             o(S.vf),             "S.vf" },	// AFLOW
    {   0,   47, 1028,             o(S.qh),             "S.qh" },	// ENERGY
    {   0,   47, 1028,             o(S.qc),             "S.qc" },	// ENERGY
    {   0,   47, 1028,             o(S.qs),             "S.qs" },	// ENERGY
    {   0,   47, 1028,             o(S.ql),             "S.ql" },	// ENERGY
    {   0,   47, 1028,             o(S.qO),             "S.qO" },	// ENERGY
    {   0,   47, 1028,           o(S.qFan),           "S.qFan" },	// ENERGY
    {   0,   47, 1028,          o(S.qLoss),          "S.qLoss" },	// ENERGY
    {   0,   47, 1028,          o(S.qLoad),          "S.qLoad" },	// ENERGY
    {   0,   47, 1028,           o(S.qBal),           "S.qBal" },	// ENERGY
    {   0,   47, 1028,             o(S.ph),             "S.ph" },	// ENERGY
    {   0,   47, 1028,             o(S.pc),             "S.pc" },	// ENERGY
    {   0,   47, 1028,          o(S.pAuxH),          "S.pAuxH" },	// ENERGY
    {   0,   47, 1028,          o(S.pAuxC),          "S.pAuxC" },	// ENERGY
    {   0,   47, 1028,           o(S.pFan),           "S.pFan" },	// ENERGY
    {   0,   66, 1028,          o(S.hrsOn),          "S.hrsOn" },	// HOURS
    {   0,   10, 1028,         o(S.nSubhr),         "S.nSubhr" },	// LI
    {   0,   10, 1028,         o(S.nIter1),         "S.nIter1" },	// LI
    {   0,   10, 1028,         o(S.nIter2),         "S.nIter2" },	// LI
    {   0,   10, 1028,         o(S.nIter4),         "S.nIter4" },	// LI
    {   0,   10, 1028,       o(S.nIterFan),       "S.nIterFan" },	// LI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirAHRES

struct SFIR sfirTU[] =	// fields info for RTTU
{
 #define o(m) offsetof(TU,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  155,    2,         o(tuVfMxHC),         "tuVfMxHC" },	// DIFFSAMECH
    {   0,   17,    2,       o(tuOversize),       "tuOversize" },	// FRAC
    {   0,    6,   32,         o(asHcSame),         "asHcSame" },	// BOO
    {   0,    6,   32,           o(asKVol),           "asKVol" },	// BOO
    {   0,    6,   32,   o(hcAs.az_active),   "hcAs.az_active" },	// BOO
    {   1,   20,   36,       o(hcAs.az_px),       "hcAs.az_px" },	// FLOATP
    {   1,    6,   36,       o(hcAs.isNeg),       "hcAs.isNeg" },	// BOO
    {   0,   12, 1028,        o(hcAs.az_a),        "hcAs.az_a" },	// FLOAT
    {   0,   12, 1028,        o(hcAs.az_b),        "hcAs.az_b" },	// FLOAT
    {   0,   12, 1028,        o(hcAs.ldPk),        "hcAs.ldPk" },	// FLOAT
    {   0,   12,  132,      o(hcAs.ldPkAs),      "hcAs.ldPkAs" },	// FLOAT
    {   0,   12,  132,     o(hcAs.ldPkAs1),     "hcAs.ldPkAs1" },	// FLOAT
    {   0,   12, 1028,       o(hcAs.plrPk),       "hcAs.plrPk" },	// FLOAT
    {   0,   12,  132,     o(hcAs.plrPkAs),     "hcAs.plrPkAs" },	// FLOAT
    {   0,   12, 1028,         o(hcAs.xPk),         "hcAs.xPk" },	// FLOAT
    {   0,   12,  132,       o(hcAs.xPkAs),       "hcAs.xPkAs" },	// FLOAT
    {   1,   11,  128,    o(hcAs.az_doing),    "hcAs.az_doing" },	// CHP
    {   1,   12, 1028,          o(hcAs.e1),          "hcAs.e1" },	// FLOAT
    {   1,   12, 1028,          o(hcAs.e2),          "hcAs.e2" },	// FLOAT
    {   1,   12, 1028,        o(hcAs.orig),        "hcAs.orig" },	// FLOAT
    {   0,    6,   32,   o(vhAs.az_active),   "vhAs.az_active" },	// BOO
    {   1,   20,   36,       o(vhAs.az_px),       "vhAs.az_px" },	// FLOATP
    {   1,    6,   36,       o(vhAs.isNeg),       "vhAs.isNeg" },	// BOO
    {   0,   12, 1028,        o(vhAs.az_a),        "vhAs.az_a" },	// FLOAT
    {   0,   12, 1028,        o(vhAs.az_b),        "vhAs.az_b" },	// FLOAT
    {   0,   12, 1028,        o(vhAs.ldPk),        "vhAs.ldPk" },	// FLOAT
    {   0,   12,  132,      o(vhAs.ldPkAs),      "vhAs.ldPkAs" },	// FLOAT
    {   0,   12,  132,     o(vhAs.ldPkAs1),     "vhAs.ldPkAs1" },	// FLOAT
    {   0,   12, 1028,       o(vhAs.plrPk),       "vhAs.plrPk" },	// FLOAT
    {   0,   12,  132,     o(vhAs.plrPkAs),     "vhAs.plrPkAs" },	// FLOAT
    {   0,   12, 1028,         o(vhAs.xPk),         "vhAs.xPk" },	// FLOAT
    {   0,   12,  132,       o(vhAs.xPkAs),       "vhAs.xPkAs" },	// FLOAT
    {   1,   11,  128,    o(vhAs.az_doing),    "vhAs.az_doing" },	// CHP
    {   1,   12, 1028,          o(vhAs.e1),          "vhAs.e1" },	// FLOAT
    {   1,   12, 1028,          o(vhAs.e2),          "vhAs.e2" },	// FLOAT
    {   1,   12, 1028,        o(vhAs.orig),        "vhAs.orig" },	// FLOAT
    {   0,    6,   32,   o(vcAs.az_active),   "vcAs.az_active" },	// BOO
    {   1,   20,   36,       o(vcAs.az_px),       "vcAs.az_px" },	// FLOATP
    {   1,    6,   36,       o(vcAs.isNeg),       "vcAs.isNeg" },	// BOO
    {   0,   12, 1028,        o(vcAs.az_a),        "vcAs.az_a" },	// FLOAT
    {   0,   12, 1028,        o(vcAs.az_b),        "vcAs.az_b" },	// FLOAT
    {   0,   12, 1028,        o(vcAs.ldPk),        "vcAs.ldPk" },	// FLOAT
    {   0,   12,  132,      o(vcAs.ldPkAs),      "vcAs.ldPkAs" },	// FLOAT
    {   0,   12,  132,     o(vcAs.ldPkAs1),     "vcAs.ldPkAs1" },	// FLOAT
    {   0,   12, 1028,       o(vcAs.plrPk),       "vcAs.plrPk" },	// FLOAT
    {   0,   12,  132,     o(vcAs.plrPkAs),     "vcAs.plrPkAs" },	// FLOAT
    {   0,   12, 1028,         o(vcAs.xPk),         "vcAs.xPk" },	// FLOAT
    {   0,   12,  132,       o(vcAs.xPkAs),       "vcAs.xPkAs" },	// FLOAT
    {   1,   11,  128,    o(vcAs.az_doing),    "vcAs.az_doing" },	// CHP
    {   1,   12, 1028,          o(vcAs.e1),          "vcAs.e1" },	// FLOAT
    {   1,   12, 1028,          o(vcAs.e2),          "vcAs.e2" },	// FLOAT
    {   1,   12, 1028,        o(vcAs.orig),        "vcAs.orig" },	// FLOAT
    {   0,   48, 1028,             o(qhPk),             "qhPk" },	// POWER
    {   0,   48, 1028,             o(qcPk),             "qcPk" },	// POWER
    {   0,   48, 1028,           o(qhPkAs),           "qhPkAs" },	// POWER
    {   0,   48, 1028,           o(qcPkAs),           "qcPkAs" },	// POWER
    {   0,   34, 1028,            o(bVfMn),            "bVfMn" },	// AFLOW_GEZ
    {   0,   34, 1028,           o(bVfMxH),           "bVfMxH" },	// AFLOW_GEZ
    {   0,   34, 1028,           o(bVfMxC),           "bVfMxC" },	// AFLOW_GEZ
    {   0,    6, 1028,          o(dtLoHSh),          "dtLoHSh" },	// BOO
    {   0,    6, 1028,          o(dtLoCSh),          "dtLoCSh" },	// BOO
    {   0,    6, 1028,         o(aDtLoHSh),         "aDtLoHSh" },	// BOO
    {   0,    6, 1028,         o(aDtLoCSh),         "aDtLoCSh" },	// BOO
    {   0,    6, 1028,         o(aDtLoTem),         "aDtLoTem" },	// BOO
    {   0,    6, 1028,            o(dtLoH),            "dtLoH" },	// BOO
    {   0,    6, 1028,            o(dtLoC),            "dtLoC" },	// BOO
    {   0,    6,  132,          o(dtLoHAs),          "dtLoHAs" },	// BOO
    {   0,    6, 1028,          o(dtLoCAs),          "dtLoCAs" },	// BOO
    {   0,   43,  512,            o(tuTLh),            "tuTLh" },	// TEMP_GZ
    {   0,   51,  512,          o(tuQMnLh),          "tuQMnLh" },	// POWER_GEZ
    {   0,   51,  512,          o(tuQMxLh),          "tuQMxLh" },	// POWER_GEZ
    {   0,    5,    2,          o(tuPriLh),          "tuPriLh" },	// SI_GZ
    {   0,   89,    2,    o(tuLhNeedsFlow),    "tuLhNeedsFlow" },	// NOYESCH
    {   2,  146,   34,      o(tuhc.coilTy),      "tuhc.coilTy" },	// COILTYCH
    {   2,  157,  514,       o(tuhc.sched),       "tuhc.sched" },	// OFFAVAILVC
    {   2,   49, 1030,     o(tuhc.captRat),     "tuhc.captRat" },	// POWER_NZ
    {   2,   48,    2,  o(tuhc.captRat_As),  "tuhc.captRat_As" },	// POWER
    {   2,   48,    2,o(tuhc.captRat_AsNov),"tuhc.captRat_AsNov" },	// POWER
    {   2,   48, 1030,    o(tuhc.bCaptRat),    "tuhc.bCaptRat" },	// POWER
    {   2,   12,  514,      o(tuhc.eirRat),      "tuhc.eirRat" },	// FLOAT
    {   2,   24,    3,        o(tuhc.mtri),        "tuhc.mtri" },	// TI
    {   2,   51,  514,       o(tuhc.auxOn),       "tuhc.auxOn" },	// POWER_GEZ
    {   2,   24,    3,   o(tuhc.auxOnMtri),   "tuhc.auxOnMtri" },	// TI
    {   2,   51,  514,      o(tuhc.auxOff),      "tuhc.auxOff" },	// POWER_GEZ
    {   2,   24,    3,  o(tuhc.auxOffMtri),  "tuhc.auxOffMtri" },	// TI
    {   2,   51,  514,  o(tuhc.auxOnAtall),  "tuhc.auxOnAtall" },	// POWER_GEZ
    {   2,   24,    3,o(tuhc.auxOnAtallMtri),"tuhc.auxOnAtallMtri" },	// TI
    {   2,   51,  514,  o(tuhc.auxFullOff),  "tuhc.auxFullOff" },	// POWER_GEZ
    {   2,   24,    3,o(tuhc.auxFullOffMtri),"tuhc.auxFullOffMtri" },	// TI
    {   2,   48, 1030,           o(tuhc.q),           "tuhc.q" },	// POWER
    {   2,   48, 1030,         o(tuhc.qPr),         "tuhc.qPr" },	// POWER
    {   2,   48, 1030,           o(tuhc.p),           "tuhc.p" },	// POWER
    {   2,   17, 1030,         o(tuhc.plr),         "tuhc.plr" },	// FRAC
    {   2,   17, 1030,       o(tuhc.plrAv),       "tuhc.plrAv" },	// FRAC
    {   2,   12, 1030,         o(tuhc.eir),         "tuhc.eir" },	// FLOAT
    {   2,   48, 1030,      o(tuhc.pAuxOn),      "tuhc.pAuxOn" },	// POWER
    {   2,   48, 1030,     o(tuhc.pAuxOff),     "tuhc.pAuxOff" },	// POWER
    {   2,   48, 1030, o(tuhc.pAuxOnAtall), "tuhc.pAuxOnAtall" },	// POWER
    {   2,   48, 1030, o(tuhc.pAuxFullOff), "tuhc.pAuxFullOff" },	// POWER
    {   3,    6, 1030,     o(tuhc.notDone),     "tuhc.notDone" },	// BOO
    {   0,   18,    2,      o(tuhc.effRat),      "tuhc.effRat" },	// FRAC_GZ
    {   0,   12,    2,   o(tuhc.pyEi.k[0]),   "tuhc.pyEi.k[0]" },	// FLOAT
    {   0,   12,    2,   o(tuhc.pyEi.k[1]),   "tuhc.pyEi.k[1]" },	// FLOAT
    {   0,   12,    2,   o(tuhc.pyEi.k[2]),   "tuhc.pyEi.k[2]" },	// FLOAT
    {   0,   12,    2,   o(tuhc.pyEi.k[3]),   "tuhc.pyEi.k[3]" },	// FLOAT
    {   0,   12,    2,   o(tuhc.pyEi.k[4]),   "tuhc.pyEi.k[4]" },	// FLOAT
    {   0,   17,  514, o(tuhc.stackEffect), "tuhc.stackEffect" },	// FRAC
    {   0,   24,    3,         o(tuhc.hpi),         "tuhc.hpi" },	// TI
    {   0,   24,   34,     o(tuhc.nxTu4hp),     "tuhc.nxTu4hp" },	// TI
    {   0,   24,   34,     o(tuhc.nxAh4hp),     "tuhc.nxAh4hp" },	// TI
    {   0,   48, 1030,    o(tuhc.flueLoss),    "tuhc.flueLoss" },	// POWER
    {   0,   48, 1030,       o(tuhc.qWant),       "tuhc.qWant" },	// POWER
    {   0,   43,  512,             o(tuTH),             "tuTH" },	// TEMP_GZ
    {   0,   43,  512,             o(tuTC),             "tuTC" },	// TEMP_GZ
    {   0,   34, 1028,           o(tuVfMn),           "tuVfMn" },	// AFLOW_GEZ
    {   0,   34,    2,        o(tuVfMn_As),        "tuVfMn_As" },	// AFLOW_GEZ
    {   0,   34,    2,     o(tuVfMn_AsNov),     "tuVfMn_AsNov" },	// AFLOW_GEZ
    {   0,   24,    1,               o(ai),               "ai" },	// TI
    {   0,   34, 1028,          o(tuVfMxH),          "tuVfMxH" },	// AFLOW_GEZ
    {   0,   34,    2,       o(tuVfMxH_As),       "tuVfMxH_As" },	// AFLOW_GEZ
    {   0,   34,    2,    o(tuVfMxH_AsNov),    "tuVfMxH_AsNov" },	// AFLOW_GEZ
    {   0,   34, 1028,          o(tuVfMxC),          "tuVfMxC" },	// AFLOW_GEZ
    {   0,   34,    2,       o(tuVfMxC_As),       "tuVfMxC_As" },	// AFLOW_GEZ
    {   0,   34,    2,    o(tuVfMxC_AsNov),    "tuVfMxC_AsNov" },	// AFLOW_GEZ
    {   0,   33,   32,           o(tuVfDs),           "tuVfDs" },	// AFLOW_GZ
    {   0,    5,    2,           o(tuPriH),           "tuPriH" },	// SI_GZ
    {   0,    5,    2,           o(tuPriC),           "tuPriC" },	// SI_GZ
    {   0,   17,    2,         o(tuSRLeak),         "tuSRLeak" },	// FRAC
    {   0,   17,   32,         o(tuSRLoss),         "tuSRLoss" },	// FRAC
    {   0,  158,   32,          o(tfanSch),          "tfanSch" },	// TFANSCHVC
    {   0,   17,   32,      o(tfanOffLeak),      "tfanOffLeak" },	// FRAC
    {   0,  140,    2,       o(tfan.fanTy),       "tfan.fanTy" },	// FANTYCH
    {   0,   33, 1028,        o(tfan.vfDs),        "tfan.vfDs" },	// AFLOW_GZ
    {   0,   32,    2,     o(tfan.vfDs_As),     "tfan.vfDs_As" },	// AFLOW
    {   0,   32,    2,  o(tfan.vfDs_AsNov),  "tfan.vfDs_AsNov" },	// AFLOW
    {   0,   12,    2,       o(tfan.vfMxF),       "tfan.vfMxF" },	// FLOAT
    {   0,   37,   32,       o(tfan.press),       "tfan.press" },	// PRESAIR_GEZ
    {   0,   18,   32,         o(tfan.eff),         "tfan.eff" },	// FRAC_GZ
    {   0,   53,   32,    o(tfan.shaftPwr),    "tfan.shaftPwr" },	// BHP_GZ
    {   0,   14,   32,     o(tfan.elecPwr),     "tfan.elecPwr" },	// FLOAT_GZ
    {   0,  142,   32,    o(tfan.fn_motTy),       "tfan.motTy" },	// MOTTYCH
    {   0,   18,    2,      o(tfan.motEff),      "tfan.motEff" },	// FRAC_GZ
    {   0,  143,    2,      o(tfan.motPos),      "tfan.motPos" },	// MOTPOSCH
    {   0,   12,    2,o(tfan.curvePy.k[0]),"tfan.curvePy.k[0]" },	// FLOAT
    {   0,   12,    2,o(tfan.curvePy.k[1]),"tfan.curvePy.k[1]" },	// FLOAT
    {   0,   12,    2,o(tfan.curvePy.k[2]),"tfan.curvePy.k[2]" },	// FLOAT
    {   0,   12,    2,o(tfan.curvePy.k[3]),"tfan.curvePy.k[3]" },	// FLOAT
    {   0,   12,    2,o(tfan.curvePy.k[4]),"tfan.curvePy.k[4]" },	// FLOAT
    {   0,   12,    2,o(tfan.curvePy.k[5]),"tfan.curvePy.k[5]" },	// FLOAT
    {   0,   24,    1,     o(tfan.fn_mtri),        "tfan.mtri" },	// TI
    {   0,  136,    2,   o(tfan.fn_endUse),      "tfan.endUse" },	// ENDUSECH
    {   0,    6,   32,        o(tfan.ausz),        "tfan.ausz" },	// BOO
    {   0,   48, 1024,    o(tfan.outPower),    "tfan.outPower" },	// POWER
    {   0,   48, 1024,    o(tfan.airPower),    "tfan.airPower" },	// POWER
    {   0,   35, 1028,         o(tfan.cMx),         "tfan.cMx" },	// CFLOW
    {   0,   35, 1028,           o(tfan.c),           "tfan.c" },	// CFLOW
    {   0,   42, 1028,           o(tfan.t),           "tfan.t" },	// TEMP
    {   0,   17, 1028,        o(tfan.frOn),        "tfan.frOn" },	// FRAC
    {   0,   48, 1028,           o(tfan.p),           "tfan.p" },	// POWER
    {   0,   48, 1028,           o(tfan.q),           "tfan.q" },	// POWER
    {   0,   44, 1028,          o(tfan.dT),          "tfan.dT" },	// TEMPDIFF
    {   0,   48, 1028,     o(tfan.qAround),     "tfan.qAround" },	// POWER
    {   0,   24,   32,           o(nxTu4z),           "nxTu4z" },	// TI
    {   0,   24,   32,           o(nxTu4a),           "nxTu4a" },	// TI
    {   0,   24,   32,             o(xiLh),             "xiLh" },	// TI
    {   0,   24,   32,            o(xiArH),            "xiArH" },	// TI
    {   0,   24,   32,            o(xiArC),            "xiArC" },	// TI
    {   0,   71,   32,             o(cmLh),             "cmLh" },	// TCCM
    {   0,   71,   32,             o(cmAr),             "cmAr" },	// TCCM
    {   0,   24,   32,          o(ctrlsAi),          "ctrlsAi" },	// TI
    {   0,   74, 1028,           o(wantMd),           "wantMd" },	// AHMODE
    {   0,   19, 1028,             o(lhMn),             "lhMn" },	// DBL
    {   0,   19, 1028,             o(lhMx),             "lhMx" },	// DBL
    {   0,   19, 1028,           o(lhMxMx),           "lhMxMx" },	// DBL
    {   0,   19, 1028,              o(cMn),              "cMn" },	// DBL
    {   0,   19, 1028,             o(cMxH),             "cMxH" },	// DBL
    {   0,   19, 1028,             o(cMxC),             "cMxC" },	// DBL
    {   0,   73, 1028,            o(useLh),            "useLh" },	// TCUSE
    {   0,   73, 1028,            o(useAr),            "useAr" },	// TCUSE
    {   0,   19, 1028,          o(qLhWant),          "qLhWant" },	// DBL
    {   0,   19, 1028,               o(cv),               "cv" },	// DBL
    {   0,   19, 1028,               o(cz),               "cz" },	// DBL
    {   0,   19, 1028,              o(aCv),              "aCv" },	// DBL
    {   0,    6, 1028,      o(tfanRunning),      "tfanRunning" },	// BOO
    {   0,   19, 1028,          o(tfanBkC),          "tfanBkC" },	// DBL
    {   1,   19, 1028,              o(aqO),              "aqO" },	// DBL
    {   1,   19, 1028,               o(bO),               "bO" },	// DBL
    {   1,   19, 1028,              o(tzO),              "tzO" },	// DBL
    {   1,   19, 1028,              o(wcO),              "wcO" },	// DBL
    {   1,   19, 1028,               o(cO),               "cO" },	// DBL
    {   1,   19, 1028,              o(wzO),              "wzO" },	// DBL
    {   1,   48, 1028,           o(lhMnPr),           "lhMnPr" },	// POWER
    {   1,   48, 1028,           o(lhMxPr),           "lhMxPr" },	// POWER
    {   1,   42, 1028,             o(tzPr),             "tzPr" },	// TEMP
    {   1,   45, 1028,             o(wzPr),             "wzPr" },	// HUMRAT
    {   1,   35, 1028,             o(czPr),             "czPr" },	// CFLOW
    {   1,   45, 1028,            o(wzOPr),            "wzOPr" },	// HUMRAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirTU

struct SFIR sfirZHX[] =	// fields info for RTZHX
{
 #define o(m) offsetof(ZHX,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   72,   32,            o(zhxTy),            "zhxTy" },	// ZHXTY
    {   0,   42,  512,               o(sp),               "sp" },	// TEMP
    {   0,    3,   32,            o(spPri),            "spPri" },	// SI
    {   0,   24,   32,               o(ui),               "ui" },	// TI
    {   0,   24,   32,               o(zi),               "zi" },	// TI
    {   0,   24,   32,               o(ai),               "ai" },	// TI
    {   0,   24,   32,             o(xiLh),             "xiLh" },	// TI
    {   0,   24,   32,            o(xiArH),            "xiArH" },	// TI
    {   0,   24,   32,            o(xiArC),            "xiArC" },	// TI
    {   0,   24,   32,          o(nxZhx4z),          "nxZhx4z" },	// TI
    {   0,   24,  512,        o(nxZhxSt4z),        "nxZhxSt4z" },	// TI
    {   0,   24,   32,          o(nxZhx4a),          "nxZhx4a" },	// TI
    {   0,    3,  512,              o(mda),              "mda" },	// SI
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirZHX

struct SFIR sfirPUMP[] =	// fields info for RTPUMP
{
 #define o(m) offsetof(PUMP,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   39,   32,              o(gpm),              "gpm" },	// H2OFLOW_GZ
    {   0,   38,    2,           o(hdLoss),           "hdLoss" },	// PRESH2O_GEZ
    {   0,   18,    2,           o(motEff),           "motEff" },	// FRAC_GZ
    {   0,   18,    2,           o(hydEff),           "hydEff" },	// FRAC_GZ
    {   0,   12,   32,           o(ovrunF),           "ovrunF" },	// FLOAT
    {   0,   24,    1,             o(mtri),             "mtri" },	// TI
    {   0,   19,   32,               o(mw),               "mw" },	// DBL
    {   0,   19,   32,                o(q),                "q" },	// DBL
    {   0,   19,   32,                o(p),                "p" },	// DBL
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirPUMP

struct SFIR sfirHEATPLANT[] =	// fields info for RTHEATPLANT
{
 #define o(m) offsetof(HEATPLANT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  161,  512,          o(hpSched),          "hpSched" },	// OFFAVAILONVC
    {   0,   17,    2,      o(hpPipeLossF),      "hpPipeLossF" },	// FRAC
    {   0,   24,    2,      o(hpStage1[0]),      "hpStage1[0]" },	// TI
    {   0,   24,    2,      o(hpStage1[1]),      "hpStage1[1]" },	// TI
    {   0,   24,    2,      o(hpStage1[2]),      "hpStage1[2]" },	// TI
    {   0,   24,    2,      o(hpStage1[3]),      "hpStage1[3]" },	// TI
    {   0,   24,    2,      o(hpStage1[4]),      "hpStage1[4]" },	// TI
    {   0,   24,    2,      o(hpStage1[5]),      "hpStage1[5]" },	// TI
    {   0,   24,    2,      o(hpStage1[6]),      "hpStage1[6]" },	// TI
    {   0,   24,    2,      o(hpStage1[7]),      "hpStage1[7]" },	// TI
    {   0,   24,    2,      o(hpStage2[0]),      "hpStage2[0]" },	// TI
    {   0,   24,    2,      o(hpStage2[1]),      "hpStage2[1]" },	// TI
    {   0,   24,    2,      o(hpStage2[2]),      "hpStage2[2]" },	// TI
    {   0,   24,    2,      o(hpStage2[3]),      "hpStage2[3]" },	// TI
    {   0,   24,    2,      o(hpStage2[4]),      "hpStage2[4]" },	// TI
    {   0,   24,    2,      o(hpStage2[5]),      "hpStage2[5]" },	// TI
    {   0,   24,    2,      o(hpStage2[6]),      "hpStage2[6]" },	// TI
    {   0,   24,    2,      o(hpStage2[7]),      "hpStage2[7]" },	// TI
    {   0,   24,    2,      o(hpStage3[0]),      "hpStage3[0]" },	// TI
    {   0,   24,    2,      o(hpStage3[1]),      "hpStage3[1]" },	// TI
    {   0,   24,    2,      o(hpStage3[2]),      "hpStage3[2]" },	// TI
    {   0,   24,    2,      o(hpStage3[3]),      "hpStage3[3]" },	// TI
    {   0,   24,    2,      o(hpStage3[4]),      "hpStage3[4]" },	// TI
    {   0,   24,    2,      o(hpStage3[5]),      "hpStage3[5]" },	// TI
    {   0,   24,    2,      o(hpStage3[6]),      "hpStage3[6]" },	// TI
    {   0,   24,    2,      o(hpStage3[7]),      "hpStage3[7]" },	// TI
    {   0,   24,    2,      o(hpStage4[0]),      "hpStage4[0]" },	// TI
    {   0,   24,    2,      o(hpStage4[1]),      "hpStage4[1]" },	// TI
    {   0,   24,    2,      o(hpStage4[2]),      "hpStage4[2]" },	// TI
    {   0,   24,    2,      o(hpStage4[3]),      "hpStage4[3]" },	// TI
    {   0,   24,    2,      o(hpStage4[4]),      "hpStage4[4]" },	// TI
    {   0,   24,    2,      o(hpStage4[5]),      "hpStage4[5]" },	// TI
    {   0,   24,    2,      o(hpStage4[6]),      "hpStage4[6]" },	// TI
    {   0,   24,    2,      o(hpStage4[7]),      "hpStage4[7]" },	// TI
    {   0,   24,    2,      o(hpStage5[0]),      "hpStage5[0]" },	// TI
    {   0,   24,    2,      o(hpStage5[1]),      "hpStage5[1]" },	// TI
    {   0,   24,    2,      o(hpStage5[2]),      "hpStage5[2]" },	// TI
    {   0,   24,    2,      o(hpStage5[3]),      "hpStage5[3]" },	// TI
    {   0,   24,    2,      o(hpStage5[4]),      "hpStage5[4]" },	// TI
    {   0,   24,    2,      o(hpStage5[5]),      "hpStage5[5]" },	// TI
    {   0,   24,    2,      o(hpStage5[6]),      "hpStage5[6]" },	// TI
    {   0,   24,    2,      o(hpStage5[7]),      "hpStage5[7]" },	// TI
    {   0,   24,    2,      o(hpStage6[0]),      "hpStage6[0]" },	// TI
    {   0,   24,    2,      o(hpStage6[1]),      "hpStage6[1]" },	// TI
    {   0,   24,    2,      o(hpStage6[2]),      "hpStage6[2]" },	// TI
    {   0,   24,    2,      o(hpStage6[3]),      "hpStage6[3]" },	// TI
    {   0,   24,    2,      o(hpStage6[4]),      "hpStage6[4]" },	// TI
    {   0,   24,    2,      o(hpStage6[5]),      "hpStage6[5]" },	// TI
    {   0,   24,    2,      o(hpStage6[6]),      "hpStage6[6]" },	// TI
    {   0,   24,    2,      o(hpStage6[7]),      "hpStage6[7]" },	// TI
    {   0,   24,    2,      o(hpStage7[0]),      "hpStage7[0]" },	// TI
    {   0,   24,    2,      o(hpStage7[1]),      "hpStage7[1]" },	// TI
    {   0,   24,    2,      o(hpStage7[2]),      "hpStage7[2]" },	// TI
    {   0,   24,    2,      o(hpStage7[3]),      "hpStage7[3]" },	// TI
    {   0,   24,    2,      o(hpStage7[4]),      "hpStage7[4]" },	// TI
    {   0,   24,    2,      o(hpStage7[5]),      "hpStage7[5]" },	// TI
    {   0,   24,    2,      o(hpStage7[6]),      "hpStage7[6]" },	// TI
    {   0,   24,    2,      o(hpStage7[7]),      "hpStage7[7]" },	// TI
    {   0,   24,   32,             o(blr1),             "blr1" },	// TI
    {   0,   24,   32,              o(tu1),              "tu1" },	// TI
    {   0,   24,   32,              o(ah1),              "ah1" },	// TI
    {   0,   24,   32,              o(hl1),              "hl1" },	// TI
    {   0,   19,   32,        o(qPipeLoss),        "qPipeLoss" },	// DBL
    {   0,   19,   32,        o(stgCap[0]),        "stgCap[0]" },	// DBL
    {   0,   19,   32,        o(stgCap[1]),        "stgCap[1]" },	// DBL
    {   0,   19,   32,        o(stgCap[2]),        "stgCap[2]" },	// DBL
    {   0,   19,   32,        o(stgCap[3]),        "stgCap[3]" },	// DBL
    {   0,   19,   32,        o(stgCap[4]),        "stgCap[4]" },	// DBL
    {   0,   19,   32,        o(stgCap[5]),        "stgCap[5]" },	// DBL
    {   0,   19,   32,        o(stgCap[6]),        "stgCap[6]" },	// DBL
    {   0,   19,   32,         o(stgPQ[0]),         "stgPQ[0]" },	// DBL
    {   0,   19,   32,         o(stgPQ[1]),         "stgPQ[1]" },	// DBL
    {   0,   19,   32,         o(stgPQ[2]),         "stgPQ[2]" },	// DBL
    {   0,   19,   32,         o(stgPQ[3]),         "stgPQ[3]" },	// DBL
    {   0,   19,   32,         o(stgPQ[4]),         "stgPQ[4]" },	// DBL
    {   0,   19,   32,         o(stgPQ[5]),         "stgPQ[5]" },	// DBL
    {   0,   19,   32,         o(stgPQ[6]),         "stgPQ[6]" },	// DBL
    {   0,    3,   32,             o(stgN),             "stgN" },	// SI
    {   0,    3,   32,           o(stgMxQ),           "stgMxQ" },	// SI
    {   0,    6, 1028,            o(hpClf),            "hpClf" },	// BOO
    {   0,    6, 1028,            o(hpPtf),            "hpPtf" },	// BOO
    {   0,  151, 1028,           o(hpMode),           "hpMode" },	// OFFONCH
    {   0,   19, 1028,             o(capF),             "capF" },	// DBL
    {   0,    3, 1028,             o(stgi),             "stgi" },	// SI
    {   0,   19, 1028,              o(qNx),              "qNx" },	// DBL
    {   0,   19, 1028,                o(q),                "q" },	// DBL
    {   0,   12, 1028,              o(qPk),              "qPk" },	// FLOAT
    {   0,   12, 1028,            o(qPkAs),            "qPkAs" },	// FLOAT
    {   0,  151, 1028,         o(hpModePr),         "hpModePr" },	// OFFONCH
    {   0,   48, 1028,              o(qPr),              "qPr" },	// POWER
    {   0,   48, 1028,           o(capFPr),           "capFPr" },	// POWER
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirHEATPLANT

struct SFIR sfirBOILER[] =	// fields info for RTBOILER
{
 #define o(m) offsetof(BOILER,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   50,    2,           o(blrCap),           "blrCap" },	// POWER_GZ
    {   0,   18,    2,          o(blrEffR),          "blrEffR" },	// FRAC_GZ
    {   0,   12,    2,          o(blrEirR),          "blrEirR" },	// FLOAT
    {   0,   12,    2,     o(blrPyEi.k[0]),     "blrPyEi.k[0]" },	// FLOAT
    {   0,   12,    2,     o(blrPyEi.k[1]),     "blrPyEi.k[1]" },	// FLOAT
    {   0,   12,    2,     o(blrPyEi.k[2]),     "blrPyEi.k[2]" },	// FLOAT
    {   0,   12,    2,     o(blrPyEi.k[3]),     "blrPyEi.k[3]" },	// FLOAT
    {   0,   12,    2,     o(blrPyEi.k[4]),     "blrPyEi.k[4]" },	// FLOAT
    {   0,   24,    1,             o(mtri),             "mtri" },	// TI
    {   0,   39,   34,         o(blrp.gpm),         "blrp.gpm" },	// H2OFLOW_GZ
    {   0,   38,    2,      o(blrp.hdLoss),      "blrp.hdLoss" },	// PRESH2O_GEZ
    {   0,   18,    2,      o(blrp.motEff),      "blrp.motEff" },	// FRAC_GZ
    {   0,   18,    2,      o(blrp.hydEff),      "blrp.hydEff" },	// FRAC_GZ
    {   0,   12,   34,      o(blrp.ovrunF),      "blrp.ovrunF" },	// FLOAT
    {   0,   24,    3,        o(blrp.mtri),        "blrp.mtri" },	// TI
    {   0,   19,   34,          o(blrp.mw),          "blrp.mw" },	// DBL
    {   0,   19,   34,           o(blrp.q),           "blrp.q" },	// DBL
    {   0,   19,   34,           o(blrp.p),           "blrp.p" },	// DBL
    {   0,   51,  512,            o(auxOn),            "auxOn" },	// POWER_GEZ
    {   0,   24,    1,        o(auxOnMtri),        "auxOnMtri" },	// TI
    {   0,   51,  512,           o(auxOff),           "auxOff" },	// POWER_GEZ
    {   0,   24,    1,       o(auxOffMtri),       "auxOffMtri" },	// TI
    {   0,   51,  512,       o(auxOnAtall),       "auxOnAtall" },	// POWER_GEZ
    {   0,   24,    1,   o(auxOnAtallMtri),   "auxOnAtallMtri" },	// TI
    {   0,   51,  512,       o(auxFullOff),       "auxFullOff" },	// POWER_GEZ
    {   0,   24,    1,   o(auxFullOffMtri),   "auxFullOffMtri" },	// TI
    {   0,   24,   32,         o(nxBlr4hp),         "nxBlr4hp" },	// TI
    {   0,    6,   32,             o(used),             "used" },	// BOO
    {   0,  151, 1028,          o(blrMode),          "blrMode" },	// OFFONCH
    {   0,   17, 1028,              o(plr),              "plr" },	// FRAC
    {   0,   48, 1028,                o(q),                "q" },	// POWER
    {   0,   48, 1028,                o(p),                "p" },	// POWER
    {   0,   48, 1028,           o(pAuxOn),           "pAuxOn" },	// POWER
    {   0,   48, 1028,          o(pAuxOff),          "pAuxOff" },	// POWER
    {   0,   48, 1028,      o(pAuxOnAtall),      "pAuxOnAtall" },	// POWER
    {   0,   48, 1028,      o(pAuxFullOff),      "pAuxFullOff" },	// POWER
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirBOILER

struct SFIR sfirCOOLPLANT[] =	// fields info for RTCOOLPLANT
{
 #define o(m) offsetof(COOLPLANT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,  161,  512,          o(cpSched),          "cpSched" },	// OFFAVAILONVC
    {   0,   42,  512,           o(cpTsSp),           "cpTsSp" },	// TEMP
    {   0,   17,    2,      o(cpPipeLossF),      "cpPipeLossF" },	// FRAC
    {   0,   24,    1,           o(cpTowi),           "cpTowi" },	// TI
    {   0,   24,    2,      o(cpStage1[0]),      "cpStage1[0]" },	// TI
    {   0,   24,    2,      o(cpStage1[1]),      "cpStage1[1]" },	// TI
    {   0,   24,    2,      o(cpStage1[2]),      "cpStage1[2]" },	// TI
    {   0,   24,    2,      o(cpStage1[3]),      "cpStage1[3]" },	// TI
    {   0,   24,    2,      o(cpStage1[4]),      "cpStage1[4]" },	// TI
    {   0,   24,    2,      o(cpStage1[5]),      "cpStage1[5]" },	// TI
    {   0,   24,    2,      o(cpStage1[6]),      "cpStage1[6]" },	// TI
    {   0,   24,    2,      o(cpStage1[7]),      "cpStage1[7]" },	// TI
    {   0,   24,    2,      o(cpStage2[0]),      "cpStage2[0]" },	// TI
    {   0,   24,    2,      o(cpStage2[1]),      "cpStage2[1]" },	// TI
    {   0,   24,    2,      o(cpStage2[2]),      "cpStage2[2]" },	// TI
    {   0,   24,    2,      o(cpStage2[3]),      "cpStage2[3]" },	// TI
    {   0,   24,    2,      o(cpStage2[4]),      "cpStage2[4]" },	// TI
    {   0,   24,    2,      o(cpStage2[5]),      "cpStage2[5]" },	// TI
    {   0,   24,    2,      o(cpStage2[6]),      "cpStage2[6]" },	// TI
    {   0,   24,    2,      o(cpStage2[7]),      "cpStage2[7]" },	// TI
    {   0,   24,    2,      o(cpStage3[0]),      "cpStage3[0]" },	// TI
    {   0,   24,    2,      o(cpStage3[1]),      "cpStage3[1]" },	// TI
    {   0,   24,    2,      o(cpStage3[2]),      "cpStage3[2]" },	// TI
    {   0,   24,    2,      o(cpStage3[3]),      "cpStage3[3]" },	// TI
    {   0,   24,    2,      o(cpStage3[4]),      "cpStage3[4]" },	// TI
    {   0,   24,    2,      o(cpStage3[5]),      "cpStage3[5]" },	// TI
    {   0,   24,    2,      o(cpStage3[6]),      "cpStage3[6]" },	// TI
    {   0,   24,    2,      o(cpStage3[7]),      "cpStage3[7]" },	// TI
    {   0,   24,    2,      o(cpStage4[0]),      "cpStage4[0]" },	// TI
    {   0,   24,    2,      o(cpStage4[1]),      "cpStage4[1]" },	// TI
    {   0,   24,    2,      o(cpStage4[2]),      "cpStage4[2]" },	// TI
    {   0,   24,    2,      o(cpStage4[3]),      "cpStage4[3]" },	// TI
    {   0,   24,    2,      o(cpStage4[4]),      "cpStage4[4]" },	// TI
    {   0,   24,    2,      o(cpStage4[5]),      "cpStage4[5]" },	// TI
    {   0,   24,    2,      o(cpStage4[6]),      "cpStage4[6]" },	// TI
    {   0,   24,    2,      o(cpStage4[7]),      "cpStage4[7]" },	// TI
    {   0,   24,    2,      o(cpStage5[0]),      "cpStage5[0]" },	// TI
    {   0,   24,    2,      o(cpStage5[1]),      "cpStage5[1]" },	// TI
    {   0,   24,    2,      o(cpStage5[2]),      "cpStage5[2]" },	// TI
    {   0,   24,    2,      o(cpStage5[3]),      "cpStage5[3]" },	// TI
    {   0,   24,    2,      o(cpStage5[4]),      "cpStage5[4]" },	// TI
    {   0,   24,    2,      o(cpStage5[5]),      "cpStage5[5]" },	// TI
    {   0,   24,    2,      o(cpStage5[6]),      "cpStage5[6]" },	// TI
    {   0,   24,    2,      o(cpStage5[7]),      "cpStage5[7]" },	// TI
    {   0,   24,    2,      o(cpStage6[0]),      "cpStage6[0]" },	// TI
    {   0,   24,    2,      o(cpStage6[1]),      "cpStage6[1]" },	// TI
    {   0,   24,    2,      o(cpStage6[2]),      "cpStage6[2]" },	// TI
    {   0,   24,    2,      o(cpStage6[3]),      "cpStage6[3]" },	// TI
    {   0,   24,    2,      o(cpStage6[4]),      "cpStage6[4]" },	// TI
    {   0,   24,    2,      o(cpStage6[5]),      "cpStage6[5]" },	// TI
    {   0,   24,    2,      o(cpStage6[6]),      "cpStage6[6]" },	// TI
    {   0,   24,    2,      o(cpStage6[7]),      "cpStage6[7]" },	// TI
    {   0,   24,    2,      o(cpStage7[0]),      "cpStage7[0]" },	// TI
    {   0,   24,    2,      o(cpStage7[1]),      "cpStage7[1]" },	// TI
    {   0,   24,    2,      o(cpStage7[2]),      "cpStage7[2]" },	// TI
    {   0,   24,    2,      o(cpStage7[3]),      "cpStage7[3]" },	// TI
    {   0,   24,    2,      o(cpStage7[4]),      "cpStage7[4]" },	// TI
    {   0,   24,    2,      o(cpStage7[5]),      "cpStage7[5]" },	// TI
    {   0,   24,    2,      o(cpStage7[6]),      "cpStage7[6]" },	// TI
    {   0,   24,    2,      o(cpStage7[7]),      "cpStage7[7]" },	// TI
    {   0,   24,   32,              o(ch1),              "ch1" },	// TI
    {   0,   24,   32,              o(ah1),              "ah1" },	// TI
    {   0,   24,   32,          o(nxCp4tp),          "nxCp4tp" },	// TI
    {   0,   19,   32,        o(mwDsCoils),        "mwDsCoils" },	// DBL
    {   0,   12,   32,        o(stgPPQ[0]),        "stgPPQ[0]" },	// FLOAT
    {   0,   12,   32,        o(stgPPQ[1]),        "stgPPQ[1]" },	// FLOAT
    {   0,   12,   32,        o(stgPPQ[2]),        "stgPPQ[2]" },	// FLOAT
    {   0,   12,   32,        o(stgPPQ[3]),        "stgPPQ[3]" },	// FLOAT
    {   0,   12,   32,        o(stgPPQ[4]),        "stgPPQ[4]" },	// FLOAT
    {   0,   12,   32,        o(stgPPQ[5]),        "stgPPQ[5]" },	// FLOAT
    {   0,   12,   32,        o(stgPPQ[6]),        "stgPPQ[6]" },	// FLOAT
    {   0,   12,   32,        o(stgCPQ[0]),        "stgCPQ[0]" },	// FLOAT
    {   0,   12,   32,        o(stgCPQ[1]),        "stgCPQ[1]" },	// FLOAT
    {   0,   12,   32,        o(stgCPQ[2]),        "stgCPQ[2]" },	// FLOAT
    {   0,   12,   32,        o(stgCPQ[3]),        "stgCPQ[3]" },	// FLOAT
    {   0,   12,   32,        o(stgCPQ[4]),        "stgCPQ[4]" },	// FLOAT
    {   0,   12,   32,        o(stgCPQ[5]),        "stgCPQ[5]" },	// FLOAT
    {   0,   12,   32,        o(stgCPQ[6]),        "stgCPQ[6]" },	// FLOAT
    {   0,   12,   32,        o(stgPMw[0]),        "stgPMw[0]" },	// FLOAT
    {   0,   12,   32,        o(stgPMw[1]),        "stgPMw[1]" },	// FLOAT
    {   0,   12,   32,        o(stgPMw[2]),        "stgPMw[2]" },	// FLOAT
    {   0,   12,   32,        o(stgPMw[3]),        "stgPMw[3]" },	// FLOAT
    {   0,   12,   32,        o(stgPMw[4]),        "stgPMw[4]" },	// FLOAT
    {   0,   12,   32,        o(stgPMw[5]),        "stgPMw[5]" },	// FLOAT
    {   0,   12,   32,        o(stgPMw[6]),        "stgPMw[6]" },	// FLOAT
    {   0,   12,   32,        o(stgCMw[0]),        "stgCMw[0]" },	// FLOAT
    {   0,   12,   32,        o(stgCMw[1]),        "stgCMw[1]" },	// FLOAT
    {   0,   12,   32,        o(stgCMw[2]),        "stgCMw[2]" },	// FLOAT
    {   0,   12,   32,        o(stgCMw[3]),        "stgCMw[3]" },	// FLOAT
    {   0,   12,   32,        o(stgCMw[4]),        "stgCMw[4]" },	// FLOAT
    {   0,   12,   32,        o(stgCMw[5]),        "stgCMw[5]" },	// FLOAT
    {   0,   12,   32,        o(stgCMw[6]),        "stgCMw[6]" },	// FLOAT
    {   0,    3,   32,             o(stgN),             "stgN" },	// SI
    {   0,    3,   32,         o(stgMxCap),         "stgMxCap" },	// SI
    {   0,   19,   32,          o(mxCapDs),          "mxCapDs" },	// DBL
    {   0,   19,   32,            o(mxPMw),            "mxPMw" },	// DBL
    {   0,   19,   32,          o(mxPMwOv),          "mxPMwOv" },	// DBL
    {   0,   19,   32,          o(mxCondQ),          "mxCondQ" },	// DBL
    {   0,   19,   32,        o(mxCondGpm),        "mxCondGpm" },	// DBL
    {   0,   19,   32,        o(qPipeLoss),        "qPipeLoss" },	// DBL
    {   0,   19, 1028,             o(cpTs),             "cpTs" },	// DBL
    {   0,   19, 1028,                o(q),                "q" },	// DBL
    {   0,   19, 1028,             o(qTow),             "qTow" },	// DBL
    {   0,   19, 1028,             o(tTow),             "tTow" },	// DBL
    {   0,   19, 1028,            o(mwTow),            "mwTow" },	// DBL
    {   0,   19, 1028,             o(tCnd),             "tCnd" },	// DBL
    {   0,    6, 1028,            o(cpClf),            "cpClf" },	// BOO
    {   0,    6, 1028,            o(cpPtf),            "cpPtf" },	// BOO
    {   0,  151, 1028,           o(cpMode),           "cpMode" },	// OFFONCH
    {   0,   19, 1028,          o(qLoadNx),          "qLoadNx" },	// DBL
    {   0,   19, 1028,            o(qLoad),            "qLoad" },	// DBL
    {   0,   19, 1028,               o(tr),               "tr" },	// DBL
    {   0,    3, 1028,             o(stgi),             "stgi" },	// SI
    {   0,   19, 1028,            o(qNeed),            "qNeed" },	// DBL
    {   0,   19, 1028,              o(cap),              "cap" },	// DBL
    {   0,   19, 1028,              o(plr),              "plr" },	// DBL
    {   0,   19, 1028,           o(puteTs),           "puteTs" },	// DBL
    {   0,   42, 1028,         o(cpTsSpPr),         "cpTsSpPr" },	// TEMP
    {   0,   42, 1028,        o(cpTsEstPr),        "cpTsEstPr" },	// TEMP
    {   0,  151, 1028,         o(cpModePr),         "cpModePr" },	// OFFONCH
    {   0,   42, 1028,           o(trMxPr),           "trMxPr" },	// TEMP
    {   0,   48, 1028,          o(qLoadPr),          "qLoadPr" },	// POWER
    {   0,   36, 1028,          o(mwTowPr),          "mwTowPr" },	// MFLOW
    {   0,   48, 1028,           o(tTowPr),           "tTowPr" },	// POWER
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirCOOLPLANT

struct SFIR sfirCHILLER[] =	// fields info for RTCHILLER
{
 #define o(m) offsetof(CHILLER,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,   49,    2,          o(chCapDs),          "chCapDs" },	// POWER_NZ
    {   0,   43,    2,           o(chTsDs),           "chTsDs" },	// TEMP_GZ
    {   0,   43,    2,         o(chTcndDs),         "chTcndDs" },	// TEMP_GZ
    {   0,   12,   34,    o(chPyCapT.k[0]),    "chPyCapT.k[0]" },	// FLOAT
    {   0,   12,   34,    o(chPyCapT.k[1]),    "chPyCapT.k[1]" },	// FLOAT
    {   0,   12,   34,    o(chPyCapT.k[2]),    "chPyCapT.k[2]" },	// FLOAT
    {   0,   12,   34,    o(chPyCapT.k[3]),    "chPyCapT.k[3]" },	// FLOAT
    {   0,   12,   34,    o(chPyCapT.k[4]),    "chPyCapT.k[4]" },	// FLOAT
    {   0,   12,   34,    o(chPyCapT.k[5]),    "chPyCapT.k[5]" },	// FLOAT
    {   0,   12,   34,    o(chPyCapT.k[6]),    "chPyCapT.k[6]" },	// FLOAT
    {   0,   14,    2,            o(chCop),            "chCop" },	// FLOAT_GZ
    {   0,   14,   32,          o(chEirDs),          "chEirDs" },	// FLOAT_GZ
    {   0,   12,   34,    o(chPyEirT.k[0]),    "chPyEirT.k[0]" },	// FLOAT
    {   0,   12,   34,    o(chPyEirT.k[1]),    "chPyEirT.k[1]" },	// FLOAT
    {   0,   12,   34,    o(chPyEirT.k[2]),    "chPyEirT.k[2]" },	// FLOAT
    {   0,   12,   34,    o(chPyEirT.k[3]),    "chPyEirT.k[3]" },	// FLOAT
    {   0,   12,   34,    o(chPyEirT.k[4]),    "chPyEirT.k[4]" },	// FLOAT
    {   0,   12,   34,    o(chPyEirT.k[5]),    "chPyEirT.k[5]" },	// FLOAT
    {   0,   12,   34,    o(chPyEirT.k[6]),    "chPyEirT.k[6]" },	// FLOAT
    {   0,   12,   34,   o(chPyEirUl.k[0]),   "chPyEirUl.k[0]" },	// FLOAT
    {   0,   12,   34,   o(chPyEirUl.k[1]),   "chPyEirUl.k[1]" },	// FLOAT
    {   0,   12,   34,   o(chPyEirUl.k[2]),   "chPyEirUl.k[2]" },	// FLOAT
    {   0,   12,   34,   o(chPyEirUl.k[3]),   "chPyEirUl.k[3]" },	// FLOAT
    {   0,   12,   34,   o(chPyEirUl.k[4]),   "chPyEirUl.k[4]" },	// FLOAT
    {   0,   17,    2,     o(chMinUnldPlr),     "chMinUnldPlr" },	// FRAC
    {   0,   17,    2,     o(chMinFsldPlr),     "chMinFsldPlr" },	// FRAC
    {   0,   18,    2,         o(chMotEff),         "chMotEff" },	// FRAC_GZ
    {   0,   24,    1,             o(mtri),             "mtri" },	// TI
    {   0,   39,   34,         o(chpp.gpm),         "chpp.gpm" },	// H2OFLOW_GZ
    {   0,   38,    2,      o(chpp.hdLoss),      "chpp.hdLoss" },	// PRESH2O_GEZ
    {   0,   18,    2,      o(chpp.motEff),      "chpp.motEff" },	// FRAC_GZ
    {   0,   18,    2,      o(chpp.hydEff),      "chpp.hydEff" },	// FRAC_GZ
    {   0,   12,   34,      o(chpp.ovrunF),      "chpp.ovrunF" },	// FLOAT
    {   0,   24,    3,        o(chpp.mtri),        "chpp.mtri" },	// TI
    {   0,   19,   34,          o(chpp.mw),          "chpp.mw" },	// DBL
    {   0,   19,   34,           o(chpp.q),           "chpp.q" },	// DBL
    {   0,   19,   34,           o(chpp.p),           "chpp.p" },	// DBL
    {   0,   39,   34,         o(chcp.gpm),         "chcp.gpm" },	// H2OFLOW_GZ
    {   0,   38,    2,      o(chcp.hdLoss),      "chcp.hdLoss" },	// PRESH2O_GEZ
    {   0,   18,    2,      o(chcp.motEff),      "chcp.motEff" },	// FRAC_GZ
    {   0,   18,    2,      o(chcp.hydEff),      "chcp.hydEff" },	// FRAC_GZ
    {   0,   12,   34,      o(chcp.ovrunF),      "chcp.ovrunF" },	// FLOAT
    {   0,   24,    3,        o(chcp.mtri),        "chcp.mtri" },	// TI
    {   0,   19,   34,          o(chcp.mw),          "chcp.mw" },	// DBL
    {   0,   19,   34,           o(chcp.q),           "chcp.q" },	// DBL
    {   0,   19,   34,           o(chcp.p),           "chcp.p" },	// DBL
    {   0,   51,  512,            o(auxOn),            "auxOn" },	// POWER_GEZ
    {   0,   24,    1,        o(auxOnMtri),        "auxOnMtri" },	// TI
    {   0,   51,  512,           o(auxOff),           "auxOff" },	// POWER_GEZ
    {   0,   24,    1,       o(auxOffMtri),       "auxOffMtri" },	// TI
    {   0,   51,  512,       o(auxOnAtall),       "auxOnAtall" },	// POWER_GEZ
    {   0,   24,    1,   o(auxOnAtallMtri),   "auxOnAtallMtri" },	// TI
    {   0,   51,  512,       o(auxFullOff),       "auxFullOff" },	// POWER_GEZ
    {   0,   24,    1,   o(auxFullOffMtri),   "auxFullOffMtri" },	// TI
    {   0,   24,   32,          o(nxCh4cp),          "nxCh4cp" },	// TI
    {   0,    6,   32,             o(used),             "used" },	// BOO
    {   0,   19,   32,    o(eirMinUnldPlr),    "eirMinUnldPlr" },	// DBL
    {   0,  151, 1028,           o(chMode),           "chMode" },	// OFFONCH
    {   0,   19, 1028,              o(cap),              "cap" },	// DBL
    {   0,   48, 1028,                o(q),                "q" },	// POWER
    {   0,   48, 1028,                o(p),                "p" },	// POWER
    {   0,   48, 1028,           o(pAuxOn),           "pAuxOn" },	// POWER
    {   0,   48, 1028,          o(pAuxOff),          "pAuxOff" },	// POWER
    {   0,   48, 1028,      o(pAuxOnAtall),      "pAuxOnAtall" },	// POWER
    {   0,   48, 1028,      o(pAuxFullOff),      "pAuxFullOff" },	// POWER
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirCHILLER

struct SFIR sfirTOWERPLANT[] =	// fields info for RTTOWERPLANT
{
 #define o(m) offsetof(TOWERPLANT,m)
 //    .ff .fdTy  .evf                 .off             .mName
    {   0,   23,    0,             o(name),             "name" },	// ANAME
    {   1,   24,    1,            o(ownTi),            "ownTi" },	// TI
    {   0,    5,    2,              o(ctN),              "ctN" },	// SI_GZ
    {   0,  152,    2,            o(tpStg),            "tpStg" },	// TPSTGCH
    {   0,   43,  512,           o(tpTsSp),           "tpTsSp" },	// TEMP_GZ
    {   0,   24,    1,            o(tpMtr),            "tpMtr" },	// TI
    {   0,  153,    2,             o(ctTy),             "ctTy" },	// CTTYCH
    {   0,   18,    2,          o(ctLoSpd),          "ctLoSpd" },	// FRAC_GZ
    {   0,   53,    2,       o(ctShaftPwr),       "ctShaftPwr" },	// BHP_GZ
    {   0,   18,    2,         o(ctMotEff),         "ctMotEff" },	// FRAC_GZ
    {   0,   12,   34,     o(ctFcOne.k[0]),     "ctFcOne.k[0]" },	// FLOAT
    {   0,   12,   34,     o(ctFcOne.k[1]),     "ctFcOne.k[1]" },	// FLOAT
    {   0,   12,   34,     o(ctFcOne.k[2]),     "ctFcOne.k[2]" },	// FLOAT
    {   0,   12,   34,      o(ctFcLo.k[0]),      "ctFcLo.k[0]" },	// FLOAT
    {   0,   12,   34,      o(ctFcLo.k[1]),      "ctFcLo.k[1]" },	// FLOAT
    {   0,   12,   34,      o(ctFcLo.k[2]),      "ctFcLo.k[2]" },	// FLOAT
    {   0,   12,   34,      o(ctFcHi.k[0]),      "ctFcHi.k[0]" },	// FLOAT
    {   0,   12,   34,      o(ctFcHi.k[1]),      "ctFcHi.k[1]" },	// FLOAT
    {   0,   12,   34,      o(ctFcHi.k[2]),      "ctFcHi.k[2]" },	// FLOAT
    {   0,   12,   34,     o(ctFcVar.k[0]),     "ctFcVar.k[0]" },	// FLOAT
    {   0,   12,   34,     o(ctFcVar.k[1]),     "ctFcVar.k[1]" },	// FLOAT
    {   0,   12,   34,     o(ctFcVar.k[2]),     "ctFcVar.k[2]" },	// FLOAT
    {   0,   12,   34,     o(ctFcVar.k[3]),     "ctFcVar.k[3]" },	// FLOAT
    {   0,   12,   34,     o(ctFcVar.k[4]),     "ctFcVar.k[4]" },	// FLOAT
    {   0,   49,   32,          o(ctCapDs),          "ctCapDs" },	// POWER_NZ
    {   0,   33,    2,           o(ctVfDs),           "ctVfDs" },	// AFLOW_GZ
    {   0,   39,   32,          o(ctGpmDs),          "ctGpmDs" },	// H2OFLOW_GZ
    {   0,   43,    2,         o(ctTDbODs),         "ctTDbODs" },	// TEMP_GZ
    {   0,   43,    2,         o(ctTWbODs),         "ctTWbODs" },	// TEMP_GZ
    {   0,   43,    2,          o(ctTwoDs),          "ctTwoDs" },	// TEMP_GZ
    {   0,   49,   32,          o(ctCapOd),          "ctCapOd" },	// POWER_NZ
    {   0,   33,    2,           o(ctVfOd),           "ctVfOd" },	// AFLOW_GZ
    {   0,   39,   32,          o(ctGpmOd),          "ctGpmOd" },	// H2OFLOW_GZ
    {   0,   43,    2,         o(ctTDbOOd),         "ctTDbOOd" },	// TEMP_GZ
    {   0,   43,    2,         o(ctTWbOOd),         "ctTWbOOd" },	// TEMP_GZ
    {   0,   43,    2,          o(ctTwoOd),          "ctTwoOd" },	// TEMP_GZ
    {   0,   18,   32,              o(ctK),              "ctK" },	// FRAC_GZ
    {   0,   17,    2,        o(ctStkFlFr),        "ctStkFlFr" },	// FRAC
    {   0,   17,    2,           o(ctBldn),           "ctBldn" },	// FRAC
    {   0,   17,    2,           o(ctDrft),           "ctDrft" },	// FRAC
    {   0,   43,    2,            o(ctTWm),            "ctTWm" },	// TEMP_GZ
    {   0,   24,   32,              o(cp1),              "cp1" },	// TI
    {   0,   24,   32,              o(hl1),              "hl1" },	// TI
    {   0,   19,   32,          o(oneFanP),          "oneFanP" },	// DBL
    {   0,   19,   32,             o(maDs),             "maDs" },	// DBL
    {   0,   19,   32,             o(maOd),             "maOd" },	// DBL
    {   0,   19,   32,             o(mwDs),             "mwDs" },	// DBL
    {   0,   19,   32,             o(mwOd),             "mwOd" },	// DBL
    {   0,   19,   32,       o(maOverMwDs),       "maOverMwDs" },	// DBL
    {   0,   19,   32,           o(ntuADs),           "ntuADs" },	// DBL
    {   0,   19,   32,           o(ntuAOd),           "ntuAOd" },	// DBL
    {   0,   19, 1028,             o(tpTs),             "tpTs" },	// DBL
    {   0,    6, 1028,            o(tpClf),            "tpClf" },	// BOO
    {   0,    6, 1028,            o(tpPtf),            "tpPtf" },	// BOO
    {   0,   19, 1028,             o(trNx),             "trNx" },	// DBL
    {   0,   19, 1028,          o(mwAllNx),          "mwAllNx" },	// DBL
    {   0,   19, 1028,          o(qLoadNx),          "qLoadNx" },	// DBL
    {   0,   19, 1028,               o(tr),               "tr" },	// DBL
    {   0,   19, 1028,            o(mwAll),            "mwAll" },	// DBL
    {   0,   19, 1028,            o(qLoad),            "qLoad" },	// DBL
    {   0,   19, 1028,             o(mwi1),             "mwi1" },	// DBL
    {   0,   19, 1028,            o(qNeed),            "qNeed" },	// DBL
    {   0,   19, 1028,            o(qMax1),            "qMax1" },	// DBL
    {   0,   19, 1028,            o(qMin1),            "qMin1" },	// DBL
    {   0,   75, 1028,        o(towldCase),        "towldCase" },	// TOWLOADCASE
    {   0,   48, 1028,        o(qMaxGuess),        "qMaxGuess" },	// POWER
    {   0,   48, 1028,        o(qMinGuess),        "qMinGuess" },	// POWER
    {   0,   48, 1028,         o(qLoGuess),         "qLoGuess" },	// POWER
    {   0,   48, 1028,        o(qVarGuess),        "qVarGuess" },	// POWER
    {   0,   19, 1028,          o(qVarTem),          "qVarTem" },	// DBL
    {   0,   19, 1028,           o(puteTs),           "puteTs" },	// DBL
    {   0,    3, 1028,            o(nCtOp),            "nCtOp" },	// SI
    {   0,   19, 1028,                o(f),                "f" },	// DBL
    {   0,   48, 1028,             o(fanP),             "fanP" },	// POWER
    {   0,   48, 1028,                o(q),                "q" },	// POWER
    {   0,   42, 1028,         o(tpTsSpPr),         "tpTsSpPr" },	// TEMP
    {   0,   42, 1028,        o(tpTsEstPr),        "tpTsEstPr" },	// TEMP
    {   0,   42, 1028,           o(tpTsPr),           "tpTsPr" },	// TEMP
    {   0,   42, 1028,         o(tDbOShPr),         "tDbOShPr" },	// TEMP
    {   0,   45, 1028,           o(wOShPr),           "wOShPr" },	// HUMRAT
    {   0,    0,    0,                   0,                  0 }	// terminator
 #undef o
};	// sfirTOWERPLANT



/*========== small RECORD DESCRIPTOR table */

	// find desired entry by searching for .rt 

SRD sRd[] =
{ //        recTy,    #fds,  fields-in-record pointer
  //        .rt      .nFlds     .fir
    {       RTTOPRAT, 278,   sfirTOPRAT },
    {     RTPYLINEAR,   3,   sfirPYLINEAR },
    {      RTPYCUBIC,   5,   sfirPYCUBIC },
    {     RTPYCUBIC2,   6,   sfirPYCUBIC2 },
    {     RTPYBIQUAD,   7,   sfirPYBIQUAD },
    {          RTPY4,   6,   sfirPY4 },
    {      RTINVERSE,   9,   sfirINVERSE },
    {        RTWFILE,  40,   sfirWFILE },
    {         RTWDHR,  56,   sfirWDHR },
    {       RTWFDATA,  58,   sfirWFDATA },
    {      RTDESCOND,  12,   sfirDESCOND },
    {     RTSURFGEOM,  42,   sfirSURFGEOM },
    {       RTSHADEX,  44,   sfirSHADEX },
    {       RTSGDIST,   4,   sfirSGDIST },
    {          RTHCI,   5,   sfirHCI },
    {       RTSGTARG,   3,   sfirSGTARG },
    {      RTSBCBASE,  30,   sfirSBCBASE },
    {          RTSBC,  60,   sfirSBC },
    {        RTXSURF, 208,   sfirXSURF },
    {          RTPRI, 213,   sfirPRI },
    {          RTSFI, 223,   sfirSFI },
    {        RTXSRAT, 212,   sfirXSRAT },
    {     RTWSHADRAT,  17,   sfirWSHADRAT },
    {       RTMASSBC,  16,   sfirMASSBC },
    {        RTMSRAT,  60,   sfirMSRAT },
    {         RTKIVA,   4,   sfirKIVA },
    {          RTSGI,   7,   sfirSGI },
    {        RTSGRAT,  78,   sfirSGRAT },
    {           RTGT,  21,   sfirGT },
    {          RTCON,   8,   sfirCON },
    {           RTLR,   9,   sfirLR },
    {          RTMAT,  10,   sfirMAT },
    {   RTFOUNDATION,   5,   sfirFOUNDATION },
    {     RTFNDBLOCK,  11,   sfirFNDBLOCK },
    {          RTRFI,   8,   sfirRFI },
    {           RTRI,  24,   sfirRI },
    {          RTCOL,   9,   sfirCOL },
    {         RTDVRI,  25,   sfirDVRI },
    {         RTIMPF,  24,   sfirIMPF },
    {        RTIFFNM,   5,   sfirIFFNM },
    {         RTAUSZ,  16,   sfirAUSZ },
    {    RTCONVERGER,  11,   sfirCONVERGER },
    {     RTAIRSTATE,   2,   sfirAIRSTATE },
    {      RTAIRFLOW,   3,   sfirAIRFLOW },
    {          RTFAN,  31,   sfirFAN },
    {       RTZNISUB,  62,   sfirZNISUB },
    {          RTZNI,  64,   sfirZNI },
    {          RTZNR, 300,   sfirZNR },
    {RTZNRES_IVL_SUB,  44,   sfirZNRES_IVL_SUB },
    {    RTZNRES_SUB, 220,   sfirZNRES_SUB },
    {        RTZNRES, 442,   sfirZNRES },
    {        RTANDAT,  12,   sfirANDAT },
    {       RTIZXRAT,  91,   sfirIZXRAT },
    {       RTAIRNET,   8,   sfirAIRNET },
    {          RTDBC,  31,   sfirDBC },
    {      RTDUCTSEG,  71,   sfirDUCTSEG },
    {RTDUCTSEGRES_IVL_SUB,   8,   sfirDUCTSEGRES_IVL_SUB },
    {RTDUCTSEGRES_SUB,  40,   sfirDUCTSEGRES_SUB },
    {   RTDUCTSEGRES,  42,   sfirDUCTSEGRES },
    {         RTRSYS, 249,   sfirRSYS },
    {RTRSYSRES_IVL_SUB,  37,   sfirRSYSRES_IVL_SUB },
    {  RTRSYSRES_SUB, 185,   sfirRSYSRES_SUB },
    {      RTRSYSRES, 372,   sfirRSYSRES },
    {    RTAFMTR_IVL,  14,   sfirAFMTR_IVL },
    {        RTAFMTR, 142,   sfirAFMTR },
    {   RTDHWMTR_IVL,   7,   sfirDHWMTR_IVL },
    {   RTDHWMTR_SUB,  28,   sfirDHWMTR_SUB },
    {       RTDHWMTR,  58,   sfirDHWMTR },
    {RTDHWSYSRES_IVL,   9,   sfirDHWSYSRES_IVL },
    {    RTDHWSYSRES,  47,   sfirDHWSYSRES },
    {      RTSEGTOTS,   5,   sfirSEGTOTS },
    {       RTDHWSYS, 185,   sfirDHWSYS },
    {     RTHPWHLINK,  23,   sfirHPWHLINK },
    {    RTDHWHEATER,  98,   sfirDHWHEATER },
    {   RTDHWHEATREC,  14,   sfirDHWHEATREC },
    {      RTDHWTANK,  12,   sfirDHWTANK },
    {      RTDHWPUMP,   7,   sfirDHWPUMP },
    {      RTDHWLOOP,  28,   sfirDHWLOOP },
    {          RTPBC,  31,   sfirPBC },
    {      RTPIPERUN,  11,   sfirPIPERUN },
    {      RTPIPESEG,  52,   sfirPIPESEG },
    {   RTDHWLOOPSEG,  58,   sfirDHWLOOPSEG },
    {RTDHWLOOPBRANCH,  59,   sfirDHWLOOPBRANCH },
    {  RTDHWLOOPPUMP,   8,   sfirDHWLOOPPUMP },
    {    RTDHWDAYUSE,   6,   sfirDHWDAYUSE },
    {       RTDHWUSE,  11,   sfirDHWUSE },
    {  RTDHWSOLARSYS,  58,   sfirDHWSOLARSYS },
    {RTDHWSOLARCOLLECTOR,  60,   sfirDHWSOLARCOLLECTOR },
    {      RTPVARRAY,  82,   sfirPVARRAY },
    {      RTBATTERY,  22,   sfirBATTERY },
    {         RTGAIN,  14,   sfirGAIN },
    {  RTMTR_IVL_SUB,  30,   sfirMTR_IVL_SUB },
    {          RTMTR, 124,   sfirMTR },
    {         RTHDAY,   8,   sfirHDAY },
    {         RTCOIL,  27,   sfirCOIL },
    {     RTCOOLCOIL,  99,   sfirCOOLCOIL },
    {     RTHEATCOIL,  39,   sfirHEATCOIL },
    {   RTAHHEATCOIL,  72,   sfirAHHEATCOIL },
    {          RTCCH,  15,   sfirCCH },
    {           RTAH, 461,   sfirAH },
    {RTAHRES_IVL_SUB,  32,   sfirAHRES_IVL_SUB },
    {        RTAHRES, 162,   sfirAHRES },
    {           RTTU, 199,   sfirTU },
    {          RTZHX,  15,   sfirZHX },
    {         RTPUMP,   9,   sfirPUMP },
    {    RTHEATPLANT,  93,   sfirHEATPLANT },
    {       RTBOILER,  38,   sfirBOILER },
    {    RTCOOLPLANT, 126,   sfirCOOLPLANT },
    {      RTCHILLER,  67,   sfirCHILLER },
    {   RTTOWERPLANT,  80,   sfirTOWERPLANT },
    {              0,   0,   0 }	// terminate table for searching
};		// sRd[]


/* end of srfd.cpp */
