/*
This module demonstrates a simplistic "thermostat" algorithm for the battery. Under this strategy, the battery system attempts to stay at the SOE (or above) by developing a "restoring force" that counteracts the load as the SOE deviates more and more from the target.

Sign convention is:

* P_load is positive if there is a net load required by the House after adjusting for any PV generation
* P_load is negative if there is an excess of PV power after satisfying house load
* P_req is positive if the battery is to be charged
* P_req is negative if the battery is to be discharged

P_req(P_load, P_max_chg, t) =
  -1 * if (P_load >= 0)
         if (SOE(t-1) > SOE_set)
           P_load
         else
           min(P_load, P_max_chg) - (((SOE_set - SOE(t-1)) / SOE_set) * P_max_chg)
         end
       else
         P_load
       end

Recall that what we specify to the battery is a *request*. The battery will not charge or discharge more than it has capacity. Nor will it violate its specified maximum charge/discharge rate.

NOTE: if CSE is built with the _DEBUG symbol defined, then you will get a warning when the gnPower of BuildingLoad goes negative. The GAIN object is not typically used in the fashion we present here: we merely want to specify the "effective" building load + PV without clutting this file with an entire building definition (as you would do in a real study).
*/
IMPORTFILE Data
  imFileName="pv-bt-data.csv"
  imFreq="Hour"
  imTitle="PV/BT Data"

WfName="Boulder.epw"
wuDays=0
nSubSteps=1

METER Elec0

#define kw_to_btu_per_hr 3412.142
#define zone_area 2100.0

GAIN BuildingLoad
    gnMeter = Elec0
    gnEndUse = Lit
    gnPower = import(Data,"AdjustedLoad_kW") * kw_to_btu_per_hr

// Add an actual PV

#define max_bt_pwr 4.0
#define soe_target 0.7

BATTERY "Battery"
  btMeter = Elec0
  btEndUse = BT
  btMaxCap = 16.0 // kWh
  btMaxChgPwr = max_bt_pwr // kW
  btMaxDschgPwr = max_bt_pwr // kW
  btUseUsrChg = Yes
  btChgEff = 0.97467943
  btDschgEff = 0.97467943
  btInitSOE = 1.0 // 100% state of energy
  btChgReq = -1.0 * select(
    import(Data,"AdjustedLoad_kW") >= 0.0,
      select(
        @BATTERY["Battery"].soe > soe_target,
          import(Data,"AdjustedLoad_kW"),
        default (
          min(import(Data, "AdjustedLoad_kW"), max_bt_pwr)
            - (((soe_target - @BATTERY["Battery"].soe) / soe_target) * max_bt_pwr))),
    default import(Data,"AdjustedLoad_kW"))

EXPORTFILE "pv_bt_out_thermostat"
  xfFileName = "pv_bt_out_thermostat"
  xfFileStat = OVERWRITE

EXPORT
  exExportFile = "pv_bt_out_thermostat"
  exType = UDT
  exFreq = HOUR
  exTitle = "Battery Output (Thermostat)"
  exDayBeg = jan 1
  exDayEnd = dec 31
  exHeader = ColumnsOnly
  ExportCol colhead="Day" colVal=@Top.dateStr
  ExportCol colhead="Hour" colVal=@Top.iHr
  ExportCol colhead="Battery SOE" colVal=@BATTERY["Battery"].soe
  ExportCol colhead="Battery Cycles" colVal=@BATTERY["Battery"].cycles
  ExportCol colhead="Battery Energy [kWh]" colVal=@BATTERY["Battery"].energy
  ExportCol colhead="Meter: Adjusted Load (Home - PVGen) [Btu/hr]" colVal=@METER["Elec0"].H.lit
  ExportCol colhead="Meter: Battery EndUse" colVal=@METER["Elec0"].H.bt
  ExportCol colhead="Meter: Total EndUse" colVal=@METER["Elec0"].H.tot

REPORT rpType=MTR rpMeter=Elec0 rpFreq=Month

RUN
